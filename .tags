!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
-use-cuda	tools/Makefile	/^	cd kaldi\/src; .\/configure --shared --use-cuda=no; $(MAKE) depend; $(MAKE) all$/;"	m
ASRCustomConverter	espnet/st/pytorch_backend/st.py	/^from espnet.asr.pytorch_backend.asr import CustomConverter as ASRCustomConverter$/;"	i
ASRInterface	espnet/asr/chainer_backend/asr.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/asr/pytorch_backend/asr.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/asr/pytorch_backend/asr_init.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/asr/pytorch_backend/recog.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/nets/asr_interface.py	/^class ASRInterface:$/;"	c
ASRInterface	espnet/nets/chainer_backend/asr_interface.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
ASRInterface	espnet/nets/st_interface.py	/^from espnet.nets.asr_interface import ASRInterface$/;"	i
AddDeltas	espnet/transform/add_deltas.py	/^class AddDeltas(object):$/;"	c
Any	espnet/nets/beam_search.py	/^from typing import Any$/;"	i
Any	espnet/nets/pytorch_backend/lm/transformer.py	/^from typing import Any$/;"	i
Any	espnet/nets/scorer_interface.py	/^from typing import Any$/;"	i
AttAdd	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttAdd(torch.nn.Module):$/;"	c
AttCov	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttCov(torch.nn.Module):$/;"	c
AttCovLoc	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttCovLoc(torch.nn.Module):$/;"	c
AttDot	espnet/nets/chainer_backend/rnn/attentions.py	/^class AttDot(chainer.Chain):$/;"	c
AttDot	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttDot(torch.nn.Module):$/;"	c
AttForward	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from espnet.nets.pytorch_backend.rnn.attentions import AttForward$/;"	i
AttForward	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttForward(torch.nn.Module):$/;"	c
AttForwardTA	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from espnet.nets.pytorch_backend.rnn.attentions import AttForwardTA$/;"	i
AttForwardTA	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttForwardTA(torch.nn.Module):$/;"	c
AttForwardTA	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^from espnet.nets.pytorch_backend.rnn.attentions import AttForwardTA$/;"	i
AttLoc	espnet/nets/chainer_backend/rnn/attentions.py	/^class AttLoc(chainer.Chain):$/;"	c
AttLoc	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from espnet.nets.pytorch_backend.rnn.attentions import AttLoc$/;"	i
AttLoc	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttLoc(torch.nn.Module):$/;"	c
AttLoc2D	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttLoc2D(torch.nn.Module):$/;"	c
AttLocRec	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttLocRec(torch.nn.Module):$/;"	c
AttMultiHeadAdd	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttMultiHeadAdd(torch.nn.Module):$/;"	c
AttMultiHeadDot	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttMultiHeadDot(torch.nn.Module):$/;"	c
AttMultiHeadLoc	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttMultiHeadLoc(torch.nn.Module):$/;"	c
AttMultiHeadMultiResLoc	espnet/nets/pytorch_backend/rnn/attentions.py	/^class AttMultiHeadMultiResLoc(torch.nn.Module):$/;"	c
AttentionReference	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^class AttentionReference(torch.nn.Module):$/;"	c
AutoStructify	doc/conf.py	/^from recommonmark.transform import AutoStructify$/;"	i
BATCH_COUNT_CHOICES	espnet/bin/asr_train.py	/^from espnet.utils.training.batchfy import BATCH_COUNT_CHOICES$/;"	i
BATCH_COUNT_CHOICES	espnet/bin/mt_train.py	/^from espnet.utils.training.batchfy import BATCH_COUNT_CHOICES$/;"	i
BATCH_COUNT_CHOICES	espnet/bin/st_train.py	/^from espnet.utils.training.batchfy import BATCH_COUNT_CHOICES$/;"	i
BATCH_COUNT_CHOICES	espnet/bin/tts_train.py	/^from espnet.utils.training.batchfy import BATCH_COUNT_CHOICES$/;"	i
BATCH_COUNT_CHOICES	espnet/utils/training/batchfy.py	/^BATCH_COUNT_CHOICES = ["auto", "seq", "bin", "frame"]$/;"	v
BATCH_SORT_KEY_CHOICES	espnet/utils/training/batchfy.py	/^BATCH_SORT_KEY_CHOICES = ["input", "output", "shuffle"]$/;"	v
BICUBIC	espnet/transform/spec_augment.py	/^from PIL.Image import BICUBIC$/;"	i
BPTTUpdater	espnet/lm/chainer_backend/lm.py	/^class BPTTUpdater(training.updaters.StandardUpdater):$/;"	c
BPTTUpdater	espnet/lm/pytorch_backend/lm.py	/^class BPTTUpdater(training.StandardUpdater):$/;"	c
BUILDDIR	doc/Makefile	/^BUILDDIR      = _build$/;"	m
BUILDDIR	doc/make.bat	/^set BUILDDIR=_build$/;"	v
BandpassPerturbation	espnet/transform/perturb.py	/^class BandpassPerturbation(object):$/;"	c
BaseEvaluator	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.training.evaluator import BaseEvaluator$/;"	i
BaseEvaluator	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.training.evaluator import BaseEvaluator$/;"	i
BaseEvaluator	espnet/lm/chainer_backend/lm.py	/^from espnet.utils.training.evaluator import BaseEvaluator$/;"	i
BaseEvaluator	espnet/lm/pytorch_backend/lm.py	/^from espnet.utils.training.evaluator import BaseEvaluator$/;"	i
BaseEvaluator	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.training.evaluator import BaseEvaluator$/;"	i
BaseEvaluator	espnet/utils/training/evaluator.py	/^class BaseEvaluator(Evaluator):$/;"	c
BaseEvaluator	test/test_tensorboard.py	/^from espnet.utils.training.evaluator import BaseEvaluator$/;"	i
BaseWriter	espnet/utils/cli_writers.py	/^class BaseWriter:$/;"	c
BeamSearch	espnet/asr/pytorch_backend/recog.py	/^from espnet.nets.beam_search import BeamSearch$/;"	i
BeamSearch	espnet/nets/beam_search.py	/^class BeamSearch(torch.nn.Module):$/;"	c
BeamSearch	test/test_beam_search.py	/^from espnet.nets.beam_search import BeamSearch$/;"	i
CBHG	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from espnet.nets.pytorch_backend.tacotron2.cbhg import CBHG$/;"	i
CBHG	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^class CBHG(torch.nn.Module):$/;"	c
CBHGLoss	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from espnet.nets.pytorch_backend.tacotron2.cbhg import CBHGLoss$/;"	i
CBHGLoss	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^class CBHGLoss(torch.nn.Module):$/;"	c
CMUDict	egs/arctic/tts1/local/text/cmudict.py	/^class CMUDict:$/;"	c
CMUDict	egs/ljspeech/tts1/local/text/cmudict.py	/^class CMUDict:$/;"	c
CMUDict	egs/ljspeech/tts2/local/text/cmudict.py	/^class CMUDict:$/;"	c
CMUDict	egs/tweb/tts1/local/text/cmudict.py	/^class CMUDict:$/;"	c
CMVN	espnet/transform/cmvn.py	/^class CMVN(object):$/;"	c
CMVN	test/test_transform.py	/^from espnet.transform.cmvn import CMVN$/;"	i
CMVN	utils/apply-cmvn.py	/^from espnet.transform.cmvn import CMVN$/;"	i
CONDA_PYTORCH	tools/Makefile	/^CONDA_PYTORCH := pytorch-cpu=$(TH_VERSION)$/;"	m
CONDA_PYTORCH	tools/Makefile	/^CONDA_PYTORCH := pytorch=$(TH_VERSION) cudatoolkit=$(CUDA_VERSION)$/;"	m
CONDA_URL	tools/Makefile	/^CONDA_URL := https:\/\/repo.continuum.io\/miniconda\/Miniconda3-latest-Linux-x86_64.sh$/;"	m
CTC	espnet/nets/chainer_backend/ctc.py	/^class CTC(chainer.Chain):$/;"	c
CTC	espnet/nets/chainer_backend/transformer/ctc.py	/^class CTC(chainer.Chain):$/;"	c
CTC	espnet/nets/pytorch_backend/ctc.py	/^class CTC(torch.nn.Module):$/;"	c
CTC	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.ctc import CTC$/;"	i
CTC	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.pytorch_backend.ctc import CTC$/;"	i
CTC	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.ctc import CTC$/;"	i
CTCPrefixScore	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from espnet.nets.ctc_prefix_score import CTCPrefixScore$/;"	i
CTCPrefixScore	espnet/nets/chainer_backend/rnn/decoders.py	/^from espnet.nets.ctc_prefix_score import CTCPrefixScore$/;"	i
CTCPrefixScore	espnet/nets/ctc_prefix_score.py	/^class CTCPrefixScore(object):$/;"	c
CTCPrefixScore	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^            from espnet.nets.ctc_prefix_score import CTCPrefixScore$/;"	i
CTCPrefixScore	espnet/nets/pytorch_backend/rnn/decoders.py	/^from espnet.nets.ctc_prefix_score import CTCPrefixScore$/;"	i
CTCPrefixScore	espnet/nets/scorers/ctc.py	/^from espnet.nets.ctc_prefix_score import CTCPrefixScore$/;"	i
CTCPrefixScoreTH	espnet/nets/ctc_prefix_score.py	/^class CTCPrefixScoreTH(object):$/;"	c
CTCPrefixScoreTH	espnet/nets/pytorch_backend/rnn/decoders.py	/^from espnet.nets.ctc_prefix_score import CTCPrefixScoreTH$/;"	i
CTCPrefixScorer	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.scorers.ctc import CTCPrefixScorer$/;"	i
CTCPrefixScorer	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.nets.scorers.ctc import CTCPrefixScorer$/;"	i
CTCPrefixScorer	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.scorers.ctc import CTCPrefixScorer$/;"	i
CTCPrefixScorer	espnet/nets/scorers/ctc.py	/^class CTCPrefixScorer(PartialScorerInterface):$/;"	c
CTC_LOSS_THRESHOLD	espnet/nets/chainer_backend/e2e_asr.py	/^CTC_LOSS_THRESHOLD = 10000$/;"	v
CTC_LOSS_THRESHOLD	espnet/nets/pytorch_backend/e2e_asr.py	/^CTC_LOSS_THRESHOLD = 10000$/;"	v
CTC_LOSS_THRESHOLD	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^CTC_LOSS_THRESHOLD = 10000$/;"	v
CTC_LOSS_THRESHOLD	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^CTC_LOSS_THRESHOLD = 10000$/;"	v
CTC_LOSS_THRESHOLD	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.e2e_asr import CTC_LOSS_THRESHOLD$/;"	i
CTC_LOSS_THRESHOLD	espnet/nets/pytorch_backend/e2e_st.py	/^CTC_LOSS_THRESHOLD = 10000$/;"	v
CTC_LOSS_THRESHOLD	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.e2e_asr import CTC_LOSS_THRESHOLD$/;"	i
CTC_SCORING_RATIO	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^                from espnet.nets.pytorch_backend.rnn.decoders import CTC_SCORING_RATIO$/;"	i
CTC_SCORING_RATIO	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^CTC_SCORING_RATIO = 1.5$/;"	v
CTC_SCORING_RATIO	espnet/nets/chainer_backend/rnn/decoders.py	/^CTC_SCORING_RATIO = 1.5$/;"	v
CTC_SCORING_RATIO	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^                from espnet.nets.pytorch_backend.rnn.decoders import CTC_SCORING_RATIO$/;"	i
CTC_SCORING_RATIO	espnet/nets/pytorch_backend/rnn/decoders.py	/^CTC_SCORING_RATIO = 1.5$/;"	v
CUDA_DEPS	tools/Makefile	/^CUDA_DEPS := cupy.done$/;"	m
CUDA_DEPS	tools/Makefile	/^CUDA_DEPS :=$/;"	m
CUDA_VERSION	tools/Makefile	/^CUDA_VERSION := 10.0$/;"	m
CUPY_VERSION	tools/Makefile	/^CUPY_VERSION := 6.0.0$/;"	m
CausalConv1d	espnet/nets/pytorch_backend/wavenet.py	/^class CausalConv1d(nn.Module):$/;"	c
ChModel	test/test_optimizer.py	/^class ChModel(chainer.Chain):$/;"	c
Chain	espnet/lm/pytorch_backend/lm.py	/^from chainer import Chain$/;"	i
ChainerASRInterface	espnet/nets/chainer_backend/asr_interface.py	/^class ChainerASRInterface(ASRInterface, chainer.Chain):$/;"	c
ChainerASRInterface	espnet/nets/chainer_backend/e2e_asr.py	/^from espnet.nets.chainer_backend.asr_interface import ChainerASRInterface$/;"	i
ChainerASRInterface	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from espnet.nets.chainer_backend.asr_interface import ChainerASRInterface$/;"	i
ChainerDataLoader	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.dataset import ChainerDataLoader$/;"	i
ChainerDataLoader	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.utils.dataset import ChainerDataLoader$/;"	i
ChainerDataLoader	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.dataset import ChainerDataLoader$/;"	i
ChainerDataLoader	espnet/st/pytorch_backend/st.py	/^from espnet.utils.dataset import ChainerDataLoader$/;"	i
ChainerDataLoader	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.dataset import ChainerDataLoader$/;"	i
ChainerDataLoader	espnet/utils/dataset.py	/^class ChainerDataLoader(object):$/;"	c
ChannelSelector	espnet/transform/channel_selector.py	/^class ChannelSelector(object):$/;"	c
ClassifierWithState	espnet/lm/chainer_backend/lm.py	/^class ClassifierWithState(link.Chain):$/;"	c
ClassifierWithState	espnet/nets/pytorch_backend/lm/default.py	/^class ClassifierWithState(nn.Module):$/;"	c
CommonMarkParser	doc/conf.py	/^from recommonmark.parser import CommonMarkParser$/;"	i
CompareValueTrigger	espnet/asr/asr_utils.py	/^class CompareValueTrigger(object):$/;"	c
CompareValueTrigger	espnet/asr/chainer_backend/asr.py	/^from espnet.asr.asr_utils import CompareValueTrigger$/;"	i
CompareValueTrigger	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import CompareValueTrigger$/;"	i
CompareValueTrigger	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.asr_utils import CompareValueTrigger$/;"	i
CompareValueTrigger	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.asr_utils import CompareValueTrigger$/;"	i
CompareValueTrigger	espnet/st/pytorch_backend/st.py	/^from espnet.asr.asr_utils import CompareValueTrigger$/;"	i
ComplexTensor	espnet/nets/pytorch_backend/frontends/beamformer.py	/^from torch_complex.tensor import ComplexTensor$/;"	i
ComplexTensor	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^from torch_complex.tensor import ComplexTensor$/;"	i
ComplexTensor	espnet/nets/pytorch_backend/frontends/dnn_wpe.py	/^from torch_complex.tensor import ComplexTensor$/;"	i
ComplexTensor	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^from torch_complex.tensor import ComplexTensor$/;"	i
ComplexTensor	espnet/nets/pytorch_backend/frontends/frontend.py	/^from torch_complex.tensor import ComplexTensor$/;"	i
ComplexTensor	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^from torch_complex.tensor import ComplexTensor$/;"	i
ComplexTensor	espnet/nets/pytorch_backend/nets_utils.py	/^            from torch_complex.tensor import ComplexTensor$/;"	i
ComplexTensor	espnet/nets/pytorch_backend/nets_utils.py	/^        from torch_complex.tensor import ComplexTensor$/;"	i
Conv1dLinear	espnet/nets/pytorch_backend/transformer/encoder.py	/^from espnet.nets.pytorch_backend.transformer.multi_layer_conv import Conv1dLinear$/;"	i
Conv1dLinear	espnet/nets/pytorch_backend/transformer/multi_layer_conv.py	/^class Conv1dLinear(torch.nn.Module):$/;"	c
Conv2dSubsampling	espnet/nets/chainer_backend/transformer/encoder.py	/^from espnet.nets.chainer_backend.transformer.subsampling import Conv2dSubsampling$/;"	i
Conv2dSubsampling	espnet/nets/chainer_backend/transformer/subsampling.py	/^class Conv2dSubsampling(chainer.Chain):$/;"	c
Conv2dSubsampling	espnet/nets/pytorch_backend/transformer/encoder.py	/^from espnet.nets.pytorch_backend.transformer.subsampling import Conv2dSubsampling$/;"	i
Conv2dSubsampling	espnet/nets/pytorch_backend/transformer/subsampling.py	/^class Conv2dSubsampling(torch.nn.Module):$/;"	c
CustomConverter	espnet/asr/pytorch_backend/asr.py	/^class CustomConverter(object):$/;"	c
CustomConverter	espnet/asr/pytorch_backend/asr_mix.py	/^class CustomConverter(object):$/;"	c
CustomConverter	espnet/mt/pytorch_backend/mt.py	/^class CustomConverter(object):$/;"	c
CustomConverter	espnet/nets/chainer_backend/e2e_asr.py	/^        from espnet.nets.chainer_backend.rnn.training import CustomConverter$/;"	i
CustomConverter	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^        from espnet.nets.chainer_backend.transformer.training import CustomConverter$/;"	i
CustomConverter	espnet/nets/chainer_backend/rnn/training.py	/^class CustomConverter(object):$/;"	c
CustomConverter	espnet/nets/chainer_backend/transformer/training.py	/^class CustomConverter(object):$/;"	c
CustomConverter	espnet/st/pytorch_backend/st.py	/^class CustomConverter(ASRCustomConverter):$/;"	c
CustomConverter	espnet/tts/pytorch_backend/tts.py	/^class CustomConverter(object):$/;"	c
CustomConverterMulEnc	espnet/asr/pytorch_backend/asr.py	/^class CustomConverterMulEnc(object):$/;"	c
CustomEvaluator	espnet/asr/pytorch_backend/asr.py	/^class CustomEvaluator(BaseEvaluator):$/;"	c
CustomEvaluator	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.pytorch_backend.asr import CustomEvaluator$/;"	i
CustomEvaluator	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.pytorch_backend.asr import CustomEvaluator$/;"	i
CustomEvaluator	espnet/st/pytorch_backend/st.py	/^from espnet.asr.pytorch_backend.asr import CustomEvaluator$/;"	i
CustomEvaluator	espnet/tts/pytorch_backend/tts.py	/^class CustomEvaluator(BaseEvaluator):$/;"	c
CustomParallelUpdater	espnet/nets/chainer_backend/e2e_asr.py	/^        from espnet.nets.chainer_backend.rnn.training import CustomParallelUpdater$/;"	i
CustomParallelUpdater	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^        from espnet.nets.chainer_backend.transformer.training import CustomParallelUpdater$/;"	i
CustomParallelUpdater	espnet/nets/chainer_backend/rnn/training.py	/^class CustomParallelUpdater(training.updaters.MultiprocessParallelUpdater):$/;"	c
CustomParallelUpdater	espnet/nets/chainer_backend/transformer/training.py	/^class CustomParallelUpdater(training.updaters.MultiprocessParallelUpdater):$/;"	c
CustomUpdater	espnet/asr/pytorch_backend/asr.py	/^class CustomUpdater(StandardUpdater):$/;"	c
CustomUpdater	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.pytorch_backend.asr import CustomUpdater$/;"	i
CustomUpdater	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.pytorch_backend.asr import CustomUpdater$/;"	i
CustomUpdater	espnet/nets/chainer_backend/e2e_asr.py	/^        from espnet.nets.chainer_backend.rnn.training import CustomUpdater$/;"	i
CustomUpdater	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^        from espnet.nets.chainer_backend.transformer.training import CustomUpdater$/;"	i
CustomUpdater	espnet/nets/chainer_backend/rnn/training.py	/^class CustomUpdater(training.StandardUpdater):$/;"	c
CustomUpdater	espnet/nets/chainer_backend/transformer/training.py	/^class CustomUpdater(training.StandardUpdater):$/;"	c
CustomUpdater	espnet/st/pytorch_backend/st.py	/^from espnet.asr.pytorch_backend.asr import CustomUpdater$/;"	i
CustomUpdater	espnet/tts/pytorch_backend/tts.py	/^class CustomUpdater(training.StandardUpdater):$/;"	c
DL	espnet/lm/chainer_backend/lm.py	/^import espnet.nets.chainer_backend.deterministic_embed_id as DL$/;"	i
DL	espnet/nets/chainer_backend/rnn/decoders.py	/^import espnet.nets.chainer_backend.deterministic_embed_id as DL$/;"	i
DNN_Beamformer	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^class DNN_Beamformer(torch.nn.Module):$/;"	c
DNN_Beamformer	espnet/nets/pytorch_backend/frontends/frontend.py	/^from espnet.nets.pytorch_backend.frontends.dnn_beamformer import DNN_Beamformer$/;"	i
DNN_WPE	espnet/nets/pytorch_backend/frontends/dnn_wpe.py	/^class DNN_WPE(torch.nn.Module):$/;"	c
DNN_WPE	espnet/nets/pytorch_backend/frontends/frontend.py	/^from espnet.nets.pytorch_backend.frontends.dnn_wpe import DNN_WPE$/;"	i
Data	egs/dirha_wsj/asr1/local/tools/Data_Contamination.m	/^function Data(mic_sel, wsj1_folder, wsj0_folder, dirha_folder, out_folder, IR_folder, sph_reader)$/;"	f
Decoder	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from espnet.nets.chainer_backend.transformer.decoder import Decoder$/;"	i
Decoder	espnet/nets/chainer_backend/rnn/decoders.py	/^class Decoder(chainer.Chain):$/;"	c
Decoder	espnet/nets/chainer_backend/transformer/decoder.py	/^class Decoder(chainer.Chain):$/;"	c
Decoder	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.transformer.decoder import Decoder$/;"	i
Decoder	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.transformer.decoder import Decoder$/;"	i
Decoder	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from espnet.nets.pytorch_backend.tacotron2.decoder import Decoder$/;"	i
Decoder	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.transformer.decoder import Decoder$/;"	i
Decoder	espnet/nets/pytorch_backend/rnn/decoders.py	/^class Decoder(torch.nn.Module, ScorerInterface):$/;"	c
Decoder	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^class Decoder(torch.nn.Module):$/;"	c
Decoder	espnet/nets/pytorch_backend/transformer/decoder.py	/^class Decoder(ScorerInterface, torch.nn.Module):$/;"	c
Decoder	test/test_transformer_decode.py	/^from espnet.nets.pytorch_backend.transformer.decoder import Decoder$/;"	i
DecoderLayer	espnet/nets/chainer_backend/transformer/decoder.py	/^from espnet.nets.chainer_backend.transformer.decoder_layer import DecoderLayer$/;"	i
DecoderLayer	espnet/nets/chainer_backend/transformer/decoder_layer.py	/^class DecoderLayer(chainer.Chain):$/;"	c
DecoderLayer	espnet/nets/pytorch_backend/transformer/decoder.py	/^from espnet.nets.pytorch_backend.transformer.decoder_layer import DecoderLayer$/;"	i
DecoderLayer	espnet/nets/pytorch_backend/transformer/decoder_layer.py	/^class DecoderLayer(nn.Module):$/;"	c
DecoderPrenet	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.tacotron2.decoder import Prenet as DecoderPrenet$/;"	i
DecoderRNNT	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^class DecoderRNNT(torch.nn.Module):$/;"	c
DecoderRNNTAtt	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^class DecoderRNNTAtt(torch.nn.Module):$/;"	c
DefaultRNNLM	espnet/lm/chainer_backend/lm.py	/^class DefaultRNNLM(LMInterface, link.Chain):$/;"	c
DefaultRNNLM	espnet/nets/pytorch_backend/lm/default.py	/^class DefaultRNNLM(LMInterface, nn.Module):$/;"	c
Dict	espnet/nets/beam_search.py	/^from typing import Dict$/;"	i
Dict	espnet/utils/cli_writers.py	/^from typing import Dict$/;"	i
DictionarySerializer	espnet/asr/asr_utils.py	/^from chainer.serializers.npz import DictionarySerializer$/;"	i
DummyWriter	test/test_tensorboard.py	/^class DummyWriter:$/;"	c
DurationCalculator	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.fastspeech.duration_calculator import DurationCalculator$/;"	i
DurationCalculator	espnet/nets/pytorch_backend/fastspeech/duration_calculator.py	/^class DurationCalculator(torch.nn.Module):$/;"	c
DurationCalculator	test/test_e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.fastspeech.duration_calculator import DurationCalculator$/;"	i
DurationPredictor	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.fastspeech.duration_predictor import DurationPredictor$/;"	i
DurationPredictor	espnet/nets/pytorch_backend/fastspeech/duration_predictor.py	/^class DurationPredictor(torch.nn.Module):$/;"	c
DurationPredictorLoss	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.fastspeech.duration_predictor import DurationPredictorLoss$/;"	i
DurationPredictorLoss	espnet/nets/pytorch_backend/fastspeech/duration_predictor.py	/^class DurationPredictorLoss(torch.nn.Module):$/;"	c
E2E	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.nets.pytorch_backend.e2e_asr_mix import E2E$/;"	i
E2E	espnet/nets/chainer_backend/e2e_asr.py	/^class E2E(ChainerASRInterface):$/;"	c
E2E	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^class E2E(ChainerASRInterface):$/;"	c
E2E	espnet/nets/pytorch_backend/e2e_asr.py	/^class E2E(ASRInterface, torch.nn.Module):$/;"	c
E2E	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^class E2E(E2E_ASR, ASRInterface, torch.nn.Module):$/;"	c
E2E	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^class E2E(ASRInterface, torch.nn.Module):$/;"	c
E2E	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^class E2E(ASRInterface, torch.nn.Module):$/;"	c
E2E	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^class E2E(ASRInterface, torch.nn.Module):$/;"	c
E2E	espnet/nets/pytorch_backend/e2e_mt.py	/^class E2E(MTInterface, torch.nn.Module):$/;"	c
E2E	espnet/nets/pytorch_backend/e2e_st.py	/^class E2E(STInterface, torch.nn.Module):$/;"	c
E2E	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^class E2E(STInterface, torch.nn.Module):$/;"	c
E2E_ASR	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.e2e_asr import E2E as E2E_ASR$/;"	i
E2E_pytorch	espnet/nets/chainer_backend/e2e_asr.py	/^from espnet.nets.pytorch_backend.e2e_asr import E2E as E2E_pytorch$/;"	i
EPS	utils/convert_fbank_to_wav.py	/^EPS = 1e-10$/;"	v
EmbedID	espnet/nets/chainer_backend/deterministic_embed_id.py	/^class EmbedID(link.Link):$/;"	c
EmbedIDFunction	espnet/nets/chainer_backend/deterministic_embed_id.py	/^class EmbedIDFunction(function_node.FunctionNode):$/;"	c
EmbedIDGrad	espnet/nets/chainer_backend/deterministic_embed_id.py	/^class EmbedIDGrad(function_node.FunctionNode):$/;"	c
Encoder	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from espnet.nets.chainer_backend.transformer.encoder import Encoder$/;"	i
Encoder	espnet/nets/chainer_backend/rnn/encoders.py	/^class Encoder(chainer.Chain):$/;"	c
Encoder	espnet/nets/chainer_backend/transformer/encoder.py	/^class Encoder(chainer.Chain):$/;"	c
Encoder	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.transformer.encoder import Encoder$/;"	i
Encoder	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.transformer.encoder import Encoder$/;"	i
Encoder	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.transformer.encoder import Encoder$/;"	i
Encoder	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from espnet.nets.pytorch_backend.tacotron2.encoder import Encoder$/;"	i
Encoder	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.transformer.encoder import Encoder$/;"	i
Encoder	espnet/nets/pytorch_backend/lm/transformer.py	/^from espnet.nets.pytorch_backend.transformer.encoder import Encoder$/;"	i
Encoder	espnet/nets/pytorch_backend/rnn/encoders.py	/^class Encoder(torch.nn.Module):$/;"	c
Encoder	espnet/nets/pytorch_backend/tacotron2/encoder.py	/^class Encoder(torch.nn.Module):$/;"	c
Encoder	espnet/nets/pytorch_backend/transformer/encoder.py	/^class Encoder(torch.nn.Module):$/;"	c
EncoderLayer	espnet/nets/chainer_backend/transformer/encoder.py	/^from espnet.nets.chainer_backend.transformer.encoder_layer import EncoderLayer$/;"	i
EncoderLayer	espnet/nets/chainer_backend/transformer/encoder_layer.py	/^class EncoderLayer(chainer.Chain):$/;"	c
EncoderLayer	espnet/nets/pytorch_backend/transformer/encoder.py	/^from espnet.nets.pytorch_backend.transformer.encoder_layer import EncoderLayer$/;"	i
EncoderLayer	espnet/nets/pytorch_backend/transformer/encoder_layer.py	/^class EncoderLayer(nn.Module):$/;"	c
EncoderMix	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^class EncoderMix(torch.nn.Module):$/;"	c
EncoderPrenet	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.tacotron2.encoder import Encoder as EncoderPrenet$/;"	i
ErrorCalculator	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^            from espnet.nets.e2e_asr_common import ErrorCalculator$/;"	i
ErrorCalculator	espnet/nets/e2e_asr_common.py	/^class ErrorCalculator(object):$/;"	c
ErrorCalculator	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^            from espnet.nets.e2e_asr_common import ErrorCalculator$/;"	i
ErrorCalculator	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^            from espnet.nets.e2e_asr_common import ErrorCalculator$/;"	i
ErrorCalculator	test/test_utils.py	/^    from espnet.nets.e2e_asr_common import ErrorCalculator$/;"	i
Evaluator	espnet/utils/training/evaluator.py	/^from chainer.training.extensions import Evaluator$/;"	i
Extension	espnet/utils/training/iterators.py	/^from chainer.training.extension import Extension$/;"	i
Extension	espnet/utils/training/tensorboard_logger.py	/^from chainer.training.extension import Extension$/;"	i
F	espnet/lm/chainer_backend/extlm.py	/^import chainer.functions as F$/;"	i
F	espnet/lm/chainer_backend/lm.py	/^import chainer.functions as F$/;"	i
F	espnet/lm/pytorch_backend/extlm.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/chainer_backend/ctc.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/nets_utils.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/rnn/attentions.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/rnn/decoders.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/rnn/encoders.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/transformer/attention.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/transformer/ctc.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/transformer/decoder.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/transformer/decoder_layer.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/transformer/embedding.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/transformer/encoder_layer.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/transformer/label_smoothing_loss.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/transformer/positionwise_feed_forward.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/transformer/subsampling.py	/^import chainer.functions as F$/;"	i
F	espnet/nets/chainer_backend/transformer/training.py	/^from chainer import functions as F$/;"	i
F	espnet/nets/pytorch_backend/ctc.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^from torch.nn import functional as F$/;"	i
F	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^from torch.nn import functional as F$/;"	i
F	espnet/nets/pytorch_backend/lm/default.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/lm/transformer.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/rnn/attentions.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/rnn/decoders.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/rnn/encoders.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^import torch.nn.functional as F$/;"	i
F	espnet/nets/pytorch_backend/wavenet.py	/^import torch.nn.functional as F$/;"	i
F	test/test_loss.py	/^import chainer.functions as F$/;"	i
FC	espnet/nets/pytorch_backend/frontends/beamformer.py	/^from torch_complex import functional as FC$/;"	i
FeatureTransform	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^class FeatureTransform(torch.nn.Module):$/;"	c
FeedForwardTransformer	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^class FeedForwardTransformer(TTSInterface, torch.nn.Module):$/;"	c
FeedForwardTransformer	test/test_e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.e2e_tts_fastspeech import FeedForwardTransformer$/;"	i
FooBar	test/test_transform.py	/^    class FooBar(FuncTrans):$/;"	c	function:test_func_trans
FreqMask	espnet/transform/spec_augment.py	/^class FreqMask(FuncTrans):$/;"	c
Frontend	espnet/nets/pytorch_backend/frontends/frontend.py	/^class Frontend(nn.Module):$/;"	c
FuncTrans	espnet/transform/functional.py	/^class FuncTrans(TransformInterface):$/;"	c
FuncTrans	espnet/transform/spec_augment.py	/^from espnet.transform.functional import FuncTrans$/;"	i
FuncTrans	test/test_transform.py	/^from espnet.transform.functional import FuncTrans$/;"	i
G2p	egs/ljspeech/tts1/local/clean_text.py	/^    from g2p_en import G2p$/;"	i
G2p	egs/ljspeech/tts2/local/clean_text.py	/^    from g2p_en import G2p$/;"	i
GCC_VERSION	tools/Makefile	/^GCC_VERSION := $(shell gcc -dumpversion)$/;"	m
Generate_mcTrainData_cut	egs/reverb/asr1/local/Generate_mcTrainData_cut.m	/^function Generate_mcTrainData_cut(WSJ_dir_name, save_dir)$/;"	f
Generate_mcTrainData_cut	egs/reverb/asr1_multich/local/Generate_mcTrainData_cut.m	/^function Generate_mcTrainData_cut(WSJ_dir_name, save_dir)$/;"	f
GlobalMVN	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^class GlobalMVN(torch.nn.Module):$/;"	c
GuidedAttentionLoss	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^class GuidedAttentionLoss(torch.nn.Module):$/;"	c
GuidedAttentionLoss	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.e2e_tts_tacotron2 import GuidedAttentionLoss$/;"	i
GuidedMultiHeadAttentionLoss	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^class GuidedMultiHeadAttentionLoss(GuidedAttentionLoss):$/;"	c
HDF5Reader	espnet/utils/cli_readers.py	/^class HDF5Reader:$/;"	c
HDF5Writer	espnet/utils/cli_writers.py	/^class HDF5Writer(BaseWriter):$/;"	c
HighwayNet	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^class HighwayNet(torch.nn.Module):$/;"	c
Hypothesis	espnet/nets/beam_search.py	/^class Hypothesis(NamedTuple):$/;"	c
IStft	espnet/asr/pytorch_backend/asr.py	/^from espnet.transform.spectrogram import IStft$/;"	i
IStft	espnet/transform/spectrogram.py	/^class IStft(object):$/;"	c
Identity	espnet/transform/transform_interface.py	/^class Identity(TransformInterface):$/;"	c
Image	espnet/transform/spec_augment.py	/^from PIL import Image$/;"	i
KALDI	tools/Makefile	/^KALDI :=$/;"	m
KaldiReader	espnet/utils/cli_readers.py	/^class KaldiReader:$/;"	c
KaldiWriter	espnet/utils/cli_writers.py	/^class KaldiWriter(BaseWriter):$/;"	c
L	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^    L = len(items)$/;"	v
L	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^    L = len(items)$/;"	v
L	espnet/lm/chainer_backend/lm.py	/^import chainer.links as L$/;"	i
L	espnet/nets/chainer_backend/ctc.py	/^import chainer.links as L$/;"	i
L	espnet/nets/chainer_backend/rnn/attentions.py	/^import chainer.links as L$/;"	i
L	espnet/nets/chainer_backend/rnn/decoders.py	/^import chainer.links as L$/;"	i
L	espnet/nets/chainer_backend/rnn/encoders.py	/^import chainer.links as L$/;"	i
L	espnet/nets/chainer_backend/transformer/attention.py	/^import chainer.links as L$/;"	i
L	espnet/nets/chainer_backend/transformer/ctc.py	/^import chainer.links as L$/;"	i
L	espnet/nets/chainer_backend/transformer/decoder.py	/^import chainer.links as L$/;"	i
L	espnet/nets/chainer_backend/transformer/encoder.py	/^from chainer import links as L$/;"	i
L	espnet/nets/chainer_backend/transformer/layer_norm.py	/^import chainer.links as L$/;"	i
L	espnet/nets/chainer_backend/transformer/positionwise_feed_forward.py	/^import chainer.links as L$/;"	i
L	espnet/nets/chainer_backend/transformer/subsampling.py	/^import chainer.links as L$/;"	i
LMEvaluator	espnet/lm/chainer_backend/lm.py	/^class LMEvaluator(BaseEvaluator):$/;"	c
LMEvaluator	espnet/lm/pytorch_backend/lm.py	/^class LMEvaluator(BaseEvaluator):$/;"	c
LMInterface	espnet/lm/chainer_backend/lm.py	/^from espnet.nets.lm_interface import LMInterface$/;"	i
LMInterface	espnet/lm/pytorch_backend/lm.py	/^from espnet.nets.lm_interface import LMInterface$/;"	i
LMInterface	espnet/nets/lm_interface.py	/^class LMInterface(ScorerInterface):$/;"	c
LMInterface	espnet/nets/pytorch_backend/lm/default.py	/^from espnet.nets.lm_interface import LMInterface$/;"	i
LMInterface	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^from espnet.nets.lm_interface import LMInterface$/;"	i
LMInterface	espnet/nets/pytorch_backend/lm/transformer.py	/^from espnet.nets.lm_interface import LMInterface$/;"	i
LabelSmoothingLoss	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from espnet.nets.chainer_backend.transformer.label_smoothing_loss import LabelSmoothingLoss$/;"	i
LabelSmoothingLoss	espnet/nets/chainer_backend/transformer/label_smoothing_loss.py	/^class LabelSmoothingLoss(chainer.Chain):$/;"	c
LabelSmoothingLoss	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.transformer.label_smoothing_loss import LabelSmoothingLoss$/;"	i
LabelSmoothingLoss	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.transformer.label_smoothing_loss import LabelSmoothingLoss$/;"	i
LabelSmoothingLoss	espnet/nets/pytorch_backend/transformer/label_smoothing_loss.py	/^class LabelSmoothingLoss(nn.Module):$/;"	c
LayerNorm	espnet/nets/chainer_backend/transformer/decoder.py	/^from espnet.nets.chainer_backend.transformer.layer_norm import LayerNorm$/;"	i
LayerNorm	espnet/nets/chainer_backend/transformer/decoder_layer.py	/^from espnet.nets.chainer_backend.transformer.layer_norm import LayerNorm$/;"	i
LayerNorm	espnet/nets/chainer_backend/transformer/encoder.py	/^from espnet.nets.chainer_backend.transformer.layer_norm import LayerNorm$/;"	i
LayerNorm	espnet/nets/chainer_backend/transformer/encoder_layer.py	/^from espnet.nets.chainer_backend.transformer.layer_norm import LayerNorm$/;"	i
LayerNorm	espnet/nets/chainer_backend/transformer/layer_norm.py	/^class LayerNorm(L.LayerNormalization):$/;"	c
LayerNorm	espnet/nets/pytorch_backend/fastspeech/duration_predictor.py	/^from espnet.nets.pytorch_backend.transformer.layer_norm import LayerNorm$/;"	i
LayerNorm	espnet/nets/pytorch_backend/transformer/decoder.py	/^from espnet.nets.pytorch_backend.transformer.layer_norm import LayerNorm$/;"	i
LayerNorm	espnet/nets/pytorch_backend/transformer/decoder_layer.py	/^from espnet.nets.pytorch_backend.transformer.layer_norm import LayerNorm$/;"	i
LayerNorm	espnet/nets/pytorch_backend/transformer/encoder.py	/^from espnet.nets.pytorch_backend.transformer.layer_norm import LayerNorm$/;"	i
LayerNorm	espnet/nets/pytorch_backend/transformer/encoder_layer.py	/^from espnet.nets.pytorch_backend.transformer.layer_norm import LayerNorm$/;"	i
LayerNorm	espnet/nets/pytorch_backend/transformer/initializer.py	/^from espnet.nets.pytorch_backend.transformer.layer_norm import LayerNorm$/;"	i
LayerNorm	espnet/nets/pytorch_backend/transformer/layer_norm.py	/^class LayerNorm(torch.nn.LayerNorm):$/;"	c
LegacyPositionalEncoding	test/test_positional_encoding.py	/^class LegacyPositionalEncoding(torch.nn.Module):$/;"	c
LegacyScaledPositionalEncoding	test/test_positional_encoding.py	/^class LegacyScaledPositionalEncoding(LegacyPositionalEncoding):$/;"	c
LengthBonus	espnet/asr/pytorch_backend/recog.py	/^from espnet.nets.scorers.length_bonus import LengthBonus$/;"	i
LengthBonus	espnet/nets/scorers/length_bonus.py	/^class LengthBonus(ScorerInterface):$/;"	c
LengthBonus	test/test_beam_search.py	/^from espnet.nets.scorers.length_bonus import LengthBonus$/;"	i
LengthBonus	test/test_lm.py	/^from espnet.nets.scorers.length_bonus import LengthBonus$/;"	i
LengthRegulator	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.fastspeech.length_regulator import LengthRegulator$/;"	i
LengthRegulator	espnet/nets/pytorch_backend/fastspeech/length_regulator.py	/^class LengthRegulator(torch.nn.Module):$/;"	c
LengthRegulator	test/test_e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.fastspeech.length_regulator import LengthRegulator$/;"	i
LinearSampling	espnet/nets/chainer_backend/transformer/encoder.py	/^from espnet.nets.chainer_backend.transformer.subsampling import LinearSampling$/;"	i
LinearSampling	espnet/nets/chainer_backend/transformer/subsampling.py	/^class LinearSampling(chainer.Chain):$/;"	c
List	espnet/nets/beam_search.py	/^from typing import List$/;"	i
List	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^from typing import List$/;"	i
List	espnet/nets/pytorch_backend/frontends/frontend.py	/^from typing import List$/;"	i
LoadInputsAndTargets	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.io_utils import LoadInputsAndTargets$/;"	i
LoadInputsAndTargets	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.io_utils import LoadInputsAndTargets$/;"	i
LoadInputsAndTargets	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.utils.io_utils import LoadInputsAndTargets$/;"	i
LoadInputsAndTargets	espnet/asr/pytorch_backend/recog.py	/^from espnet.utils.io_utils import LoadInputsAndTargets$/;"	i
LoadInputsAndTargets	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.io_utils import LoadInputsAndTargets$/;"	i
LoadInputsAndTargets	espnet/st/pytorch_backend/st.py	/^from espnet.utils.io_utils import LoadInputsAndTargets$/;"	i
LoadInputsAndTargets	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.io_utils import LoadInputsAndTargets$/;"	i
LoadInputsAndTargets	espnet/utils/io_utils.py	/^class LoadInputsAndTargets(object):$/;"	c
LoadInputsAndTargets	test/test_utils.py	/^from espnet.utils.io_utils import LoadInputsAndTargets$/;"	i
LogMel	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^class LogMel(torch.nn.Module):$/;"	c
LogMelSpectrogram	espnet/transform/spectrogram.py	/^class LogMelSpectrogram(object):$/;"	c
LookAheadWordLM	espnet/lm/chainer_backend/extlm.py	/^class LookAheadWordLM(chainer.Chain):$/;"	c
LookAheadWordLM	espnet/lm/pytorch_backend/extlm.py	/^class LookAheadWordLM(nn.Module):$/;"	c
LooseVersion	espnet/bin/asr_train.py	/^from distutils.version import LooseVersion$/;"	i
LooseVersion	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^from distutils.version import LooseVersion$/;"	i
LooseVersion	espnet/nets/pytorch_backend/rnn/decoders.py	/^from distutils.version import LooseVersion$/;"	i
LooseVersion	espnet/nets/pytorch_backend/transformer/mask.py	/^from distutils.version import LooseVersion$/;"	i
LooseVersion	setup.py	/^from distutils.version import LooseVersion$/;"	i
LooseVersion	test/test_loss.py	/^from distutils.version import LooseVersion$/;"	i
LooseVersion	utils/convert_fbank_to_wav.py	/^from distutils.version import LooseVersion$/;"	i
MAX_DECODER_OUTPUT	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^MAX_DECODER_OUTPUT = 5$/;"	v
MAX_DECODER_OUTPUT	espnet/nets/chainer_backend/rnn/decoders.py	/^MAX_DECODER_OUTPUT = 5$/;"	v
MAX_DECODER_OUTPUT	espnet/nets/pytorch_backend/rnn/decoders.py	/^MAX_DECODER_OUTPUT = 5$/;"	v
MIN_VALUE	espnet/nets/chainer_backend/transformer/attention.py	/^MIN_VALUE = float(np.finfo(np.float32).min)$/;"	v
MTInterface	espnet/asr/pytorch_backend/asr_init.py	/^from espnet.nets.mt_interface import MTInterface$/;"	i
MTInterface	espnet/mt/pytorch_backend/mt.py	/^from espnet.nets.mt_interface import MTInterface$/;"	i
MTInterface	espnet/nets/mt_interface.py	/^class MTInterface:$/;"	c
MTInterface	espnet/nets/pytorch_backend/e2e_mt.py	/^from espnet.nets.mt_interface import MTInterface$/;"	i
MakeSymlinkToBestModel	espnet/lm/chainer_backend/lm.py	/^from espnet.lm.lm_utils import MakeSymlinkToBestModel$/;"	i
MakeSymlinkToBestModel	espnet/lm/lm_utils.py	/^class MakeSymlinkToBestModel(extension.Extension):$/;"	c
MakeSymlinkToBestModel	espnet/lm/pytorch_backend/lm.py	/^from espnet.lm.lm_utils import MakeSymlinkToBestModel$/;"	i
MaskEstimator	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^from espnet.nets.pytorch_backend.frontends.mask_estimator import MaskEstimator$/;"	i
MaskEstimator	espnet/nets/pytorch_backend/frontends/dnn_wpe.py	/^from espnet.nets.pytorch_backend.frontends.mask_estimator import MaskEstimator$/;"	i
MaskEstimator	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^class MaskEstimator(torch.nn.Module):$/;"	c
Masked	test/test_e2e_asr_transformer.py	/^    class Masked(torch.nn.Module):$/;"	c	function:test_sequential
MaxNLocator	espnet/nets/chainer_backend/transformer/plot.py	/^    from matplotlib.ticker import MaxNLocator$/;"	i
MaxNLocator	espnet/nets/pytorch_backend/transformer/plot.py	/^    from matplotlib.ticker import MaxNLocator$/;"	i
ModuleInfo	doc/argparse2rst.py	/^class ModuleInfo:$/;"	c
MultiHeadAttention	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from espnet.nets.chainer_backend.transformer.attention import MultiHeadAttention$/;"	i
MultiHeadAttention	espnet/nets/chainer_backend/transformer/attention.py	/^class MultiHeadAttention(chainer.Chain):$/;"	c
MultiHeadAttention	espnet/nets/chainer_backend/transformer/decoder_layer.py	/^from espnet.nets.chainer_backend.transformer.attention import MultiHeadAttention$/;"	i
MultiHeadAttention	espnet/nets/chainer_backend/transformer/encoder_layer.py	/^from espnet.nets.chainer_backend.transformer.attention import MultiHeadAttention$/;"	i
MultiHeadedAttention	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.transformer.attention import MultiHeadedAttention$/;"	i
MultiHeadedAttention	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.transformer.attention import MultiHeadedAttention$/;"	i
MultiHeadedAttention	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.transformer.attention import MultiHeadedAttention$/;"	i
MultiHeadedAttention	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.transformer.attention import MultiHeadedAttention$/;"	i
MultiHeadedAttention	espnet/nets/pytorch_backend/transformer/attention.py	/^class MultiHeadedAttention(nn.Module):$/;"	c
MultiHeadedAttention	espnet/nets/pytorch_backend/transformer/decoder.py	/^from espnet.nets.pytorch_backend.transformer.attention import MultiHeadedAttention$/;"	i
MultiHeadedAttention	espnet/nets/pytorch_backend/transformer/encoder.py	/^from espnet.nets.pytorch_backend.transformer.attention import MultiHeadedAttention$/;"	i
MultiLayeredConv1d	espnet/nets/pytorch_backend/transformer/encoder.py	/^from espnet.nets.pytorch_backend.transformer.multi_layer_conv import MultiLayeredConv1d$/;"	i
MultiLayeredConv1d	espnet/nets/pytorch_backend/transformer/multi_layer_conv.py	/^class MultiLayeredConv1d(torch.nn.Module):$/;"	c
MultiLevelLM	espnet/lm/chainer_backend/extlm.py	/^class MultiLevelLM(chainer.Chain):$/;"	c
MultiLevelLM	espnet/lm/pytorch_backend/extlm.py	/^class MultiLevelLM(nn.Module):$/;"	c
MultiSequential	espnet/nets/pytorch_backend/transformer/repeat.py	/^class MultiSequential(torch.nn.Sequential):$/;"	c
MultiSequential	test/test_e2e_asr_transformer.py	/^    from espnet.nets.pytorch_backend.transformer.repeat import MultiSequential$/;"	i
MultiprocessIterator	espnet/utils/training/iterators.py	/^from chainer.iterators import MultiprocessIterator$/;"	i
NOQA	test/test_optimizer.py	/^import torch  # NOQA$/;"	i
NOQA	test/test_torch.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list  # NOQA$/;"	i
NOQA	test/test_torch.py	/^import torch  # NOQA$/;"	i
NOQA	tools/check_install.py	/^        from cupy.cuda import nccl  # NOQA$/;"	i
NamedTuple	espnet/nets/beam_search.py	/^from typing import NamedTuple$/;"	i
Namespace	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from argparse import Namespace$/;"	i
Namespace	espnet/nets/chainer_backend/rnn/decoders.py	/^from argparse import Namespace$/;"	i
Namespace	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from argparse import Namespace$/;"	i
Namespace	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from argparse import Namespace$/;"	i
Namespace	espnet/nets/pytorch_backend/rnn/decoders.py	/^from argparse import Namespace$/;"	i
Namespace	test/test_beam_search.py	/^from argparse import Namespace$/;"	i
Namespace	test/test_e2e_tts_fastspeech.py	/^from argparse import Namespace$/;"	i
Namespace	test/test_e2e_tts_tacotron2.py	/^from argparse import Namespace$/;"	i
Namespace	test/test_e2e_tts_transformer.py	/^from argparse import Namespace$/;"	i
Namespace	test/test_lm.py	/^from argparse import Namespace$/;"	i
NoAtt	espnet/nets/chainer_backend/rnn/attentions.py	/^class NoAtt(chainer.Chain):$/;"	c
NoAtt	espnet/nets/pytorch_backend/rnn/attentions.py	/^class NoAtt(torch.nn.Module):$/;"	c
NoamOpt	espnet/nets/pytorch_backend/transformer/optimizer.py	/^class NoamOpt(object):$/;"	c
NoiseInjection	espnet/transform/perturb.py	/^class NoiseInjection(object):$/;"	c
NpzDeserializer	espnet/asr/asr_utils.py	/^from chainer.serializers.npz import NpzDeserializer$/;"	i
OneHot	espnet/nets/pytorch_backend/wavenet.py	/^class OneHot(nn.Module):$/;"	c
Optional	espnet/nets/pytorch_backend/frontends/frontend.py	/^from typing import Optional$/;"	i
OrderedDict	egs/iwslt18/asr1/local/parse_xml.py	/^from collections import OrderedDict$/;"	i
OrderedDict	egs/iwslt18/mt1/local/parse_xml.py	/^from collections import OrderedDict$/;"	i
OrderedDict	egs/iwslt18/st1/local/parse_xml.py	/^from collections import OrderedDict$/;"	i
OrderedDict	espnet/asr/pytorch_backend/asr_init.py	/^from collections import OrderedDict$/;"	i
OrderedDict	espnet/transform/transformation.py	/^from collections import OrderedDict$/;"	i
OrderedDict	espnet/utils/io_utils.py	/^from collections import OrderedDict$/;"	i
OrderedDict	utils/eval-source-separation.py	/^from collections import OrderedDict$/;"	i
PIT	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^class PIT(object):$/;"	c
PYTHON	tools/Makefile	/^PYTHON :=$/;"	m
PYTHON_VERSION	tools/Makefile	/^PYTHON_VERSION := 3.7.3$/;"	m
ParallelSentenceIterator	espnet/lm/chainer_backend/lm.py	/^from espnet.lm.lm_utils import ParallelSentenceIterator$/;"	i
ParallelSentenceIterator	espnet/lm/lm_utils.py	/^class ParallelSentenceIterator(chainer.dataset.Iterator):$/;"	c
ParallelSentenceIterator	espnet/lm/pytorch_backend/lm.py	/^from espnet.lm.lm_utils import ParallelSentenceIterator$/;"	i
PartialScorerInterface	espnet/nets/beam_search.py	/^from espnet.nets.scorer_interface import PartialScorerInterface$/;"	i
PartialScorerInterface	espnet/nets/scorer_interface.py	/^class PartialScorerInterface(ScorerInterface):$/;"	c
PartialScorerInterface	espnet/nets/scorers/ctc.py	/^from espnet.nets.scorer_interface import PartialScorerInterface$/;"	i
Path	espnet/utils/cli_writers.py	/^from pathlib import Path$/;"	i
Path	utils/change_yaml.py	/^from pathlib import Path$/;"	i
Path	utils/eval-source-separation.py	/^from pathlib import Path$/;"	i
PerturbSamplingEnabler	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.training.iterators import ShufflingEnabler, PerturbSamplingEnabler$/;"	i
PerturbSamplingEnabler	espnet/utils/training/iterators.py	/^class PerturbSamplingEnabler(Extension):$/;"	c
PlotAttentionReport	espnet/asr/asr_mix_utils.py	/^class PlotAttentionReport(extension.Extension):$/;"	c
PlotAttentionReport	espnet/asr/asr_utils.py	/^class PlotAttentionReport(extension.Extension):$/;"	c
PlotAttentionReport	espnet/nets/asr_interface.py	/^        from espnet.asr.asr_utils import PlotAttentionReport$/;"	i
PlotAttentionReport	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from espnet.nets.chainer_backend.transformer.plot import PlotAttentionReport$/;"	i
PlotAttentionReport	espnet/nets/chainer_backend/transformer/plot.py	/^class PlotAttentionReport(asr_utils.PlotAttentionReport):$/;"	c
PlotAttentionReport	espnet/nets/mt_interface.py	/^        from espnet.asr.asr_utils import PlotAttentionReport$/;"	i
PlotAttentionReport	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.transformer.plot import PlotAttentionReport$/;"	i
PlotAttentionReport	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.transformer.plot import PlotAttentionReport$/;"	i
PlotAttentionReport	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.transformer.plot import PlotAttentionReport$/;"	i
PlotAttentionReport	espnet/nets/pytorch_backend/transformer/plot.py	/^class PlotAttentionReport(asr_utils.PlotAttentionReport):$/;"	c
PlotAttentionReport	espnet/nets/tts_interface.py	/^        from espnet.asr.asr_utils import PlotAttentionReport$/;"	i
PlotAttentionReport	test/test_e2e_asr_mulenc.py	/^    from espnet.asr.asr_utils import PlotAttentionReport$/;"	i
PositionalEncoding	espnet/nets/chainer_backend/transformer/decoder.py	/^from espnet.nets.chainer_backend.transformer.embedding import PositionalEncoding$/;"	i
PositionalEncoding	espnet/nets/chainer_backend/transformer/embedding.py	/^class PositionalEncoding(chainer.Chain):$/;"	c
PositionalEncoding	espnet/nets/chainer_backend/transformer/encoder.py	/^from espnet.nets.chainer_backend.transformer.embedding import PositionalEncoding$/;"	i
PositionalEncoding	espnet/nets/chainer_backend/transformer/subsampling.py	/^from espnet.nets.chainer_backend.transformer.embedding import PositionalEncoding$/;"	i
PositionalEncoding	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.transformer.embedding import PositionalEncoding$/;"	i
PositionalEncoding	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.transformer.embedding import PositionalEncoding$/;"	i
PositionalEncoding	espnet/nets/pytorch_backend/lm/transformer.py	/^from espnet.nets.pytorch_backend.transformer.embedding import PositionalEncoding$/;"	i
PositionalEncoding	espnet/nets/pytorch_backend/transformer/decoder.py	/^from espnet.nets.pytorch_backend.transformer.embedding import PositionalEncoding$/;"	i
PositionalEncoding	espnet/nets/pytorch_backend/transformer/embedding.py	/^class PositionalEncoding(torch.nn.Module):$/;"	c
PositionalEncoding	espnet/nets/pytorch_backend/transformer/encoder.py	/^from espnet.nets.pytorch_backend.transformer.embedding import PositionalEncoding$/;"	i
PositionalEncoding	espnet/nets/pytorch_backend/transformer/subsampling.py	/^from espnet.nets.pytorch_backend.transformer.embedding import PositionalEncoding$/;"	i
PositionalEncoding	test/test_positional_encoding.py	/^from espnet.nets.pytorch_backend.transformer.embedding import PositionalEncoding$/;"	i
PositionwiseFeedForward	espnet/nets/chainer_backend/transformer/decoder_layer.py	/^from espnet.nets.chainer_backend.transformer.positionwise_feed_forward import PositionwiseFeedForward$/;"	i
PositionwiseFeedForward	espnet/nets/chainer_backend/transformer/encoder_layer.py	/^from espnet.nets.chainer_backend.transformer.positionwise_feed_forward import PositionwiseFeedForward$/;"	i
PositionwiseFeedForward	espnet/nets/chainer_backend/transformer/positionwise_feed_forward.py	/^class PositionwiseFeedForward(chainer.Chain):$/;"	c
PositionwiseFeedForward	espnet/nets/pytorch_backend/transformer/decoder.py	/^from espnet.nets.pytorch_backend.transformer.positionwise_feed_forward import PositionwiseFeedForward$/;"	i
PositionwiseFeedForward	espnet/nets/pytorch_backend/transformer/encoder.py	/^from espnet.nets.pytorch_backend.transformer.positionwise_feed_forward import PositionwiseFeedForward$/;"	i
PositionwiseFeedForward	espnet/nets/pytorch_backend/transformer/positionwise_feed_forward.py	/^class PositionwiseFeedForward(torch.nn.Module):$/;"	c
Postnet	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.tacotron2.decoder import Postnet$/;"	i
Postnet	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.tacotron2.decoder import Postnet$/;"	i
Postnet	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^class Postnet(torch.nn.Module):$/;"	c
Prenet	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^class Prenet(torch.nn.Module):$/;"	c
RIRConvolve	espnet/transform/perturb.py	/^class RIRConvolve(object):$/;"	c
RNN	espnet/nets/chainer_backend/rnn/encoders.py	/^class RNN(chainer.Chain):$/;"	c
RNN	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^from espnet.nets.pytorch_backend.rnn.encoders import RNN$/;"	i
RNN	espnet/nets/pytorch_backend/rnn/encoders.py	/^class RNN(torch.nn.Module):$/;"	c
RNNLM	espnet/lm/chainer_backend/lm.py	/^class RNNLM(chainer.Chain):$/;"	c
RNNLM	espnet/nets/pytorch_backend/lm/default.py	/^class RNNLM(nn.Module):$/;"	c
RNNP	espnet/nets/chainer_backend/rnn/encoders.py	/^class RNNP(chainer.Chain):$/;"	c
RNNP	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.rnn.encoders import RNNP$/;"	i
RNNP	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^from espnet.nets.pytorch_backend.rnn.encoders import RNNP$/;"	i
RNNP	espnet/nets/pytorch_backend/rnn/encoders.py	/^class RNNP(torch.nn.Module):$/;"	c
RNNTLoss	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^            from warprnnt_pytorch import RNNTLoss$/;"	i
ReadHelper	utils/feats2npy.py	/^from kaldiio import ReadHelper$/;"	i
Reporter	espnet/lm/pytorch_backend/lm.py	/^class Reporter(Chain):$/;"	c
Reporter	espnet/nets/pytorch_backend/e2e_asr.py	/^class Reporter(chainer.Chain):$/;"	c
Reporter	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^class Reporter(chainer.Chain):$/;"	c
Reporter	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^class Reporter(chainer.Chain):$/;"	c
Reporter	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^class Reporter(chainer.Chain):$/;"	c
Reporter	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.e2e_asr import Reporter$/;"	i
Reporter	espnet/nets/pytorch_backend/e2e_mt.py	/^class Reporter(chainer.Chain):$/;"	c
Reporter	espnet/nets/pytorch_backend/e2e_st.py	/^class Reporter(chainer.Chain):$/;"	c
Reporter	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.e2e_st import Reporter$/;"	i
Reporter	espnet/nets/tts_interface.py	/^class Reporter(chainer.Chain):$/;"	c
SOURCEDIR	doc/Makefile	/^SOURCEDIR     = .$/;"	m
SOURCEDIR	doc/make.bat	/^set SOURCEDIR=.$/;"	v
SPHINXBUILD	doc/Makefile	/^SPHINXBUILD   = sphinx-build$/;"	m
SPHINXBUILD	doc/make.bat	/^	set SPHINXBUILD=sphinx-build$/;"	v
SPHINXOPTS	doc/Makefile	/^SPHINXOPTS    =$/;"	m
SPHINXPROJ	doc/Makefile	/^SPHINXPROJ    = ESPnet$/;"	m
SPHINXPROJ	doc/make.bat	/^set SPHINXPROJ=ESPnet$/;"	v
STInterface	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.st_interface import STInterface$/;"	i
STInterface	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.st_interface import STInterface$/;"	i
STInterface	espnet/nets/st_interface.py	/^class STInterface(ASRInterface):$/;"	c
STInterface	espnet/st/pytorch_backend/st.py	/^from espnet.nets.st_interface import STInterface$/;"	i
ScaledPositionalEncoding	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.transformer.embedding import ScaledPositionalEncoding$/;"	i
ScaledPositionalEncoding	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.transformer.embedding import ScaledPositionalEncoding$/;"	i
ScaledPositionalEncoding	espnet/nets/pytorch_backend/transformer/embedding.py	/^class ScaledPositionalEncoding(PositionalEncoding):$/;"	c
ScaledPositionalEncoding	test/test_positional_encoding.py	/^from espnet.nets.pytorch_backend.transformer.embedding import ScaledPositionalEncoding$/;"	i
ScorerInterface	espnet/nets/beam_search.py	/^from espnet.nets.scorer_interface import ScorerInterface$/;"	i
ScorerInterface	espnet/nets/lm_interface.py	/^from espnet.nets.scorer_interface import ScorerInterface$/;"	i
ScorerInterface	espnet/nets/pytorch_backend/rnn/decoders.py	/^from espnet.nets.scorer_interface import ScorerInterface$/;"	i
ScorerInterface	espnet/nets/pytorch_backend/transformer/decoder.py	/^from espnet.nets.scorer_interface import ScorerInterface$/;"	i
ScorerInterface	espnet/nets/scorer_interface.py	/^class ScorerInterface:$/;"	c
ScorerInterface	espnet/nets/scorers/length_bonus.py	/^from espnet.nets.scorer_interface import ScorerInterface$/;"	i
SegmentStreamingE2E	espnet/asr/pytorch_backend/asr.py	/^from espnet.nets.pytorch_backend.streaming.segment import SegmentStreamingE2E$/;"	i
SegmentStreamingE2E	espnet/nets/pytorch_backend/streaming/segment.py	/^class SegmentStreamingE2E(object):$/;"	c
Sequence	espnet/transform/transformation.py	/^    from collections import Sequence$/;"	i
Sequence	espnet/transform/transformation.py	/^    from collections.abc import Sequence$/;"	i
Sequence	espnet/utils/cli_utils.py	/^from collections.abc import Sequence$/;"	i
SequentialRNNLM	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^class SequentialRNNLM(LMInterface, torch.nn.Module):$/;"	c
SerialIterator	espnet/utils/training/iterators.py	/^from chainer.iterators import SerialIterator$/;"	i
ShuffleOrderSampler	espnet/utils/training/iterators.py	/^from chainer.iterators import ShuffleOrderSampler$/;"	i
ShufflingEnabler	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.training.iterators import ShufflingEnabler$/;"	i
ShufflingEnabler	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.training.iterators import ShufflingEnabler, PerturbSamplingEnabler$/;"	i
ShufflingEnabler	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.utils.training.iterators import ShufflingEnabler$/;"	i
ShufflingEnabler	espnet/lm/chainer_backend/lm.py	/^from espnet.utils.training.iterators import ShufflingEnabler$/;"	i
ShufflingEnabler	espnet/lm/pytorch_backend/lm.py	/^from espnet.utils.training.iterators import ShufflingEnabler$/;"	i
ShufflingEnabler	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.training.iterators import ShufflingEnabler$/;"	i
ShufflingEnabler	espnet/st/pytorch_backend/st.py	/^from espnet.utils.training.iterators import ShufflingEnabler$/;"	i
ShufflingEnabler	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.training.iterators import ShufflingEnabler$/;"	i
ShufflingEnabler	espnet/utils/training/iterators.py	/^class ShufflingEnabler(Extension):$/;"	c
SoundHDF5File	espnet/transform/perturb.py	/^from espnet.utils.io_utils import SoundHDF5File$/;"	i
SoundHDF5File	espnet/utils/cli_readers.py	/^from espnet.utils.io_utils import SoundHDF5File$/;"	i
SoundHDF5File	espnet/utils/cli_writers.py	/^from espnet.utils.io_utils import SoundHDF5File$/;"	i
SoundHDF5File	espnet/utils/io_utils.py	/^class SoundHDF5File(object):$/;"	c
SoundHDF5File	test/test_utils.py	/^from espnet.utils.io_utils import SoundHDF5File$/;"	i
SoundHDF5Reader	espnet/utils/cli_readers.py	/^class SoundHDF5Reader:$/;"	c
SoundHDF5Writer	espnet/utils/cli_writers.py	/^class SoundHDF5Writer(BaseWriter):$/;"	c
SoundReader	espnet/utils/cli_readers.py	/^class SoundReader:$/;"	c
SoundWriter	espnet/utils/cli_writers.py	/^class SoundWriter(BaseWriter):$/;"	c
SpecAugment	espnet/transform/spec_augment.py	/^class SpecAugment(FuncTrans):$/;"	c
Spectrogram	espnet/transform/spectrogram.py	/^class Spectrogram(object):$/;"	c
SpeedPerturbation	espnet/transform/perturb.py	/^class SpeedPerturbation(object):$/;"	c
StandardScaler	utils/generate_wav_from_fbank.py	/^from sklearn.preprocessing import StandardScaler$/;"	i
StandardUpdater	espnet/asr/pytorch_backend/asr.py	/^from chainer.training.updater import StandardUpdater$/;"	i
Stft	espnet/transform/spectrogram.py	/^class Stft(object):$/;"	c
Stft2LogMelSpectrogram	espnet/transform/spectrogram.py	/^class Stft2LogMelSpectrogram(object):$/;"	c
SummaryWriter	espnet/asr/chainer_backend/asr.py	/^from tensorboardX import SummaryWriter$/;"	i
SummaryWriter	espnet/asr/pytorch_backend/asr.py	/^from tensorboardX import SummaryWriter$/;"	i
SummaryWriter	espnet/asr/pytorch_backend/asr_mix.py	/^from tensorboardX import SummaryWriter$/;"	i
SummaryWriter	espnet/lm/chainer_backend/lm.py	/^from tensorboardX import SummaryWriter$/;"	i
SummaryWriter	espnet/lm/pytorch_backend/lm.py	/^from tensorboardX import SummaryWriter$/;"	i
SummaryWriter	espnet/mt/pytorch_backend/mt.py	/^from tensorboardX import SummaryWriter$/;"	i
SummaryWriter	espnet/st/pytorch_backend/st.py	/^from tensorboardX import SummaryWriter$/;"	i
SummaryWriter	espnet/tts/pytorch_backend/tts.py	/^from tensorboardX import SummaryWriter$/;"	i
TH_VERSION	tools/Makefile	/^TH_VERSION := 1.0.1$/;"	m
TTSInterface	espnet/bin/tts_train.py	/^from espnet.nets.tts_interface import TTSInterface$/;"	i
TTSInterface	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.tts_interface import TTSInterface$/;"	i
TTSInterface	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from espnet.nets.tts_interface import TTSInterface$/;"	i
TTSInterface	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.tts_interface import TTSInterface$/;"	i
TTSInterface	espnet/nets/tts_interface.py	/^class TTSInterface(object):$/;"	c
TTSInterface	espnet/tts/pytorch_backend/tts.py	/^from espnet.nets.tts_interface import TTSInterface$/;"	i
TTSPlot	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.e2e_tts_transformer import TTSPlot$/;"	i
TTSPlot	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^class TTSPlot(PlotAttentionReport):$/;"	c
Tacotron2	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^class Tacotron2(TTSInterface, torch.nn.Module):$/;"	c
Tacotron2	test/test_e2e_tts_tacotron2.py	/^from espnet.nets.pytorch_backend.e2e_tts_tacotron2 import Tacotron2$/;"	i
Tacotron2Loss	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^class Tacotron2Loss(torch.nn.Module):$/;"	c
TemporaryDirectory	utils/eval-source-separation.py	/^from tempfile import TemporaryDirectory$/;"	i
TensorboardLogger	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.training.tensorboard_logger import TensorboardLogger$/;"	i
TensorboardLogger	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.training.tensorboard_logger import TensorboardLogger$/;"	i
TensorboardLogger	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.utils.training.tensorboard_logger import TensorboardLogger$/;"	i
TensorboardLogger	espnet/lm/chainer_backend/lm.py	/^from espnet.utils.training.tensorboard_logger import TensorboardLogger$/;"	i
TensorboardLogger	espnet/lm/pytorch_backend/lm.py	/^from espnet.utils.training.tensorboard_logger import TensorboardLogger$/;"	i
TensorboardLogger	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.training.tensorboard_logger import TensorboardLogger$/;"	i
TensorboardLogger	espnet/st/pytorch_backend/st.py	/^from espnet.utils.training.tensorboard_logger import TensorboardLogger$/;"	i
TensorboardLogger	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.training.tensorboard_logger import TensorboardLogger$/;"	i
TensorboardLogger	espnet/utils/training/evaluator.py	/^from espnet.utils.training.tensorboard_logger import TensorboardLogger$/;"	i
TensorboardLogger	espnet/utils/training/tensorboard_logger.py	/^class TensorboardLogger(Extension):$/;"	c
TensorboardLogger	test/test_tensorboard.py	/^from espnet.utils.training.tensorboard_logger import TensorboardLogger$/;"	i
Text	egs/vais1000/tts1/local/text/regex_tokenize.py	/^from underthesea.feature_engineering.text import Text$/;"	i
ThModel	test/test_optimizer.py	/^class ThModel(torch.nn.Module):$/;"	c
TimeInvariantMLSAFilter	utils/generate_wav_from_fbank.py	/^class TimeInvariantMLSAFilter(object):$/;"	c
TimeMask	espnet/transform/spec_augment.py	/^class TimeMask(FuncTrans):$/;"	c
TimeWarp	espnet/transform/spec_augment.py	/^class TimeWarp(FuncTrans):$/;"	c
ToggleableShufflingMultiprocessIterator	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.training.iterators import ToggleableShufflingMultiprocessIterator$/;"	i
ToggleableShufflingMultiprocessIterator	espnet/utils/training/iterators.py	/^class ToggleableShufflingMultiprocessIterator(MultiprocessIterator):$/;"	c
ToggleableShufflingSerialIterator	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.training.iterators import ToggleableShufflingSerialIterator$/;"	i
ToggleableShufflingSerialIterator	espnet/utils/training/iterators.py	/^class ToggleableShufflingSerialIterator(SerialIterator):$/;"	c
TransformDataset	espnet/asr/chainer_backend/asr.py	/^from chainer.datasets import TransformDataset$/;"	i
TransformDataset	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.dataset import TransformDataset$/;"	i
TransformDataset	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.utils.dataset import TransformDataset$/;"	i
TransformDataset	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.dataset import TransformDataset$/;"	i
TransformDataset	espnet/st/pytorch_backend/st.py	/^from espnet.utils.dataset import TransformDataset$/;"	i
TransformDataset	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.dataset import TransformDataset$/;"	i
TransformDataset	espnet/utils/dataset.py	/^class TransformDataset(torch.utils.data.Dataset):$/;"	c
TransformDataset	espnet/utils/training/iterators.py	/^from espnet.utils.dataset import TransformDataset$/;"	i
TransformInterface	espnet/transform/functional.py	/^from espnet.transform.transform_interface import TransformInterface$/;"	i
TransformInterface	espnet/transform/transform_interface.py	/^class TransformInterface:$/;"	c
Transformation	espnet/asr/pytorch_backend/asr.py	/^from espnet.transform.transformation import Transformation$/;"	i
Transformation	espnet/transform/transformation.py	/^class Transformation(object):$/;"	c
Transformation	espnet/utils/io_utils.py	/^from espnet.transform.transformation import Transformation$/;"	i
Transformation	test/test_transform.py	/^from espnet.transform.transformation import Transformation$/;"	i
Transformation	utils/compute-cmvn-stats.py	/^from espnet.transform.transformation import Transformation$/;"	i
Transformation	utils/copy-feats.py	/^from espnet.transform.transformation import Transformation$/;"	i
Transformation	utils/dump-pcm.py	/^from espnet.transform.transformation import Transformation$/;"	i
Transformation	utils/feat-to-shape.py	/^from espnet.transform.transformation import Transformation$/;"	i
Transformer	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.e2e_tts_transformer import Transformer$/;"	i
Transformer	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^class Transformer(TTSInterface, torch.nn.Module):$/;"	c
Transformer	espnet/nets/pytorch_backend/fastspeech/duration_calculator.py	/^from espnet.nets.pytorch_backend.e2e_tts_transformer import Transformer$/;"	i
Transformer	test/test_e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.e2e_tts_transformer import Transformer$/;"	i
Transformer	test/test_e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.e2e_tts_transformer import Transformer$/;"	i
TransformerLM	espnet/nets/pytorch_backend/lm/transformer.py	/^class TransformerLM(nn.Module, LMInterface):$/;"	c
TransformerLoss	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^class TransformerLoss(torch.nn.Module):$/;"	c
Tuple	espnet/nets/beam_search.py	/^from typing import Tuple$/;"	i
Tuple	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^from typing import Tuple$/;"	i
Tuple	espnet/nets/pytorch_backend/frontends/dnn_wpe.py	/^from typing import Tuple$/;"	i
Tuple	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^from typing import Tuple$/;"	i
Tuple	espnet/nets/pytorch_backend/frontends/frontend.py	/^from typing import Tuple$/;"	i
Tuple	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^from typing import Tuple$/;"	i
Tuple	espnet/nets/pytorch_backend/lm/transformer.py	/^from typing import Tuple$/;"	i
Tuple	espnet/nets/scorer_interface.py	/^from typing import Tuple$/;"	i
UniStd	egs/vais1000/tts1/local/text/vietnameseNormUniStd.py	/^def UniStd(str):$/;"	f
UniStd	egs/vais1000/tts1/local/text/vietnamese_cleaners.py	/^from vietnameseNormUniStd import UniStd$/;"	i
UniStd_H	egs/vais1000/tts1/local/text/vietnameseNormUniStd.py	/^def UniStd_H(str):$/;"	f
UniStd_L	egs/vais1000/tts1/local/text/vietnameseNormUniStd.py	/^def UniStd_L(str):$/;"	f
Union	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^from typing import Union$/;"	i
Union	espnet/nets/pytorch_backend/frontends/frontend.py	/^from typing import Union$/;"	i
UpSampling	espnet/nets/pytorch_backend/wavenet.py	/^class UpSampling(nn.Module):$/;"	c
UtteranceCMVN	espnet/transform/cmvn.py	/^class UtteranceCMVN(object):$/;"	c
UtteranceMVN	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^class UtteranceMVN(torch.nn.Module):$/;"	c
VGG2L	espnet/nets/chainer_backend/rnn/encoders.py	/^class VGG2L(chainer.Chain):$/;"	c
VGG2L	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.rnn.encoders import VGG2L$/;"	i
VGG2L	espnet/nets/pytorch_backend/rnn/encoders.py	/^class VGG2L(torch.nn.Module):$/;"	c
Variable	espnet/nets/chainer_backend/rnn/training.py	/^from chainer import Variable$/;"	i
VaswaniRule	espnet/asr/chainer_backend/asr.py	/^        from espnet.nets.chainer_backend.transformer.training import VaswaniRule$/;"	i
VaswaniRule	espnet/nets/chainer_backend/transformer/training.py	/^class VaswaniRule(extension.Extension):$/;"	c
VolumePerturbation	espnet/transform/perturb.py	/^class VolumePerturbation(object):$/;"	c
WGET	tools/Makefile	/^WGET := wget --tries=3$/;"	m
WPE	espnet/transform/wpe.py	/^class WPE(object):$/;"	c
WarpCTC	espnet/nets/chainer_backend/ctc.py	/^class WarpCTC(chainer.Chain):$/;"	c
WarpCTC	espnet/nets/chainer_backend/transformer/ctc.py	/^class WarpCTC(chainer.Chain):$/;"	c
WaveNet	espnet/nets/pytorch_backend/wavenet.py	/^class WaveNet(nn.Module):$/;"	c
WaveNet	utils/generate_wav_from_fbank.py	/^from espnet.nets.pytorch_backend.wavenet import WaveNet$/;"	i
WindowStreamingE2E	espnet/asr/pytorch_backend/asr.py	/^from espnet.nets.pytorch_backend.streaming.window import WindowStreamingE2E$/;"	i
WindowStreamingE2E	espnet/nets/pytorch_backend/streaming/window.py	/^class WindowStreamingE2E(object):$/;"	c
Y	egs/reverb/asr1/local/run_wpe.py	/^Y = stft(y, **stft_options).transpose(2, 0, 1)$/;"	v
Y	egs/reverb/asr1_multich/local/run_wpe.py	/^Y = stft(y, **stft_options).transpose(2, 0, 1)$/;"	v
Z	egs/reverb/asr1/local/run_wpe.py	/^Z = wpe(Y, iterations=iterations, statistics_mode='full').transpose(1, 2, 0)$/;"	v
Z	egs/reverb/asr1_multich/local/run_wpe.py	/^Z = wpe(Y, iterations=iterations, statistics_mode='full').transpose(1, 2, 0)$/;"	v
ZoneOutCell	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^class ZoneOutCell(torch.nn.Module):$/;"	c
__author__	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^__author__ = 'Minhua Wu'$/;"	v
__author__	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^__author__ = 'Minhua Wu'$/;"	v
__author__	egs/swbd/asr1/local/format_acronyms_dict.py	/^__author__ = 'Minhua Wu'$/;"	v
__author__	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^__author__ = 'Minhua Wu'$/;"	v
__call__	espnet/asr/asr_mix_utils.py	/^    def __call__(self, trainer):$/;"	m	class:PlotAttentionReport	file:
__call__	espnet/asr/asr_utils.py	/^    def __call__(self, trainer):$/;"	m	class:CompareValueTrigger	file:
__call__	espnet/asr/asr_utils.py	/^    def __call__(self, trainer):$/;"	m	class:PlotAttentionReport	file:
__call__	espnet/asr/pytorch_backend/asr.py	/^    def __call__(self, batch, device):$/;"	m	class:CustomConverterMulEnc	file:
__call__	espnet/asr/pytorch_backend/asr.py	/^    def __call__(self, batch, device=torch.device('cpu')):$/;"	m	class:CustomConverter	file:
__call__	espnet/asr/pytorch_backend/asr_mix.py	/^    def __call__(self, batch, device=torch.device('cpu')):$/;"	m	class:CustomConverter	file:
__call__	espnet/lm/chainer_backend/extlm.py	/^    def __call__(self, state, x):$/;"	m	class:LookAheadWordLM	file:
__call__	espnet/lm/chainer_backend/extlm.py	/^    def __call__(self, state, x):$/;"	m	class:MultiLevelLM	file:
__call__	espnet/lm/chainer_backend/lm.py	/^    def __call__(self, state, *args, **kwargs):$/;"	m	class:ClassifierWithState	file:
__call__	espnet/lm/chainer_backend/lm.py	/^    def __call__(self, state, x):$/;"	m	class:RNNLM	file:
__call__	espnet/lm/lm_utils.py	/^    def __call__(self, trainer):$/;"	m	class:MakeSymlinkToBestModel	file:
__call__	espnet/mt/pytorch_backend/mt.py	/^    def __call__(self, batch, device=torch.device('cpu')):$/;"	m	class:CustomConverter	file:
__call__	espnet/nets/chainer_backend/ctc.py	/^    def __call__(self, hs, ys):$/;"	m	class:CTC	file:
__call__	espnet/nets/chainer_backend/ctc.py	/^    def __call__(self, hs, ys):$/;"	m	class:WarpCTC	file:
__call__	espnet/nets/chainer_backend/deterministic_embed_id.py	/^    def __call__(self, x):$/;"	m	class:EmbedID	file:
__call__	espnet/nets/chainer_backend/rnn/attentions.py	/^    def __call__(self, enc_hs, dec_z, att_prev):$/;"	m	class:NoAtt	file:
__call__	espnet/nets/chainer_backend/rnn/attentions.py	/^    def __call__(self, enc_hs, dec_z, att_prev, scaling=2.0):$/;"	m	class:AttDot	file:
__call__	espnet/nets/chainer_backend/rnn/attentions.py	/^    def __call__(self, enc_hs, dec_z, att_prev, scaling=2.0):$/;"	m	class:AttLoc	file:
__call__	espnet/nets/chainer_backend/rnn/decoders.py	/^    def __call__(self, hs, ys):$/;"	m	class:Decoder	file:
__call__	espnet/nets/chainer_backend/rnn/encoders.py	/^    def __call__(self, xs, ilens):$/;"	m	class:Encoder	file:
__call__	espnet/nets/chainer_backend/rnn/encoders.py	/^    def __call__(self, xs, ilens):$/;"	m	class:RNN	file:
__call__	espnet/nets/chainer_backend/rnn/encoders.py	/^    def __call__(self, xs, ilens):$/;"	m	class:RNNP	file:
__call__	espnet/nets/chainer_backend/rnn/encoders.py	/^    def __call__(self, xs, ilens):$/;"	m	class:VGG2L	file:
__call__	espnet/nets/chainer_backend/rnn/training.py	/^    def __call__(self, batch, device):$/;"	m	class:CustomConverter	file:
__call__	espnet/nets/chainer_backend/transformer/ctc.py	/^    def __call__(self, hs, ys):$/;"	m	class:CTC	file:
__call__	espnet/nets/chainer_backend/transformer/layer_norm.py	/^    def __call__(self, e):$/;"	m	class:LayerNorm	file:
__call__	espnet/nets/chainer_backend/transformer/plot.py	/^    def __call__(self, trainer):$/;"	m	class:PlotAttentionReport	file:
__call__	espnet/nets/chainer_backend/transformer/positionwise_feed_forward.py	/^    def __call__(self, e):$/;"	m	class:PositionwiseFeedForward	file:
__call__	espnet/nets/chainer_backend/transformer/training.py	/^    def __call__(self, batch, device):$/;"	m	class:CustomConverter	file:
__call__	espnet/nets/chainer_backend/transformer/training.py	/^    def __call__(self, trainer):$/;"	m	class:VaswaniRule	file:
__call__	espnet/nets/ctc_prefix_score.py	/^    def __call__(self, y, cs, r_prev):$/;"	m	class:CTCPrefixScore	file:
__call__	espnet/nets/ctc_prefix_score.py	/^    def __call__(self, y, state, pre_scores=None, att_w=None):$/;"	m	class:CTCPrefixScoreTH	file:
__call__	espnet/nets/e2e_asr_common.py	/^    def __call__(self, ys_hat, ys_pad, is_ctc=False):$/;"	m	class:ErrorCalculator	file:
__call__	espnet/nets/pytorch_backend/transformer/plot.py	/^    def __call__(self, trainer):$/;"	m	class:PlotAttentionReport	file:
__call__	espnet/st/pytorch_backend/st.py	/^    def __call__(self, batch, device=torch.device('cpu')):$/;"	m	class:CustomConverter	file:
__call__	espnet/transform/add_deltas.py	/^    def __call__(self, x):$/;"	m	class:AddDeltas	file:
__call__	espnet/transform/channel_selector.py	/^    def __call__(self, x, train=True):$/;"	m	class:ChannelSelector	file:
__call__	espnet/transform/cmvn.py	/^    def __call__(self, x, uttid=None):$/;"	m	class:CMVN	file:
__call__	espnet/transform/cmvn.py	/^    def __call__(self, x, uttid=None):$/;"	m	class:UtteranceCMVN	file:
__call__	espnet/transform/functional.py	/^    def __call__(self, x):$/;"	m	class:FuncTrans	file:
__call__	espnet/transform/perturb.py	/^    def __call__(self, x, uttid=None, train=True):$/;"	m	class:NoiseInjection	file:
__call__	espnet/transform/perturb.py	/^    def __call__(self, x, uttid=None, train=True):$/;"	m	class:RIRConvolve	file:
__call__	espnet/transform/perturb.py	/^    def __call__(self, x, uttid=None, train=True):$/;"	m	class:SpeedPerturbation	file:
__call__	espnet/transform/perturb.py	/^    def __call__(self, x, uttid=None, train=True):$/;"	m	class:VolumePerturbation	file:
__call__	espnet/transform/perturb.py	/^    def __call__(self, x_stft, uttid=None, train=True):$/;"	m	class:BandpassPerturbation	file:
__call__	espnet/transform/spec_augment.py	/^    def __call__(self, x, train):$/;"	m	class:FreqMask	file:
__call__	espnet/transform/spec_augment.py	/^    def __call__(self, x, train):$/;"	m	class:SpecAugment	file:
__call__	espnet/transform/spec_augment.py	/^    def __call__(self, x, train):$/;"	m	class:TimeMask	file:
__call__	espnet/transform/spec_augment.py	/^    def __call__(self, x, train):$/;"	m	class:TimeWarp	file:
__call__	espnet/transform/spectrogram.py	/^    def __call__(self, x):$/;"	m	class:IStft	file:
__call__	espnet/transform/spectrogram.py	/^    def __call__(self, x):$/;"	m	class:LogMelSpectrogram	file:
__call__	espnet/transform/spectrogram.py	/^    def __call__(self, x):$/;"	m	class:Spectrogram	file:
__call__	espnet/transform/spectrogram.py	/^    def __call__(self, x):$/;"	m	class:Stft	file:
__call__	espnet/transform/spectrogram.py	/^    def __call__(self, x):$/;"	m	class:Stft2LogMelSpectrogram	file:
__call__	espnet/transform/transform_interface.py	/^    def __call__(self, x):$/;"	m	class:Identity	file:
__call__	espnet/transform/transform_interface.py	/^    def __call__(self, x):$/;"	m	class:TransformInterface	file:
__call__	espnet/transform/transformation.py	/^    def __call__(self, xs, uttid_list=None, **kwargs):$/;"	m	class:Transformation	file:
__call__	espnet/transform/wpe.py	/^    def __call__(self, xs):$/;"	m	class:WPE	file:
__call__	espnet/tts/pytorch_backend/tts.py	/^    def __call__(self, batch, device=torch.device('cpu')):$/;"	m	class:CustomConverter	file:
__call__	espnet/utils/io_utils.py	/^    def __call__(self, batch):$/;"	m	class:LoadInputsAndTargets	file:
__call__	espnet/utils/training/evaluator.py	/^    def __call__(self, trainer=None):$/;"	m	class:BaseEvaluator	file:
__call__	espnet/utils/training/iterators.py	/^    def __call__(self, trainer):$/;"	m	class:PerturbSamplingEnabler	file:
__call__	espnet/utils/training/iterators.py	/^    def __call__(self, trainer):$/;"	m	class:ShufflingEnabler	file:
__call__	espnet/utils/training/tensorboard_logger.py	/^    def __call__(self, trainer):$/;"	m	class:TensorboardLogger	file:
__call__	test/test_optimizer.py	/^    def __call__(self, x):$/;"	m	class:ChModel	file:
__call__	utils/generate_wav_from_fbank.py	/^    def __call__(self, y):$/;"	m	class:TimeInvariantMLSAFilter	file:
__contains__	espnet/utils/io_utils.py	/^    def __contains__(self, item):$/;"	m	class:SoundHDF5File	file:
__doc__	espnet/transform/spec_augment.py	/^    __doc__ = freq_mask.__doc__$/;"	v	class:FreqMask
__doc__	espnet/transform/spec_augment.py	/^    __doc__ = spec_augment.__doc__$/;"	v	class:SpecAugment
__doc__	espnet/transform/spec_augment.py	/^    __doc__ = time_mask.__doc__$/;"	v	class:TimeMask
__doc__	espnet/transform/spec_augment.py	/^    __doc__ = time_warp.__doc__$/;"	v	class:TimeWarp
__doc__	test/test_transform.py	/^        __doc__ = foo_bar.__doc__$/;"	v	class:test_func_trans.FooBar
__enter__	espnet/utils/cli_writers.py	/^    def __enter__(self):$/;"	m	class:BaseWriter	file:
__enter__	espnet/utils/io_utils.py	/^    def __enter__(self):$/;"	m	class:SoundHDF5File	file:
__exit__	espnet/utils/cli_writers.py	/^    def __exit__(self, exc_type, exc_val, exc_tb):$/;"	m	class:BaseWriter	file:
__exit__	espnet/utils/io_utils.py	/^    def __exit__(self, exc_type, exc_val, exc_tb):$/;"	m	class:SoundHDF5File	file:
__getitem__	espnet/utils/dataset.py	/^    def __getitem__(self, idx):$/;"	m	class:TransformDataset	file:
__getitem__	espnet/utils/io_utils.py	/^    def __getitem__(self, key):$/;"	m	class:SoundHDF5File	file:
__init__	doc/argparse2rst.py	/^    def __init__(self, path):$/;"	m	class:ModuleInfo
__init__	egs/arctic/tts1/local/text/cmudict.py	/^  def __init__(self, file_or_path, keep_ambiguous=True):$/;"	m	class:CMUDict
__init__	egs/ljspeech/tts1/local/text/cmudict.py	/^  def __init__(self, file_or_path, keep_ambiguous=True):$/;"	m	class:CMUDict
__init__	egs/ljspeech/tts2/local/text/cmudict.py	/^  def __init__(self, file_or_path, keep_ambiguous=True):$/;"	m	class:CMUDict
__init__	egs/tweb/tts1/local/text/cmudict.py	/^  def __init__(self, file_or_path, keep_ambiguous=True):$/;"	m	class:CMUDict
__init__	espnet/asr/asr_mix_utils.py	/^    def __init__(self, att_vis_fn, data, outdir, converter, device, reverse=False):$/;"	m	class:PlotAttentionReport
__init__	espnet/asr/asr_utils.py	/^    def __init__(self, att_vis_fn, data, outdir, converter, transform, device, reverse=False,$/;"	m	class:PlotAttentionReport
__init__	espnet/asr/asr_utils.py	/^    def __init__(self, key, compare_fn, trigger=(1, 'epoch')):$/;"	m	class:CompareValueTrigger
__init__	espnet/asr/pytorch_backend/asr.py	/^    def __init__(self, model, grad_clip_threshold, train_iter,$/;"	m	class:CustomUpdater
__init__	espnet/asr/pytorch_backend/asr.py	/^    def __init__(self, model, iterator, target, device, ngpu=None):$/;"	m	class:CustomEvaluator
__init__	espnet/asr/pytorch_backend/asr.py	/^    def __init__(self, subsamping_factors=[1, 1], dtype=torch.float32):$/;"	m	class:CustomConverterMulEnc
__init__	espnet/asr/pytorch_backend/asr.py	/^    def __init__(self, subsampling_factor=1, dtype=torch.float32):$/;"	m	class:CustomConverter
__init__	espnet/asr/pytorch_backend/asr_mix.py	/^    def __init__(self, subsampling_factor=1, dtype=torch.float32):$/;"	m	class:CustomConverter
__init__	espnet/lm/chainer_backend/extlm.py	/^    def __init__(self, wordlm, subwordlm, word_dict, subword_dict,$/;"	m	class:MultiLevelLM
__init__	espnet/lm/chainer_backend/extlm.py	/^    def __init__(self, wordlm, word_dict, subword_dict, oov_penalty=0.0001, open_vocab=True):$/;"	m	class:LookAheadWordLM
__init__	espnet/lm/chainer_backend/lm.py	/^    def __init__(self, n_vocab, n_layers, n_units, typ="lstm"):$/;"	m	class:RNNLM
__init__	espnet/lm/chainer_backend/lm.py	/^    def __init__(self, predictor,$/;"	m	class:ClassifierWithState
__init__	espnet/lm/chainer_backend/lm.py	/^    def __init__(self, train_iter, optimizer, device):$/;"	m	class:BPTTUpdater
__init__	espnet/lm/chainer_backend/lm.py	/^    def __init__(self, val_iter, eval_model, device):$/;"	m	class:LMEvaluator
__init__	espnet/lm/lm_utils.py	/^    def __init__(self, dataset, batch_size, max_length=0, sos=0, eos=0, repeat=True, shuffle=True):$/;"	m	class:ParallelSentenceIterator
__init__	espnet/lm/lm_utils.py	/^    def __init__(self, key, prefix='model', suffix='best'):$/;"	m	class:MakeSymlinkToBestModel
__init__	espnet/lm/pytorch_backend/extlm.py	/^    def __init__(self, wordlm, subwordlm, word_dict, subword_dict,$/;"	m	class:MultiLevelLM
__init__	espnet/lm/pytorch_backend/extlm.py	/^    def __init__(self, wordlm, word_dict, subword_dict, oov_penalty=0.0001, open_vocab=True):$/;"	m	class:LookAheadWordLM
__init__	espnet/lm/pytorch_backend/lm.py	/^    def __init__(self, train_iter, model, optimizer, device, gradclip=None, use_apex=False):$/;"	m	class:BPTTUpdater
__init__	espnet/lm/pytorch_backend/lm.py	/^    def __init__(self, val_iter, eval_model, reporter, device):$/;"	m	class:LMEvaluator
__init__	espnet/mt/pytorch_backend/mt.py	/^    def __init__(self):$/;"	m	class:CustomConverter
__init__	espnet/nets/beam_search.py	/^    def __init__(self, scorers: Dict[str, ScorerInterface], weights: Dict[str, float],$/;"	m	class:BeamSearch
__init__	espnet/nets/chainer_backend/ctc.py	/^    def __init__(self, odim, eprojs, dropout_rate):$/;"	m	class:CTC
__init__	espnet/nets/chainer_backend/ctc.py	/^    def __init__(self, odim, eprojs, dropout_rate):$/;"	m	class:WarpCTC
__init__	espnet/nets/chainer_backend/deterministic_embed_id.py	/^    def __init__(self, ignore_label=None):$/;"	m	class:EmbedIDFunction
__init__	espnet/nets/chainer_backend/deterministic_embed_id.py	/^    def __init__(self, in_size, out_size, initialW=None, ignore_label=None):$/;"	m	class:EmbedID
__init__	espnet/nets/chainer_backend/deterministic_embed_id.py	/^    def __init__(self, w_shape, ignore_label=None):$/;"	m	class:EmbedIDGrad
__init__	espnet/nets/chainer_backend/e2e_asr.py	/^    def __init__(self, idim, odim, args, flag_return=True):$/;"	m	class:E2E
__init__	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def __init__(self, idim, odim, args, ignore_id=-1, flag_return=True):$/;"	m	class:E2E
__init__	espnet/nets/chainer_backend/rnn/attentions.py	/^    def __init__(self):$/;"	m	class:NoAtt
__init__	espnet/nets/chainer_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, att_dim):$/;"	m	class:AttDot
__init__	espnet/nets/chainer_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, att_dim, aconv_chans, aconv_filts):$/;"	m	class:AttLoc
__init__	espnet/nets/chainer_backend/rnn/decoders.py	/^    def __init__(self, eprojs, odim, dtype, dlayers, dunits, sos, eos, att, verbose=0,$/;"	m	class:Decoder
__init__	espnet/nets/chainer_backend/rnn/encoders.py	/^    def __init__(self, etype, idim, elayers, eunits, eprojs, subsample, dropout, in_channel=1):$/;"	m	class:Encoder
__init__	espnet/nets/chainer_backend/rnn/encoders.py	/^    def __init__(self, idim, elayers, cdim, hdim, dropout, typ="lstm"):$/;"	m	class:RNN
__init__	espnet/nets/chainer_backend/rnn/encoders.py	/^    def __init__(self, idim, elayers, cdim, hdim, subsample, dropout, typ="blstm"):$/;"	m	class:RNNP
__init__	espnet/nets/chainer_backend/rnn/encoders.py	/^    def __init__(self, in_channel=1):$/;"	m	class:VGG2L
__init__	espnet/nets/chainer_backend/rnn/training.py	/^    def __init__(self, subsampling_factor=1):$/;"	m	class:CustomConverter
__init__	espnet/nets/chainer_backend/rnn/training.py	/^    def __init__(self, train_iter, optimizer, converter, device, accum_grad=1):$/;"	m	class:CustomUpdater
__init__	espnet/nets/chainer_backend/rnn/training.py	/^    def __init__(self, train_iters, optimizer, converter, devices, accum_grad=1):$/;"	m	class:CustomParallelUpdater
__init__	espnet/nets/chainer_backend/transformer/attention.py	/^    def __init__(self, n_units, h=8, dropout=0.1,$/;"	m	class:MultiHeadAttention
__init__	espnet/nets/chainer_backend/transformer/ctc.py	/^    def __init__(self, odim, eprojs, dropout_rate):$/;"	m	class:CTC
__init__	espnet/nets/chainer_backend/transformer/ctc.py	/^    def __init__(self, odim, eprojs, dropout_rate):$/;"	m	class:WarpCTC
__init__	espnet/nets/chainer_backend/transformer/decoder.py	/^    def __init__(self, odim, args, initialW=None, initial_bias=None):$/;"	m	class:Decoder
__init__	espnet/nets/chainer_backend/transformer/decoder_layer.py	/^    def __init__(self, n_units, d_units=0, h=8, dropout=0.1,$/;"	m	class:DecoderLayer
__init__	espnet/nets/chainer_backend/transformer/embedding.py	/^    def __init__(self, n_units, dropout=0.1, length=5000):$/;"	m	class:PositionalEncoding
__init__	espnet/nets/chainer_backend/transformer/encoder.py	/^    def __init__(self, idim,$/;"	m	class:Encoder
__init__	espnet/nets/chainer_backend/transformer/encoder_layer.py	/^    def __init__(self, n_units, d_units=0, h=8, dropout=0.1,$/;"	m	class:EncoderLayer
__init__	espnet/nets/chainer_backend/transformer/label_smoothing_loss.py	/^    def __init__(self, smoothing, n_target_vocab, normalize_length=False, ignore_id=-1):$/;"	m	class:LabelSmoothingLoss
__init__	espnet/nets/chainer_backend/transformer/layer_norm.py	/^    def __init__(self, dims, eps=1e-12):$/;"	m	class:LayerNorm
__init__	espnet/nets/chainer_backend/transformer/positionwise_feed_forward.py	/^    def __init__(self, n_units, d_units=0, dropout=0.1, initialW=None, initial_bias=None):$/;"	m	class:PositionwiseFeedForward
__init__	espnet/nets/chainer_backend/transformer/subsampling.py	/^    def __init__(self, channels, idim, dims, dropout=0.1,$/;"	m	class:Conv2dSubsampling
__init__	espnet/nets/chainer_backend/transformer/subsampling.py	/^    def __init__(self, idim, dims, dropout=0.1,$/;"	m	class:LinearSampling
__init__	espnet/nets/chainer_backend/transformer/training.py	/^    def __init__(self):$/;"	m	class:CustomConverter
__init__	espnet/nets/chainer_backend/transformer/training.py	/^    def __init__(self, attr, d, warmup_steps=4000,$/;"	m	class:VaswaniRule
__init__	espnet/nets/chainer_backend/transformer/training.py	/^    def __init__(self, train_iter, optimizer, converter, device, accum_grad=1):$/;"	m	class:CustomUpdater
__init__	espnet/nets/chainer_backend/transformer/training.py	/^    def __init__(self, train_iters, optimizer, converter, devices, accum_grad=1):$/;"	m	class:CustomParallelUpdater
__init__	espnet/nets/ctc_prefix_score.py	/^    def __init__(self, x, blank, eos, xp):$/;"	m	class:CTCPrefixScore
__init__	espnet/nets/ctc_prefix_score.py	/^    def __init__(self, x, xlens, blank, eos, beam, scoring_ratio=1.5, margin=0):$/;"	m	class:CTCPrefixScoreTH
__init__	espnet/nets/e2e_asr_common.py	/^    def __init__(self, char_list, sym_space, sym_blank,$/;"	m	class:ErrorCalculator
__init__	espnet/nets/pytorch_backend/ctc.py	/^    def __init__(self, odim, eprojs, dropout_rate, ctc_type='warpctc', reduce=True):$/;"	m	class:CTC
__init__	espnet/nets/pytorch_backend/e2e_asr.py	/^    def __init__(self, idim, odim, args):$/;"	m	class:E2E
__init__	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def __init__(self, etype, idim, elayers_sd, elayers_rec, eunits, eprojs,$/;"	m	class:EncoderMix
__init__	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def __init__(self, idim, odim, args):$/;"	m	class:E2E
__init__	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def __init__(self, num_spkrs):$/;"	m	class:PIT
__init__	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def __init__(self, idims, odim, args):$/;"	m	class:E2E
__init__	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^    def __init__(self, idim, odim, args):$/;"	m	class:E2E
__init__	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def __init__(self, idim, odim, args, ignore_id=-1):$/;"	m	class:E2E
__init__	espnet/nets/pytorch_backend/e2e_mt.py	/^    def __init__(self, idim, odim, args):$/;"	m	class:E2E
__init__	espnet/nets/pytorch_backend/e2e_st.py	/^    def __init__(self, idim, odim, args):$/;"	m	class:E2E
__init__	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^    def __init__(self, idim, odim, args, ignore_id=-1):$/;"	m	class:E2E
__init__	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def __init__(self, idim, odim, args=None):$/;"	m	class:FeedForwardTransformer
__init__	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def __init__(self, idim, odim, args=None):$/;"	m	class:Tacotron2
__init__	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def __init__(self, sigma=0.4, alpha=1.0, reset_always=True):$/;"	m	class:GuidedAttentionLoss
__init__	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def __init__(self, use_masking=True, bce_pos_weight=20.0):$/;"	m	class:Tacotron2Loss
__init__	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def __init__(self, idim, odim, args=None):$/;"	m	class:Transformer
__init__	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def __init__(self, use_masking=True, bce_pos_weight=5.0):$/;"	m	class:TransformerLoss
__init__	espnet/nets/pytorch_backend/fastspeech/duration_calculator.py	/^    def __init__(self, teacher_model):$/;"	m	class:DurationCalculator
__init__	espnet/nets/pytorch_backend/fastspeech/duration_predictor.py	/^    def __init__(self, idim, n_layers=2, n_chans=384, kernel_size=3, dropout_rate=0.1, offset=1.0):$/;"	m	class:DurationPredictor
__init__	espnet/nets/pytorch_backend/fastspeech/duration_predictor.py	/^    def __init__(self, offset=1.0):$/;"	m	class:DurationPredictorLoss
__init__	espnet/nets/pytorch_backend/fastspeech/length_regulator.py	/^    def __init__(self, pad_value=0.0):$/;"	m	class:LengthRegulator
__init__	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^    def __init__(self, bidim, att_dim):$/;"	m	class:AttentionReference
__init__	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^    def __init__(self,$/;"	m	class:DNN_Beamformer
__init__	espnet/nets/pytorch_backend/frontends/dnn_wpe.py	/^    def __init__(self,$/;"	m	class:DNN_WPE
__init__	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^    def __init__(self, fs: int = 16000, n_fft: int = 512, n_mels: int = 80,$/;"	m	class:LogMel
__init__	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^    def __init__(self,$/;"	m	class:FeatureTransform
__init__	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^    def __init__(self,$/;"	m	class:GlobalMVN
__init__	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^    def __init__(self,$/;"	m	class:UtteranceMVN
__init__	espnet/nets/pytorch_backend/frontends/frontend.py	/^    def __init__(self,$/;"	m	class:Frontend
__init__	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^    def __init__(self, type, idim, layers, units, projs, dropout, nmask=1):$/;"	m	class:MaskEstimator
__init__	espnet/nets/pytorch_backend/lm/default.py	/^    def __init__(self, n_vocab, args):$/;"	m	class:DefaultRNNLM
__init__	espnet/nets/pytorch_backend/lm/default.py	/^    def __init__(self, n_vocab, n_layers, n_units, typ="lstm", dropout_rate=0.5):$/;"	m	class:RNNLM
__init__	espnet/nets/pytorch_backend/lm/default.py	/^    def __init__(self, predictor,$/;"	m	class:ClassifierWithState
__init__	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^    def __init__(self, n_vocab, args):$/;"	m	class:SequentialRNNLM
__init__	espnet/nets/pytorch_backend/lm/transformer.py	/^    def __init__(self, n_vocab, args):$/;"	m	class:TransformerLM
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self):$/;"	m	class:NoAtt
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, aheads, att_dim_k, att_dim_v, aconv_chans, aconv_filts, han_mode=False):$/;"	m	class:AttMultiHeadLoc
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, aheads, att_dim_k, att_dim_v, aconv_chans, aconv_filts, han_mode=False):$/;"	m	class:AttMultiHeadMultiResLoc
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, aheads, att_dim_k, att_dim_v, han_mode=False):$/;"	m	class:AttMultiHeadAdd
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, aheads, att_dim_k, att_dim_v, han_mode=False):$/;"	m	class:AttMultiHeadDot
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, att_dim, aconv_chans, aconv_filts):$/;"	m	class:AttForward
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, att_dim, aconv_chans, aconv_filts, han_mode=False):$/;"	m	class:AttCovLoc
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, att_dim, aconv_chans, aconv_filts, han_mode=False):$/;"	m	class:AttLoc
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, att_dim, aconv_chans, aconv_filts, han_mode=False):$/;"	m	class:AttLocRec
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, att_dim, att_win, aconv_chans, aconv_filts, han_mode=False):$/;"	m	class:AttLoc2D
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, att_dim, han_mode=False):$/;"	m	class:AttAdd
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, att_dim, han_mode=False):$/;"	m	class:AttCov
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eprojs, dunits, att_dim, han_mode=False):$/;"	m	class:AttDot
__init__	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def __init__(self, eunits, dunits, att_dim, aconv_chans, aconv_filts, odim):$/;"	m	class:AttForwardTA
__init__	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def __init__(self, eprojs, odim, dtype, dlayers, dunits, sos, eos, att, verbose=0,$/;"	m	class:Decoder
__init__	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def __init__(self, eprojs, odim, dtype, dlayers, dunits, blank, att,$/;"	m	class:DecoderRNNTAtt
__init__	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def __init__(self, eprojs, odim, dtype, dlayers, dunits, blank,$/;"	m	class:DecoderRNNT
__init__	espnet/nets/pytorch_backend/rnn/encoders.py	/^    def __init__(self, etype, idim, elayers, eunits, eprojs, subsample, dropout, in_channel=1):$/;"	m	class:Encoder
__init__	espnet/nets/pytorch_backend/rnn/encoders.py	/^    def __init__(self, idim, elayers, cdim, hdim, dropout, typ="blstm"):$/;"	m	class:RNN
__init__	espnet/nets/pytorch_backend/rnn/encoders.py	/^    def __init__(self, idim, elayers, cdim, hdim, subsample, dropout, typ="blstm"):$/;"	m	class:RNNP
__init__	espnet/nets/pytorch_backend/rnn/encoders.py	/^    def __init__(self, in_channel=1):$/;"	m	class:VGG2L
__init__	espnet/nets/pytorch_backend/streaming/segment.py	/^    def __init__(self, e2e, recog_args, rnnlm=None):$/;"	m	class:SegmentStreamingE2E
__init__	espnet/nets/pytorch_backend/streaming/window.py	/^    def __init__(self, e2e, recog_args, rnnlm=None):$/;"	m	class:WindowStreamingE2E
__init__	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^    def __init__(self, idim):$/;"	m	class:HighwayNet
__init__	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^    def __init__(self, use_masking=True):$/;"	m	class:CBHGLoss
__init__	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^    def __init__(self,$/;"	m	class:CBHG
__init__	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def __init__(self, cell, zoneout_rate=0.1):$/;"	m	class:ZoneOutCell
__init__	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def __init__(self, idim, n_layers=2, n_units=256, dropout_rate=0.5):$/;"	m	class:Prenet
__init__	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def __init__(self, idim, odim, att,$/;"	m	class:Decoder
__init__	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def __init__(self, idim, odim, n_layers=5, n_chans=512, n_filts=5, dropout_rate=0.5, use_batch_norm=True):$/;"	m	class:Postnet
__init__	espnet/nets/pytorch_backend/tacotron2/encoder.py	/^    def __init__(self, idim,$/;"	m	class:Encoder
__init__	espnet/nets/pytorch_backend/transformer/attention.py	/^    def __init__(self, n_head, n_feat, dropout_rate):$/;"	m	class:MultiHeadedAttention
__init__	espnet/nets/pytorch_backend/transformer/decoder.py	/^    def __init__(self, odim,$/;"	m	class:Decoder
__init__	espnet/nets/pytorch_backend/transformer/decoder_layer.py	/^    def __init__(self, size, self_attn, src_attn, feed_forward, dropout_rate,$/;"	m	class:DecoderLayer
__init__	espnet/nets/pytorch_backend/transformer/embedding.py	/^    def __init__(self, d_model, dropout_rate, max_len=5000):$/;"	m	class:PositionalEncoding
__init__	espnet/nets/pytorch_backend/transformer/embedding.py	/^    def __init__(self, d_model, dropout_rate, max_len=5000):$/;"	m	class:ScaledPositionalEncoding
__init__	espnet/nets/pytorch_backend/transformer/encoder.py	/^    def __init__(self, idim,$/;"	m	class:Encoder
__init__	espnet/nets/pytorch_backend/transformer/encoder_layer.py	/^    def __init__(self, size, self_attn, feed_forward, dropout_rate,$/;"	m	class:EncoderLayer
__init__	espnet/nets/pytorch_backend/transformer/label_smoothing_loss.py	/^    def __init__(self, size, padding_idx, smoothing, normalize_length=False, criterion=nn.KLDivLoss(reduce=False)):$/;"	m	class:LabelSmoothingLoss
__init__	espnet/nets/pytorch_backend/transformer/layer_norm.py	/^    def __init__(self, nout, dim=-1):$/;"	m	class:LayerNorm
__init__	espnet/nets/pytorch_backend/transformer/multi_layer_conv.py	/^    def __init__(self, in_chans, hidden_chans, kernel_size, dropout_rate):$/;"	m	class:Conv1dLinear
__init__	espnet/nets/pytorch_backend/transformer/multi_layer_conv.py	/^    def __init__(self, in_chans, hidden_chans, kernel_size, dropout_rate):$/;"	m	class:MultiLayeredConv1d
__init__	espnet/nets/pytorch_backend/transformer/optimizer.py	/^    def __init__(self, model_size, factor, warmup, optimizer):$/;"	m	class:NoamOpt
__init__	espnet/nets/pytorch_backend/transformer/positionwise_feed_forward.py	/^    def __init__(self, idim, hidden_units, dropout_rate):$/;"	m	class:PositionwiseFeedForward
__init__	espnet/nets/pytorch_backend/transformer/subsampling.py	/^    def __init__(self, idim, odim, dropout_rate):$/;"	m	class:Conv2dSubsampling
__init__	espnet/nets/pytorch_backend/wavenet.py	/^    def __init__(self, depth):$/;"	m	class:OneHot
__init__	espnet/nets/pytorch_backend/wavenet.py	/^    def __init__(self, in_channels, out_channels, kernel_size, dilation=1, bias=True):$/;"	m	class:CausalConv1d
__init__	espnet/nets/pytorch_backend/wavenet.py	/^    def __init__(self, n_quantize=256, n_aux=28, n_resch=512, n_skipch=256,$/;"	m	class:WaveNet
__init__	espnet/nets/pytorch_backend/wavenet.py	/^    def __init__(self, upsampling_factor, bias=True):$/;"	m	class:UpSampling
__init__	espnet/nets/scorers/ctc.py	/^    def __init__(self, ctc: torch.nn.Module, eos: int):$/;"	m	class:CTCPrefixScorer
__init__	espnet/nets/scorers/length_bonus.py	/^    def __init__(self, n_vocab: int):$/;"	m	class:LengthBonus
__init__	espnet/nets/tts_interface.py	/^    def __init__(self):$/;"	m	class:TTSInterface
__init__	espnet/st/pytorch_backend/st.py	/^    def __init__(self, subsampling_factor=1, dtype=torch.float32, asr_task=False):$/;"	m	class:CustomConverter
__init__	espnet/transform/add_deltas.py	/^    def __init__(self, window=2, order=2):$/;"	m	class:AddDeltas
__init__	espnet/transform/channel_selector.py	/^    def __init__(self, train_channel='random', eval_channel=0, axis=1):$/;"	m	class:ChannelSelector
__init__	espnet/transform/cmvn.py	/^    def __init__(self, norm_means=True, norm_vars=False, std_floor=1.0e-20):$/;"	m	class:UtteranceCMVN
__init__	espnet/transform/cmvn.py	/^    def __init__(self, stats, norm_means=True, norm_vars=False,$/;"	m	class:CMVN
__init__	espnet/transform/functional.py	/^    def __init__(self, **kwargs):$/;"	m	class:FuncTrans
__init__	espnet/transform/perturb.py	/^    def __init__(self, lower=-1.6, upper=1.6, utt2ratio=None, dbunit=True,$/;"	m	class:VolumePerturbation
__init__	espnet/transform/perturb.py	/^    def __init__(self, lower=0.0, upper=0.75, seed=None,$/;"	m	class:BandpassPerturbation
__init__	espnet/transform/perturb.py	/^    def __init__(self, lower=0.9, upper=1.1, utt2ratio=None,$/;"	m	class:SpeedPerturbation
__init__	espnet/transform/perturb.py	/^    def __init__(self, utt2noise=None, lower=-20, upper=-5, utt2ratio=None,$/;"	m	class:NoiseInjection
__init__	espnet/transform/perturb.py	/^    def __init__(self, utt2rir, filetype='list'):$/;"	m	class:RIRConvolve
__init__	espnet/transform/spectrogram.py	/^    def __init__(self, fs, n_mels, n_fft, fmin=None, fmax=None, eps=1e-10):$/;"	m	class:Stft2LogMelSpectrogram
__init__	espnet/transform/spectrogram.py	/^    def __init__(self, fs, n_mels, n_fft, n_shift, win_length=None,$/;"	m	class:LogMelSpectrogram
__init__	espnet/transform/spectrogram.py	/^    def __init__(self, n_fft, n_shift, win_length=None, window='hann'):$/;"	m	class:Spectrogram
__init__	espnet/transform/spectrogram.py	/^    def __init__(self, n_fft, n_shift, win_length=None,$/;"	m	class:Stft
__init__	espnet/transform/spectrogram.py	/^    def __init__(self, n_shift, win_length=None, window='hann', center=True):$/;"	m	class:IStft
__init__	espnet/transform/transformation.py	/^    def __init__(self, conffile=None):$/;"	m	class:Transformation
__init__	espnet/transform/wpe.py	/^    def __init__(self, taps=10, delay=3, iterations=3, psd_context=0,$/;"	m	class:WPE
__init__	espnet/tts/pytorch_backend/tts.py	/^    def __init__(self):$/;"	m	class:CustomConverter
__init__	espnet/tts/pytorch_backend/tts.py	/^    def __init__(self, model, grad_clip, iterator, optimizer, device, accum_grad=1):$/;"	m	class:CustomUpdater
__init__	espnet/tts/pytorch_backend/tts.py	/^    def __init__(self, model, iterator, target, device):$/;"	m	class:CustomEvaluator
__init__	espnet/utils/cli_readers.py	/^    def __init__(self, rspecifier, return_shape=False):$/;"	m	class:HDF5Reader
__init__	espnet/utils/cli_readers.py	/^    def __init__(self, rspecifier, return_shape=False):$/;"	m	class:SoundHDF5Reader
__init__	espnet/utils/cli_readers.py	/^    def __init__(self, rspecifier, return_shape=False):$/;"	m	class:SoundReader
__init__	espnet/utils/cli_readers.py	/^    def __init__(self, rspecifier, return_shape=False, segments=None):$/;"	m	class:KaldiReader
__init__	espnet/utils/cli_writers.py	/^    def __init__(self, wspecifier, write_num_frames=None, compress=False):$/;"	m	class:HDF5Writer
__init__	espnet/utils/cli_writers.py	/^    def __init__(self, wspecifier, write_num_frames=None, compress=False,$/;"	m	class:KaldiWriter
__init__	espnet/utils/cli_writers.py	/^    def __init__(self, wspecifier, write_num_frames=None, pcm_format='wav'):$/;"	m	class:SoundHDF5Writer
__init__	espnet/utils/cli_writers.py	/^    def __init__(self, wspecifier, write_num_frames=None, pcm_format='wav'):$/;"	m	class:SoundWriter
__init__	espnet/utils/dataset.py	/^    def __init__(self, **kwargs):$/;"	m	class:ChainerDataLoader
__init__	espnet/utils/dataset.py	/^    def __init__(self, data, transform):$/;"	m	class:TransformDataset
__init__	espnet/utils/io_utils.py	/^    def __init__(self, filepath, mode='r+', format=None, dtype='int16',$/;"	m	class:SoundHDF5File
__init__	espnet/utils/io_utils.py	/^    def __init__(self, mode='asr',$/;"	m	class:LoadInputsAndTargets
__init__	espnet/utils/training/iterators.py	/^    def __init__(self, dataset, batch_size, repeat=True, shuffle=True):$/;"	m	class:ToggleableShufflingSerialIterator
__init__	espnet/utils/training/iterators.py	/^    def __init__(self, dataset, batch_size, repeat=True, shuffle=True, n_processes=None, n_prefetch=1, shared_mem=None,$/;"	m	class:ToggleableShufflingMultiprocessIterator
__init__	espnet/utils/training/iterators.py	/^    def __init__(self, iterators):$/;"	m	class:ShufflingEnabler
__init__	espnet/utils/training/iterators.py	/^    def __init__(self, train_iter, train_json, load_tr, converter, args):$/;"	m	class:PerturbSamplingEnabler
__init__	espnet/utils/training/tensorboard_logger.py	/^    def __init__(self, logger, att_reporter=None, entries=None, epoch=0):$/;"	m	class:TensorboardLogger
__init__	test/test_optimizer.py	/^    def __init__(self):$/;"	m	class:ChModel
__init__	test/test_optimizer.py	/^    def __init__(self):$/;"	m	class:ThModel
__init__	test/test_positional_encoding.py	/^    def __init__(self, d_model, dropout_rate, max_len=5000):$/;"	m	class:LegacyPositionalEncoding
__init__	test/test_positional_encoding.py	/^    def __init__(self, d_model, dropout_rate, max_len=5000):$/;"	m	class:LegacyScaledPositionalEncoding
__init__	test/test_tensorboard.py	/^    def __init__(self):$/;"	m	class:DummyWriter
__init__	utils/generate_wav_from_fbank.py	/^    def __init__(self, coef, alpha, n_shift):$/;"	m	class:TimeInvariantMLSAFilter
__iter__	espnet/utils/cli_readers.py	/^    def __iter__(self):$/;"	m	class:HDF5Reader	file:
__iter__	espnet/utils/cli_readers.py	/^    def __iter__(self):$/;"	m	class:KaldiReader	file:
__iter__	espnet/utils/cli_readers.py	/^    def __iter__(self):$/;"	m	class:SoundHDF5Reader	file:
__iter__	espnet/utils/cli_readers.py	/^    def __iter__(self):$/;"	m	class:SoundReader	file:
__iter__	espnet/utils/dataset.py	/^    def __iter__(self):$/;"	m	class:ChainerDataLoader	file:
__iter__	espnet/utils/io_utils.py	/^    def __iter__(self):$/;"	m	class:SoundHDF5File	file:
__len__	egs/arctic/tts1/local/text/cmudict.py	/^  def __len__(self):$/;"	m	class:CMUDict	file:
__len__	egs/ljspeech/tts1/local/text/cmudict.py	/^  def __len__(self):$/;"	m	class:CMUDict	file:
__len__	egs/ljspeech/tts2/local/text/cmudict.py	/^  def __len__(self):$/;"	m	class:CMUDict	file:
__len__	egs/tweb/tts1/local/text/cmudict.py	/^  def __len__(self):$/;"	m	class:CMUDict	file:
__len__	espnet/utils/dataset.py	/^    def __len__(self):$/;"	m	class:TransformDataset	file:
__len__	espnet/utils/io_utils.py	/^    def __len__(self, item):$/;"	m	class:SoundHDF5File	file:
__next__	espnet/lm/lm_utils.py	/^    def __next__(self):$/;"	m	class:ParallelSentenceIterator	file:
__repr__	espnet/transform/add_deltas.py	/^    def __repr__(self):$/;"	m	class:AddDeltas	file:
__repr__	espnet/transform/channel_selector.py	/^    def __repr__(self):$/;"	m	class:ChannelSelector	file:
__repr__	espnet/transform/cmvn.py	/^    def __repr__(self):$/;"	m	class:CMVN	file:
__repr__	espnet/transform/cmvn.py	/^    def __repr__(self):$/;"	m	class:UtteranceCMVN	file:
__repr__	espnet/transform/functional.py	/^    def __repr__(self):$/;"	m	class:FuncTrans	file:
__repr__	espnet/transform/perturb.py	/^    def __repr__(self):$/;"	m	class:BandpassPerturbation	file:
__repr__	espnet/transform/perturb.py	/^    def __repr__(self):$/;"	m	class:NoiseInjection	file:
__repr__	espnet/transform/perturb.py	/^    def __repr__(self):$/;"	m	class:RIRConvolve	file:
__repr__	espnet/transform/perturb.py	/^    def __repr__(self):$/;"	m	class:SpeedPerturbation	file:
__repr__	espnet/transform/perturb.py	/^    def __repr__(self):$/;"	m	class:VolumePerturbation	file:
__repr__	espnet/transform/spectrogram.py	/^    def __repr__(self):$/;"	m	class:IStft	file:
__repr__	espnet/transform/spectrogram.py	/^    def __repr__(self):$/;"	m	class:LogMelSpectrogram	file:
__repr__	espnet/transform/spectrogram.py	/^    def __repr__(self):$/;"	m	class:Spectrogram	file:
__repr__	espnet/transform/spectrogram.py	/^    def __repr__(self):$/;"	m	class:Stft	file:
__repr__	espnet/transform/spectrogram.py	/^    def __repr__(self):$/;"	m	class:Stft2LogMelSpectrogram	file:
__repr__	espnet/transform/transform_interface.py	/^    def __repr__(self):$/;"	m	class:TransformInterface	file:
__repr__	espnet/transform/transformation.py	/^    def __repr__(self):$/;"	m	class:Transformation	file:
__repr__	espnet/transform/wpe.py	/^    def __repr__(self):$/;"	m	class:WPE	file:
__repr__	espnet/utils/io_utils.py	/^    def __repr__(self):$/;"	m	class:SoundHDF5File	file:
__setitem__	espnet/utils/cli_writers.py	/^    def __setitem__(self, key, value):$/;"	m	class:BaseWriter	file:
__setitem__	espnet/utils/cli_writers.py	/^    def __setitem__(self, key, value):$/;"	m	class:HDF5Writer	file:
__setitem__	espnet/utils/cli_writers.py	/^    def __setitem__(self, key, value):$/;"	m	class:KaldiWriter	file:
__setitem__	espnet/utils/cli_writers.py	/^    def __setitem__(self, key, value):$/;"	m	class:SoundHDF5Writer	file:
__setitem__	espnet/utils/cli_writers.py	/^    def __setitem__(self, key, value):$/;"	m	class:SoundWriter	file:
__setitem__	espnet/utils/io_utils.py	/^    def __setitem__(self, name, data):$/;"	m	class:SoundHDF5File	file:
__version__	espnet/__init__.py	/^    __version__ = '(Not installed from setup.py)'$/;"	v
__version__	espnet/__init__.py	/^    __version__ = pkg_resources.get_distribution('espnet').version$/;"	v
_abbreviations	egs/arctic/tts1/local/text/cleaners.py	/^_abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [$/;"	v
_abbreviations	egs/ljspeech/tts1/local/text/cleaners.py	/^_abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [$/;"	v
_abbreviations	egs/ljspeech/tts2/local/text/cleaners.py	/^_abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [$/;"	v
_abbreviations	egs/tweb/tts1/local/text/cleaners.py	/^_abbreviations = [(re.compile('\\\\b%s\\\\.' % x[0], re.IGNORECASE), x[1]) for x in [$/;"	v
_adadelta_eps_decay	espnet/asr/asr_utils.py	/^def _adadelta_eps_decay(trainer, eps_decay):$/;"	f
_adam_lr_decay	espnet/asr/asr_utils.py	/^def _adam_lr_decay(trainer, eps_decay):$/;"	f
_add_first_frame_and_remove_last_frame	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def _add_first_frame_and_remove_last_frame(self, ys):$/;"	m	class:Transformer
_alt_re	egs/arctic/tts1/local/text/cmudict.py	/^_alt_re = re.compile(r'\\([0-9]+\\)')$/;"	v
_alt_re	egs/ljspeech/tts1/local/text/cmudict.py	/^_alt_re = re.compile(r'\\([0-9]+\\)')$/;"	v
_alt_re	egs/ljspeech/tts2/local/text/cmudict.py	/^_alt_re = re.compile(r'\\([0-9]+\\)')$/;"	v
_alt_re	egs/tweb/tts1/local/text/cmudict.py	/^_alt_re = re.compile(r'\\([0-9]+\\)')$/;"	v
_append_ids	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def _append_ids(yseq, ids):$/;"	m	class:Decoder
_arpabet	egs/arctic/tts1/local/text/symbols.py	/^_arpabet = ['@' + s for s in cmudict.valid_symbols]$/;"	v
_arpabet	egs/ljspeech/tts1/local/text/symbols.py	/^_arpabet = ['@' + s for s in cmudict.valid_symbols]$/;"	v
_arpabet	egs/ljspeech/tts2/local/text/symbols.py	/^_arpabet = ['@' + s for s in cmudict.valid_symbols]$/;"	v
_arpabet	egs/tweb/tts1/local/text/symbols.py	/^_arpabet = ['@' + s for s in cmudict.valid_symbols]$/;"	v
_arpabet_to_sequence	egs/arctic/tts1/local/text/__init__.py	/^def _arpabet_to_sequence(text):$/;"	f
_arpabet_to_sequence	egs/ljspeech/tts1/local/text/__init__.py	/^def _arpabet_to_sequence(text):$/;"	f
_arpabet_to_sequence	egs/ljspeech/tts2/local/text/__init__.py	/^def _arpabet_to_sequence(text):$/;"	f
_arpabet_to_sequence	egs/tweb/tts1/local/text/__init__.py	/^def _arpabet_to_sequence(text):$/;"	f
_before_loss	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^    def _before_loss(self, input, hidden):$/;"	m	class:SequentialRNNLM
_calculate_duration	espnet/nets/pytorch_backend/fastspeech/duration_calculator.py	/^    def _calculate_duration(att_w, ilen, olen):$/;"	m	class:DurationCalculator
_calculate_encoder_decoder_attentions	espnet/nets/pytorch_backend/fastspeech/duration_calculator.py	/^    def _calculate_encoder_decoder_attentions(self, xs, ilens, ys, olens, spembs=None):$/;"	m	class:DurationCalculator
_characters	egs/arctic/tts1/local/text/symbols.py	/^_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!\\'(),-.:;? '$/;"	v
_characters	egs/ljspeech/tts1/local/text/symbols.py	/^_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!\\'(),-.:;? '$/;"	v
_characters	egs/ljspeech/tts2/local/text/symbols.py	/^_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!\\'(),-.:;? '$/;"	v
_characters	egs/tweb/tts1/local/text/symbols.py	/^_characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!\\'(),-.:;? '$/;"	v
_clean_text	egs/arctic/tts1/local/text/__init__.py	/^def _clean_text(text, cleaner_names):$/;"	f
_clean_text	egs/ljspeech/tts1/local/text/__init__.py	/^def _clean_text(text, cleaner_names):$/;"	f
_clean_text	egs/ljspeech/tts2/local/text/__init__.py	/^def _clean_text(text, cleaner_names):$/;"	f
_clean_text	egs/tweb/tts1/local/text/__init__.py	/^def _clean_text(text, cleaner_names):$/;"	f
_comma_number_re	egs/arctic/tts1/local/text/numbers.py	/^_comma_number_re = re.compile(r'([0-9][0-9\\,]+[0-9])')$/;"	v
_comma_number_re	egs/ljspeech/tts1/local/text/numbers.py	/^_comma_number_re = re.compile(r'([0-9][0-9\\,]+[0-9])')$/;"	v
_comma_number_re	egs/ljspeech/tts2/local/text/numbers.py	/^_comma_number_re = re.compile(r'([0-9][0-9\\,]+[0-9])')$/;"	v
_comma_number_re	egs/tweb/tts1/local/text/numbers.py	/^_comma_number_re = re.compile(r'([0-9][0-9\\,]+[0-9])')$/;"	v
_create_batch_asr	espnet/utils/io_utils.py	/^    def _create_batch_asr(self, x_feats_dict, y_feats_dict, uttid_list):$/;"	m	class:LoadInputsAndTargets
_create_batch_mt	espnet/utils/io_utils.py	/^    def _create_batch_mt(self, x_feats_dict, y_feats_dict, uttid_list):$/;"	m	class:LoadInputsAndTargets
_create_batch_tts	espnet/utils/io_utils.py	/^    def _create_batch_tts(self, x_feats_dict, y_feats_dict, uttid_list, eos):$/;"	m	class:LoadInputsAndTargets
_curly_re	egs/arctic/tts1/local/text/__init__.py	/^_curly_re = re.compile(r'(.*?)\\{(.+?)\\}(.*)')$/;"	v
_curly_re	egs/ljspeech/tts1/local/text/__init__.py	/^_curly_re = re.compile(r'(.*?)\\{(.+?)\\}(.*)')$/;"	v
_curly_re	egs/ljspeech/tts2/local/text/__init__.py	/^_curly_re = re.compile(r'(.*?)\\{(.+?)\\}(.*)')$/;"	v
_curly_re	egs/tweb/tts1/local/text/__init__.py	/^_curly_re = re.compile(r'(.*?)\\{(.+?)\\}(.*)')$/;"	v
_decimal_number_re	egs/arctic/tts1/local/text/numbers.py	/^_decimal_number_re = re.compile(r'([0-9]+\\.[0-9]+)')$/;"	v
_decimal_number_re	egs/ljspeech/tts1/local/text/numbers.py	/^_decimal_number_re = re.compile(r'([0-9]+\\.[0-9]+)')$/;"	v
_decimal_number_re	egs/ljspeech/tts2/local/text/numbers.py	/^_decimal_number_re = re.compile(r'([0-9]+\\.[0-9]+)')$/;"	v
_decimal_number_re	egs/tweb/tts1/local/text/numbers.py	/^_decimal_number_re = re.compile(r'([0-9]+\\.[0-9]+)')$/;"	v
_dic	utils/mergejson.py	/^                    _dic = {}$/;"	v
_dollars_re	egs/arctic/tts1/local/text/numbers.py	/^_dollars_re = re.compile(r'\\$([0-9\\.\\,]*[0-9]+)')$/;"	v
_dollars_re	egs/ljspeech/tts1/local/text/numbers.py	/^_dollars_re = re.compile(r'\\$([0-9\\.\\,]*[0-9]+)')$/;"	v
_dollars_re	egs/ljspeech/tts2/local/text/numbers.py	/^_dollars_re = re.compile(r'\\$([0-9\\.\\,]*[0-9]+)')$/;"	v
_dollars_re	egs/tweb/tts1/local/text/numbers.py	/^_dollars_re = re.compile(r'\\$([0-9\\.\\,]*[0-9]+)')$/;"	v
_eos	egs/arctic/tts1/local/text/symbols.py	/^_eos        = '~'$/;"	v
_eos	egs/ljspeech/tts1/local/text/symbols.py	/^_eos        = '~'$/;"	v
_eos	egs/ljspeech/tts2/local/text/symbols.py	/^_eos        = '~'$/;"	v
_eos	egs/tweb/tts1/local/text/symbols.py	/^_eos        = '~'$/;"	v
_expand_decimal_point	egs/arctic/tts1/local/text/numbers.py	/^def _expand_decimal_point(m):$/;"	f
_expand_decimal_point	egs/ljspeech/tts1/local/text/numbers.py	/^def _expand_decimal_point(m):$/;"	f
_expand_decimal_point	egs/ljspeech/tts2/local/text/numbers.py	/^def _expand_decimal_point(m):$/;"	f
_expand_decimal_point	egs/tweb/tts1/local/text/numbers.py	/^def _expand_decimal_point(m):$/;"	f
_expand_dollars	egs/arctic/tts1/local/text/numbers.py	/^def _expand_dollars(m):$/;"	f
_expand_dollars	egs/ljspeech/tts1/local/text/numbers.py	/^def _expand_dollars(m):$/;"	f
_expand_dollars	egs/ljspeech/tts2/local/text/numbers.py	/^def _expand_dollars(m):$/;"	f
_expand_dollars	egs/tweb/tts1/local/text/numbers.py	/^def _expand_dollars(m):$/;"	f
_expand_number	egs/arctic/tts1/local/text/numbers.py	/^def _expand_number(m):$/;"	f
_expand_number	egs/ljspeech/tts1/local/text/numbers.py	/^def _expand_number(m):$/;"	f
_expand_number	egs/ljspeech/tts2/local/text/numbers.py	/^def _expand_number(m):$/;"	f
_expand_number	egs/tweb/tts1/local/text/numbers.py	/^def _expand_number(m):$/;"	f
_expand_ordinal	egs/arctic/tts1/local/text/numbers.py	/^def _expand_ordinal(m):$/;"	f
_expand_ordinal	egs/ljspeech/tts1/local/text/numbers.py	/^def _expand_ordinal(m):$/;"	f
_expand_ordinal	egs/ljspeech/tts2/local/text/numbers.py	/^def _expand_ordinal(m):$/;"	f
_expand_ordinal	egs/tweb/tts1/local/text/numbers.py	/^def _expand_ordinal(m):$/;"	f
_forward	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def _forward(self, xs, ilens, ys=None, olens=None, spembs=None, is_inference=False):$/;"	m	class:FeedForwardTransformer
_forward	espnet/nets/pytorch_backend/fastspeech/duration_predictor.py	/^    def _forward(self, xs, x_masks=None, is_inference=False):$/;"	m	class:DurationPredictor
_func	espnet/transform/functional.py	/^    _func = None$/;"	v	class:FuncTrans
_func	espnet/transform/spec_augment.py	/^    _func = freq_mask$/;"	v	class:FreqMask
_func	espnet/transform/spec_augment.py	/^    _func = spec_augment$/;"	v	class:SpecAugment
_func	espnet/transform/spec_augment.py	/^    _func = time_mask$/;"	v	class:TimeMask
_func	espnet/transform/spec_augment.py	/^    _func = time_warp$/;"	v	class:TimeWarp
_func	test/test_transform.py	/^        _func = foo_bar$/;"	v	class:test_func_trans.FooBar
_generate_residual_forward	espnet/nets/pytorch_backend/wavenet.py	/^    def _generate_residual_forward(self, x, h, dil_sigmoid, dil_tanh,$/;"	m	class:WaveNet
_get_from_loader	espnet/utils/io_utils.py	/^    def _get_from_loader(self, filepath, filetype):$/;"	m	class:LoadInputsAndTargets
_get_last_yseq	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def _get_last_yseq(exp_yseq):$/;"	m	class:Decoder
_get_optimizer	espnet/nets/chainer_backend/transformer/training.py	/^    def _get_optimizer(self, trainer):$/;"	m	class:VaswaniRule
_get_pronunciation	egs/arctic/tts1/local/text/cmudict.py	/^def _get_pronunciation(s):$/;"	f
_get_pronunciation	egs/ljspeech/tts1/local/text/cmudict.py	/^def _get_pronunciation(s):$/;"	f
_get_pronunciation	egs/ljspeech/tts2/local/text/cmudict.py	/^def _get_pronunciation(s):$/;"	f
_get_pronunciation	egs/tweb/tts1/local/text/cmudict.py	/^def _get_pronunciation(s):$/;"	f
_id_to_symbol	egs/arctic/tts1/local/text/__init__.py	/^_id_to_symbol = {i: s for i, s in enumerate(symbols)}$/;"	v
_id_to_symbol	egs/ljspeech/tts1/local/text/__init__.py	/^_id_to_symbol = {i: s for i, s in enumerate(symbols)}$/;"	v
_id_to_symbol	egs/ljspeech/tts2/local/text/__init__.py	/^_id_to_symbol = {i: s for i, s in enumerate(symbols)}$/;"	v
_id_to_symbol	egs/tweb/tts1/local/text/__init__.py	/^_id_to_symbol = {i: s for i, s in enumerate(symbols)}$/;"	v
_index_select_list	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def _index_select_list(yseq, lst):$/;"	m	class:Decoder
_index_select_lm_state	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def _index_select_lm_state(rnnlm_state, dim, vidx):$/;"	m	class:Decoder
_inflect	egs/arctic/tts1/local/text/numbers.py	/^_inflect = inflect.engine()$/;"	v
_inflect	egs/ljspeech/tts1/local/text/numbers.py	/^_inflect = inflect.engine()$/;"	v
_inflect	egs/ljspeech/tts2/local/text/numbers.py	/^_inflect = inflect.engine()$/;"	v
_inflect	egs/tweb/tts1/local/text/numbers.py	/^_inflect = inflect.engine()$/;"	v
_init_diagonal_head	espnet/nets/pytorch_backend/fastspeech/duration_calculator.py	/^    def _init_diagonal_head(self, att_ws):$/;"	m	class:DurationCalculator
_init_summary	espnet/asr/asr_utils.py	/^    def _init_summary(self):$/;"	m	class:CompareValueTrigger
_init_weights	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^    def _init_weights(self):$/;"	m	class:SequentialRNNLM
_input_window_for_decoder	espnet/nets/pytorch_backend/streaming/window.py	/^    def _input_window_for_decoder(self, use_all=False):$/;"	m	class:WindowStreamingE2E
_integrate_with_spk_embed	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def _integrate_with_spk_embed(self, hs, spembs):$/;"	m	class:FeedForwardTransformer
_integrate_with_spk_embed	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def _integrate_with_spk_embed(self, hs, spembs):$/;"	m	class:Transformer
_load_teacher_model	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def _load_teacher_model(self, model_path):$/;"	m	class:FeedForwardTransformer
_make_guided_attention_mask	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def _make_guided_attention_mask(ilen, olen, sigma):$/;"	m	class:GuidedAttentionLoss
_make_guided_attention_masks	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def _make_guided_attention_masks(self, ilens, olens):$/;"	m	class:GuidedAttentionLoss
_make_masks	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def _make_masks(ilens, olens):$/;"	m	class:GuidedAttentionLoss
_number_re	egs/arctic/tts1/local/text/numbers.py	/^_number_re = re.compile(r'[0-9]+')$/;"	v
_number_re	egs/ljspeech/tts1/local/text/numbers.py	/^_number_re = re.compile(r'[0-9]+')$/;"	v
_number_re	egs/ljspeech/tts2/local/text/numbers.py	/^_number_re = re.compile(r'[0-9]+')$/;"	v
_number_re	egs/tweb/tts1/local/text/numbers.py	/^_number_re = re.compile(r'[0-9]+')$/;"	v
_ordinal_re	egs/arctic/tts1/local/text/numbers.py	/^_ordinal_re = re.compile(r'[0-9]+(st|nd|rd|th)')$/;"	v
_ordinal_re	egs/ljspeech/tts1/local/text/numbers.py	/^_ordinal_re = re.compile(r'[0-9]+(st|nd|rd|th)')$/;"	v
_ordinal_re	egs/ljspeech/tts2/local/text/numbers.py	/^_ordinal_re = re.compile(r'[0-9]+(st|nd|rd|th)')$/;"	v
_ordinal_re	egs/tweb/tts1/local/text/numbers.py	/^_ordinal_re = re.compile(r'[0-9]+(st|nd|rd|th)')$/;"	v
_pad	egs/arctic/tts1/local/text/symbols.py	/^_pad        = '_'$/;"	v
_pad	egs/ljspeech/tts1/local/text/symbols.py	/^_pad        = '_'$/;"	v
_pad	egs/ljspeech/tts2/local/text/symbols.py	/^_pad        = '_'$/;"	v
_pad	egs/tweb/tts1/local/text/symbols.py	/^_pad        = '_'$/;"	v
_parse_cmudict	egs/arctic/tts1/local/text/cmudict.py	/^def _parse_cmudict(file):$/;"	f
_parse_cmudict	egs/ljspeech/tts1/local/text/cmudict.py	/^def _parse_cmudict(file):$/;"	f
_parse_cmudict	egs/ljspeech/tts2/local/text/cmudict.py	/^def _parse_cmudict(file):$/;"	f
_parse_cmudict	egs/tweb/tts1/local/text/cmudict.py	/^def _parse_cmudict(file):$/;"	f
_plot_and_save	espnet/tts/pytorch_backend/tts.py	/^    def _plot_and_save(array, figname, figsize=(6, 4), dpi=150):$/;"	f	function:decode
_plot_and_save_attention	espnet/asr/asr_mix_utils.py	/^    def _plot_and_save_attention(self, att_w, filename):$/;"	m	class:PlotAttentionReport
_plot_and_save_attention	espnet/asr/asr_utils.py	/^    def _plot_and_save_attention(self, att_w, filename, han_mode=False):$/;"	m	class:PlotAttentionReport
_plot_and_save_attention	espnet/nets/chainer_backend/transformer/plot.py	/^def _plot_and_save_attention(att_w, filename):$/;"	f
_plot_and_save_attention	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.transformer.plot import _plot_and_save_attention$/;"	i
_plot_and_save_attention	espnet/nets/pytorch_backend/transformer/plot.py	/^def _plot_and_save_attention(att_w, filename):$/;"	f
_postprocess	espnet/nets/pytorch_backend/wavenet.py	/^    def _postprocess(self, x):$/;"	m	class:WaveNet
_pounds_re	egs/arctic/tts1/local/text/numbers.py	/^_pounds_re = re.compile(r'£([0-9\\,]*[0-9]+)')$/;"	v
_pounds_re	egs/ljspeech/tts1/local/text/numbers.py	/^_pounds_re = re.compile(r'£([0-9\\,]*[0-9]+)')$/;"	v
_pounds_re	egs/ljspeech/tts2/local/text/numbers.py	/^_pounds_re = re.compile(r'£([0-9\\,]*[0-9]+)')$/;"	v
_pounds_re	egs/tweb/tts1/local/text/numbers.py	/^_pounds_re = re.compile(r'£([0-9\\,]*[0-9]+)')$/;"	v
_pre_hook	espnet/nets/pytorch_backend/transformer/embedding.py	/^def _pre_hook(state_dict, prefix, local_metadata, strict,$/;"	f
_preprocess	espnet/nets/pytorch_backend/wavenet.py	/^    def _preprocess(self, x):$/;"	m	class:WaveNet
_propagate	test/test_e2e_asr.py	/^    def _propagate(ctc_type):$/;"	f	function:test_chainer_ctc_type
_remove_commas	egs/arctic/tts1/local/text/numbers.py	/^def _remove_commas(m):$/;"	f
_remove_commas	egs/ljspeech/tts1/local/text/numbers.py	/^def _remove_commas(m):$/;"	f
_remove_commas	egs/ljspeech/tts2/local/text/numbers.py	/^def _remove_commas(m):$/;"	f
_remove_commas	egs/tweb/tts1/local/text/numbers.py	/^def _remove_commas(m):$/;"	f
_repeat_one_sequence	espnet/nets/pytorch_backend/fastspeech/length_regulator.py	/^    def _repeat_one_sequence(self, x, d):$/;"	m	class:LengthRegulator
_reset_masks	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def _reset_masks(self):$/;"	m	class:GuidedAttentionLoss
_reset_parameters	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def _reset_parameters(self, init_type, init_enc_alpha=1.0, init_dec_alpha=1.0):$/;"	m	class:FeedForwardTransformer
_reset_parameters	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def _reset_parameters(self, init_type, init_enc_alpha=1.0, init_dec_alpha=1.0):$/;"	m	class:Transformer
_residual_forward	espnet/nets/pytorch_backend/wavenet.py	/^    def _residual_forward(self, x, h, dil_sigmoid, dil_tanh,$/;"	m	class:WaveNet
_restore_snapshot	espnet/asr/asr_utils.py	/^def _restore_snapshot(model, snapshot, load_fn=chainer.serializers.load_npz):$/;"	f
_revert_sort_by_length	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^    def _revert_sort_by_length(self, xs, ilens, sort_idx):$/;"	m	class:CBHG
_setup	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^    def _setup(self, rnn_type, ntoken, ninp, nhid, nlayers, dropout=0.5, tie_weights=False):$/;"	m	class:SequentialRNNLM
_should_keep_symbol	egs/arctic/tts1/local/text/__init__.py	/^def _should_keep_symbol(s):$/;"	f
_should_keep_symbol	egs/ljspeech/tts1/local/text/__init__.py	/^def _should_keep_symbol(s):$/;"	f
_should_keep_symbol	egs/ljspeech/tts2/local/text/__init__.py	/^def _should_keep_symbol(s):$/;"	f
_should_keep_symbol	egs/tweb/tts1/local/text/__init__.py	/^def _should_keep_symbol(s):$/;"	f
_sort_by_length	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^    def _sort_by_length(self, xs, ilens):$/;"	m	class:CBHG
_source_mask	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def _source_mask(self, ilens):$/;"	m	class:FeedForwardTransformer
_source_mask	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def _source_mask(self, ilens):$/;"	m	class:Transformer
_source_to_target_mask	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def _source_to_target_mask(self, ilens, olens):$/;"	m	class:Transformer
_subsamplex	espnet/nets/chainer_backend/nets_utils.py	/^def _subsamplex(x, n):$/;"	f
_subsamplex	espnet/nets/chainer_backend/rnn/encoders.py	/^from espnet.nets.chainer_backend.nets_utils import _subsamplex$/;"	i
_symbol_to_id	egs/arctic/tts1/local/text/__init__.py	/^_symbol_to_id = {s: i for i, s in enumerate(symbols)}$/;"	v
_symbol_to_id	egs/ljspeech/tts1/local/text/__init__.py	/^_symbol_to_id = {s: i for i, s in enumerate(symbols)}$/;"	v
_symbol_to_id	egs/ljspeech/tts2/local/text/__init__.py	/^_symbol_to_id = {s: i for i, s in enumerate(symbols)}$/;"	v
_symbol_to_id	egs/tweb/tts1/local/text/__init__.py	/^_symbol_to_id = {s: i for i, s in enumerate(symbols)}$/;"	v
_symbols_to_sequence	egs/arctic/tts1/local/text/__init__.py	/^def _symbols_to_sequence(symbols):$/;"	f
_symbols_to_sequence	egs/ljspeech/tts1/local/text/__init__.py	/^def _symbols_to_sequence(symbols):$/;"	f
_symbols_to_sequence	egs/ljspeech/tts2/local/text/__init__.py	/^def _symbols_to_sequence(symbols):$/;"	f
_symbols_to_sequence	egs/tweb/tts1/local/text/__init__.py	/^def _symbols_to_sequence(symbols):$/;"	f
_target_mask	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def _target_mask(self, olens):$/;"	m	class:Transformer
_target_mask	espnet/nets/pytorch_backend/lm/transformer.py	/^    def _target_mask(self, ys_in_pad):$/;"	m	class:TransformerLM
_time_to_str	utils/trim_silence.py	/^def _time_to_str(time_idx):$/;"	f
_torch_snapshot_cleanup_object	espnet/asr/asr_utils.py	/^def _torch_snapshot_cleanup_object(trainer, snapshots_num_keeps):$/;"	f
_torch_snapshot_object	espnet/asr/asr_utils.py	/^def _torch_snapshot_object(trainer, target, filename, savefun):$/;"	f
_transfer_from_teacher	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def _transfer_from_teacher(self, transferred_encoder_module):$/;"	m	class:FeedForwardTransformer
_update_value	espnet/nets/chainer_backend/transformer/training.py	/^    def _update_value(self, optimizer, value):$/;"	m	class:VaswaniRule
_valid_symbol_set	egs/arctic/tts1/local/text/cmudict.py	/^_valid_symbol_set = set(valid_symbols)$/;"	v
_valid_symbol_set	egs/ljspeech/tts1/local/text/cmudict.py	/^_valid_symbol_set = set(valid_symbols)$/;"	v
_valid_symbol_set	egs/ljspeech/tts2/local/text/cmudict.py	/^_valid_symbol_set = set(valid_symbols)$/;"	v
_valid_symbol_set	egs/tweb/tts1/local/text/cmudict.py	/^_valid_symbol_set = set(valid_symbols)$/;"	v
_whitespace_re	egs/arctic/tts1/local/text/cleaners.py	/^_whitespace_re = re.compile(r'\\s+')$/;"	v
_whitespace_re	egs/ljspeech/tts1/local/text/cleaners.py	/^_whitespace_re = re.compile(r'\\s+')$/;"	v
_whitespace_re	egs/ljspeech/tts2/local/text/cleaners.py	/^_whitespace_re = re.compile(r'\\s+')$/;"	v
_whitespace_re	egs/tweb/tts1/local/text/cleaners.py	/^_whitespace_re = re.compile(r'\\s+')$/;"	v
_zero_state	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def _zero_state(self, hs):$/;"	m	class:Decoder
_zoneout	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def _zoneout(self, h, next_h, prob):$/;"	m	class:ZoneOutCell
abbreviations	egs/vais1000/tts1/local/text/regex_tokenize.py	/^abbreviations = [$/;"	v
absolute_import	utils/spm_decode	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
absolute_import	utils/spm_encode	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
accept_input	espnet/nets/pytorch_backend/streaming/segment.py	/^    def accept_input(self, x):$/;"	m	class:SegmentStreamingE2E
accept_input	espnet/nets/pytorch_backend/streaming/window.py	/^    def accept_input(self, x):$/;"	m	class:WindowStreamingE2E
aconv_chans	test/test_beam_search.py	/^    aconv_chans=4,$/;"	v
aconv_chans	test/test_initialization.py	/^    aconv_chans=10,$/;"	v
aconv_filts	test/test_beam_search.py	/^    aconv_filts=10,$/;"	v
aconv_filts	test/test_initialization.py	/^    aconv_filts=100,$/;"	v
acronym_lexicon	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^                acronym_lexicon = acronym_lexicon + dict_letter[l.upper()] + " "$/;"	v
acronym_lexicon	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^            acronym_lexicon = ""$/;"	v
acronym_lexicon	egs/swbd/asr1/local/format_acronyms_dict.py	/^                acronym_lexicon = acronym_lexicon + dict_letter[l.upper()] + " "$/;"	v
acronym_lexicon	egs/swbd/asr1/local/format_acronyms_dict.py	/^            acronym_lexicon = ""$/;"	v
acronym_mapped	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^                    acronym_mapped = acronym_mapped + l.lower() + '._'$/;"	v
acronym_mapped	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped = ""$/;"	v
acronym_mapped	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped = acronym_mapped + actual_word[-1].lower() + '.\\'s'$/;"	v
acronym_mapped	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped = acronym_mapped + actual_word[-1].lower() + '.s'$/;"	v
acronym_mapped	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped = acronym_mapped + word[-1].lower() + '.'$/;"	v
acronym_mapped	egs/swbd/asr1/local/format_acronyms_dict.py	/^                    acronym_mapped = acronym_mapped + l.lower() + '._'$/;"	v
acronym_mapped	egs/swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped = ""$/;"	v
acronym_mapped	egs/swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped = acronym_mapped + actual_word[-1].lower() + '.\\'s'$/;"	v
acronym_mapped	egs/swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped = acronym_mapped + actual_word[-1].lower() + '.s'$/;"	v
acronym_mapped	egs/swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped = acronym_mapped + word[-1].lower() + '.'$/;"	v
acronym_mapped_back	egs/swbd/asr1/local/format_acronyms_dict.py	/^                    acronym_mapped_back = acronym_mapped_back + l.lower() + ' '$/;"	v
acronym_mapped_back	egs/swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped_back = ""$/;"	v
acronym_mapped_back	egs/swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped_back = acronym_mapped_back + actual_word[-1].lower() + '\\'s'$/;"	v
acronym_mapped_back	egs/swbd/asr1/local/format_acronyms_dict.py	/^                acronym_mapped_back = acronym_mapped_back + word[-1].lower()$/;"	v
actual_lexicon	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^            actual_lexicon = lexicon[:-2]$/;"	v
actual_lexicon	egs/swbd/asr1/local/format_acronyms_dict.py	/^            actual_lexicon = lexicon[:-2]$/;"	v
actual_word	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^            actual_word = word[:-1]$/;"	v
actual_word	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^            actual_word = word[:-2]$/;"	v
actual_word	egs/swbd/asr1/local/format_acronyms_dict.py	/^            actual_word = word[:-1]$/;"	v
actual_word	egs/swbd/asr1/local/format_acronyms_dict.py	/^            actual_word = word[:-2]$/;"	v
adadelta_eps_decay	espnet/asr/asr_utils.py	/^    def adadelta_eps_decay(trainer):$/;"	f	function:adadelta_eps_decay
adadelta_eps_decay	espnet/asr/asr_utils.py	/^def adadelta_eps_decay(eps_decay):$/;"	f
adadelta_eps_decay	espnet/asr/chainer_backend/asr.py	/^from espnet.asr.asr_utils import adadelta_eps_decay$/;"	i
adadelta_eps_decay	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import adadelta_eps_decay$/;"	i
adadelta_eps_decay	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.asr_utils import adadelta_eps_decay$/;"	i
adadelta_eps_decay	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.asr_utils import adadelta_eps_decay$/;"	i
adadelta_eps_decay	espnet/st/pytorch_backend/st.py	/^from espnet.asr.asr_utils import adadelta_eps_decay$/;"	i
adam_lr_decay	espnet/asr/asr_utils.py	/^    def adam_lr_decay(trainer):$/;"	f	function:adam_lr_decay
adam_lr_decay	espnet/asr/asr_utils.py	/^def adam_lr_decay(eps_decay):$/;"	f
adam_lr_decay	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.asr_utils import adam_lr_decay$/;"	i
adam_lr_decay	espnet/st/pytorch_backend/st.py	/^from espnet.asr.asr_utils import adam_lr_decay$/;"	i
add_arguments	espnet/lm/chainer_backend/lm.py	/^    def add_arguments(parser):$/;"	m	class:DefaultRNNLM
add_arguments	espnet/nets/asr_interface.py	/^    def add_arguments(parser):$/;"	m	class:ASRInterface
add_arguments	espnet/nets/chainer_backend/e2e_asr.py	/^    def add_arguments(parser):$/;"	m	class:E2E
add_arguments	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def add_arguments(parser):$/;"	m	class:E2E
add_arguments	espnet/nets/lm_interface.py	/^    def add_arguments(parser):$/;"	m	class:LMInterface
add_arguments	espnet/nets/mt_interface.py	/^    def add_arguments(parser):$/;"	m	class:MTInterface
add_arguments	espnet/nets/pytorch_backend/e2e_asr.py	/^    def add_arguments(parser):$/;"	m	class:E2E
add_arguments	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def add_arguments(parser):$/;"	m	class:E2E
add_arguments	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def add_arguments(parser):$/;"	m	class:E2E
add_arguments	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^    def add_arguments(parser):$/;"	m	class:E2E
add_arguments	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def add_arguments(parser):$/;"	m	class:E2E
add_arguments	espnet/nets/pytorch_backend/e2e_mt.py	/^    def add_arguments(parser):$/;"	m	class:E2E
add_arguments	espnet/nets/pytorch_backend/e2e_st.py	/^    def add_arguments(parser):$/;"	m	class:E2E
add_arguments	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^    def add_arguments(parser):$/;"	m	class:E2E
add_arguments	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def add_arguments(parser):$/;"	m	class:FeedForwardTransformer
add_arguments	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def add_arguments(parser):$/;"	m	class:Tacotron2
add_arguments	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def add_arguments(parser):$/;"	m	class:Transformer
add_arguments	espnet/nets/pytorch_backend/lm/default.py	/^    def add_arguments(parser):$/;"	m	class:DefaultRNNLM
add_arguments	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^    def add_arguments(parser):$/;"	m	class:SequentialRNNLM
add_arguments	espnet/nets/pytorch_backend/lm/transformer.py	/^    def add_arguments(parser):$/;"	m	class:TransformerLM
add_arguments	espnet/nets/tts_interface.py	/^    def add_arguments(parser):$/;"	m	class:TTSInterface
add_arguments	espnet/transform/functional.py	/^    def add_arguments(cls, parser):$/;"	m	class:FuncTrans
add_arguments	espnet/transform/transform_interface.py	/^    def add_arguments(cls, parser):$/;"	m	class:TransformInterface
add_deltas	espnet/transform/add_deltas.py	/^def add_deltas(x, window=2, order=2):$/;"	f
add_deltas	test/test_transform.py	/^from espnet.transform.add_deltas import add_deltas$/;"	i
add_gradient_noise	espnet/asr/asr_utils.py	/^def add_gradient_noise(model, iteration, duration=100, eta=1.0, scale_factor=0.55):$/;"	f
add_gradient_noise	espnet/asr/pytorch_backend/asr.py	/^            from espnet.asr.asr_utils import add_gradient_noise$/;"	i
add_results_to_json	espnet/asr/asr_mix_utils.py	/^def add_results_to_json(js, nbest_hyps_sd, char_list):$/;"	f
add_results_to_json	espnet/asr/asr_utils.py	/^def add_results_to_json(js, nbest_hyps, char_list):$/;"	f
add_results_to_json	espnet/asr/chainer_backend/asr.py	/^from espnet.asr.asr_utils import add_results_to_json$/;"	i
add_results_to_json	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import add_results_to_json$/;"	i
add_results_to_json	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.asr_mix_utils import add_results_to_json$/;"	i
add_results_to_json	espnet/asr/pytorch_backend/recog.py	/^from espnet.asr.asr_utils import add_results_to_json$/;"	i
add_results_to_json	espnet/mt/mt_utils.py	/^def add_results_to_json(js, nbest_hyps, char_list):$/;"	f
add_results_to_json	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.asr_utils import add_results_to_json$/;"	i
add_results_to_json	espnet/st/pytorch_backend/st.py	/^from espnet.asr.asr_utils import add_results_to_json$/;"	i
add_scalar	test/test_tensorboard.py	/^    def add_scalar(self, k, v, n):$/;"	m	class:DummyWriter
add_sos_eos	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.transformer.add_sos_eos import add_sos_eos$/;"	i
add_sos_eos	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.transformer.add_sos_eos import add_sos_eos$/;"	i
add_sos_eos	espnet/nets/pytorch_backend/transformer/add_sos_eos.py	/^def add_sos_eos(ys_pad, sos, eos, ignore_id):$/;"	f
add_sos_eos	test/test_e2e_asr_transformer.py	/^    from espnet.nets.pytorch_backend.transformer.add_sos_eos import add_sos_eos$/;"	i
add_sos_eos	test/test_e2e_st_transformer.py	/^    from espnet.nets.pytorch_backend.transformer.add_sos_eos import add_sos_eos$/;"	i
adddic	utils/addjson.py	/^        adddic = intersec_add_dic[key_id]$/;"	v
adim	test/test_beam_search.py	/^    adim=16,$/;"	v
adim	test/test_initialization.py	/^    adim=320,$/;"	v
adim	test/test_transformer_decode.py	/^    adim = 4$/;"	v
aheads	test/test_beam_search.py	/^    aheads=2,$/;"	v
all_l	utils/result2json.py	/^    all_l = {'utts': ret}$/;"	v
all_l	utils/scp2json.py	/^    all_l = {'utts': new_line}$/;"	v
amp	espnet/asr/pytorch_backend/asr.py	/^            from apex import amp$/;"	i
amp	espnet/asr/pytorch_backend/asr_mix.py	/^            from apex import amp$/;"	i
amp	espnet/lm/pytorch_backend/lm.py	/^            from apex import amp$/;"	i
amp	espnet/mt/pytorch_backend/mt.py	/^            from apex import amp$/;"	i
amp	espnet/st/pytorch_backend/st.py	/^            from apex import amp$/;"	i
an4_root	egs/an4/asr1/local/data_prep.py	/^an4_root = sys.argv[1]$/;"	v
an4_root	egs/an4/tts1/local/data_prep.py	/^an4_root = sys.argv[1]$/;"	v
an4_root	egs/mini_an4/asr1/local/data_prep.py	/^an4_root = sys.argv[1]$/;"	v
an4_root	egs/mini_an4/asr_mix1/local/data_prep.py	/^an4_root = sys.argv[1]$/;"	v
an4_root	egs/mini_an4/tts1/local/data_prep.py	/^an4_root = sys.argv[1]$/;"	v
append_token	espnet/nets/beam_search.py	/^    def append_token(xs: torch.Tensor, x: int) -> torch.Tensor:$/;"	m	class:BeamSearch
apply_beamforming	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^        def apply_beamforming(data, ilens, psd_speech, psd_noise):$/;"	f	function:DNN_Beamformer.forward
apply_beamforming_vector	espnet/nets/pytorch_backend/frontends/beamformer.py	/^def apply_beamforming_vector(beamform_vector: ComplexTensor,$/;"	f
apply_beamforming_vector	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^    import apply_beamforming_vector$/;"	i
apply_interpolation	espnet/utils/spec_augment.py	/^def apply_interpolation(query_points, train_points, w, v, order):$/;"	f
argmax	espnet/nets/chainer_backend/ctc.py	/^    def argmax(self, hs_pad):$/;"	m	class:WarpCTC
argmax	espnet/nets/chainer_backend/transformer/ctc.py	/^    def argmax(self, hs_pad):$/;"	m	class:WarpCTC
argmax	espnet/nets/pytorch_backend/ctc.py	/^    def argmax(self, hs_pad):$/;"	m	class:CTC
argparse	egs/arctic/tts1/local/clean_text.py	/^import argparse$/;"	i
argparse	egs/chime5/asr1/local/json2text.py	/^import argparse$/;"	i
argparse	egs/commonvoice/asr1/local/filter_text.py	/^import argparse$/;"	i
argparse	egs/csj/asr1/local/csj_rm_tag.py	/^import argparse$/;"	i
argparse	egs/fisher_callhome_spanish/mt1/local/concat_short_utt.py	/^import argparse$/;"	i
argparse	egs/fisher_callhome_spanish/st1/local/concat_short_utt.py	/^import argparse$/;"	i
argparse	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^import argparse,re$/;"	i
argparse	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^import argparse,re$/;"	i
argparse	egs/iwslt18/asr1/local/ctm2segments.py	/^import argparse$/;"	i
argparse	egs/iwslt18/asr1/local/json2trn_reorder.py	/^import argparse$/;"	i
argparse	egs/iwslt18/asr1/local/parse_xml.py	/^import argparse$/;"	i
argparse	egs/iwslt18/asr1/local/reorder_text.py	/^import argparse$/;"	i
argparse	egs/iwslt18/mt1/local/ctm2segments.py	/^import argparse$/;"	i
argparse	egs/iwslt18/mt1/local/json2trn_reorder.py	/^import argparse$/;"	i
argparse	egs/iwslt18/mt1/local/parse_xml.py	/^import argparse$/;"	i
argparse	egs/iwslt18/mt1/local/reorder_text.py	/^import argparse$/;"	i
argparse	egs/iwslt18/st1/local/ctm2segments.py	/^import argparse$/;"	i
argparse	egs/iwslt18/st1/local/json2trn_reorder.py	/^import argparse$/;"	i
argparse	egs/iwslt18/st1/local/parse_xml.py	/^import argparse$/;"	i
argparse	egs/iwslt18/st1/local/reorder_text.py	/^import argparse$/;"	i
argparse	egs/jnas/asr1/local/clean_text.py	/^import argparse$/;"	i
argparse	egs/jnas/asr1/local/filter_text.py	/^import argparse$/;"	i
argparse	egs/jnas/tts1/local/clean_text.py	/^import argparse$/;"	i
argparse	egs/jnas/tts1/local/filter_text.py	/^import argparse$/;"	i
argparse	egs/jsut/tts1/local/clean_text.py	/^import argparse$/;"	i
argparse	egs/jsut/tts1/local/prep_segments.py	/^import argparse$/;"	i
argparse	egs/jvs/tts1/local/clean_text.py	/^import argparse$/;"	i
argparse	egs/libri_trans/asr1/local/concat_json_multiref.py	/^import argparse$/;"	i
argparse	egs/libri_trans/mt1/local/concat_json_multiref.py	/^import argparse$/;"	i
argparse	egs/libri_trans/st1/local/concat_json_multiref.py	/^import argparse$/;"	i
argparse	egs/ljspeech/tts1/local/clean_text.py	/^import argparse$/;"	i
argparse	egs/ljspeech/tts2/local/clean_text.py	/^import argparse$/;"	i
argparse	egs/m_ailabs/tts1/local/parse_text.py	/^import argparse$/;"	i
argparse	egs/reverb/asr1/local/filterjson.py	/^import argparse$/;"	i
argparse	egs/reverb/asr1/local/run_wpe.py	/^import argparse$/;"	i
argparse	egs/reverb/asr1_multich/local/filterjson.py	/^import argparse$/;"	i
argparse	egs/reverb/asr1_multich/local/run_wpe.py	/^import argparse$/;"	i
argparse	egs/swbd/asr1/local/format_acronyms_dict.py	/^import argparse,re$/;"	i
argparse	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^import argparse,re$/;"	i
argparse	egs/tweb/tts1/local/clean_text.py	/^import argparse$/;"	i
argparse	egs/vais1000/tts1/local/clean_text.py	/^import argparse$/;"	i
argparse	egs/voxforge/asr1/local/filter_text.py	/^import argparse$/;"	i
argparse	egs/wsj_mix/asr1/local/merge_scp2json.py	/^import argparse$/;"	i
argparse	egs/wsj_mix/asr1/local/mergejson.py	/^import argparse$/;"	i
argparse	espnet/asr/asr_utils.py	/^import argparse$/;"	i
argparse	espnet/nets/asr_interface.py	/^import argparse$/;"	i
argparse	espnet/nets/mt_interface.py	/^import argparse$/;"	i
argparse	espnet/nets/pytorch_backend/e2e_asr.py	/^import argparse$/;"	i
argparse	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^import argparse$/;"	i
argparse	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^import argparse$/;"	i
argparse	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^import argparse$/;"	i
argparse	espnet/nets/pytorch_backend/e2e_mt.py	/^import argparse$/;"	i
argparse	espnet/nets/pytorch_backend/e2e_st.py	/^import argparse$/;"	i
argparse	espnet/utils/fill_missing_args.py	/^import argparse$/;"	i
argparse	test/test_asr_init.py	/^import argparse$/;"	i
argparse	test/test_e2e_asr.py	/^import argparse$/;"	i
argparse	test/test_e2e_asr_mulenc.py	/^import argparse$/;"	i
argparse	test/test_e2e_asr_transducer.py	/^import argparse$/;"	i
argparse	test/test_e2e_asr_transformer.py	/^import argparse$/;"	i
argparse	test/test_e2e_mt.py	/^import argparse$/;"	i
argparse	test/test_e2e_st.py	/^import argparse$/;"	i
argparse	test/test_e2e_st_transformer.py	/^import argparse$/;"	i
argparse	test/test_initialization.py	/^import argparse$/;"	i
argparse	test/test_multi_spkrs.py	/^import argparse$/;"	i
argparse	test/test_recog.py	/^import argparse$/;"	i
argparse	test/test_transform.py	/^    import argparse$/;"	i
argparse	tools/check_install.py	/^import argparse$/;"	i
argparse	utils/addjson.py	/^import argparse$/;"	i
argparse	utils/apply-cmvn.py	/^import argparse$/;"	i
argparse	utils/average_checkpoints.py	/^import argparse$/;"	i
argparse	utils/change_yaml.py	/^import argparse$/;"	i
argparse	utils/compute-cmvn-stats.py	/^import argparse$/;"	i
argparse	utils/compute-fbank-feats.py	/^import argparse$/;"	i
argparse	utils/compute-stft-feats.py	/^import argparse$/;"	i
argparse	utils/concatjson.py	/^import argparse$/;"	i
argparse	utils/convert_fbank_to_wav.py	/^import argparse$/;"	i
argparse	utils/copy-feats.py	/^import argparse$/;"	i
argparse	utils/dump-pcm.py	/^import argparse$/;"	i
argparse	utils/eval-source-separation.py	/^import argparse$/;"	i
argparse	utils/eval_perm_free_error.py	/^import argparse$/;"	i
argparse	utils/feat-to-shape.py	/^import argparse$/;"	i
argparse	utils/feats2npy.py	/^import argparse$/;"	i
argparse	utils/filt.py	/^import argparse$/;"	i
argparse	utils/generate_wav_from_fbank.py	/^import argparse$/;"	i
argparse	utils/get_yaml.py	/^import argparse$/;"	i
argparse	utils/json2sctm.py	/^import argparse$/;"	i
argparse	utils/json2text.py	/^import argparse$/;"	i
argparse	utils/json2trn.py	/^import argparse$/;"	i
argparse	utils/json2trn_mt.py	/^import argparse$/;"	i
argparse	utils/json2trn_wo_dict.py	/^import argparse$/;"	i
argparse	utils/merge_scp2json.py	/^import argparse$/;"	i
argparse	utils/mergejson.py	/^import argparse$/;"	i
argparse	utils/mix-mono-wav-scp.py	/^import argparse$/;"	i
argparse	utils/result2json.py	/^import argparse$/;"	i
argparse	utils/scp2json.py	/^import argparse$/;"	i
argparse	utils/splitjson.py	/^import argparse$/;"	i
argparse	utils/spm_decode	/^import argparse$/;"	i
argparse	utils/spm_encode	/^import argparse$/;"	i
argparse	utils/text2token.py	/^import argparse$/;"	i
argparse	utils/text2vocabulary.py	/^import argparse$/;"	i
argparse	utils/trim_silence.py	/^import argparse$/;"	i
argparse	utils/trn2ctm.py	/^import argparse$/;"	i
argparse	utils/trn2stm.py	/^import argparse$/;"	i
args	doc/argparse2rst.py	/^args = get_parser().parse_args()$/;"	v
args	doc/module2rst.py	/^args = parser.parse_args()$/;"	v
args	egs/arctic/tts1/local/clean_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/chime5/asr1/local/json2text.py	/^    args = parser.parse_args()$/;"	v
args	egs/commonvoice/asr1/local/filter_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/csj/asr1/local/csj_rm_tag.py	/^    args = parser.parse_args()$/;"	v
args	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^args = parser.parse_args()$/;"	v
args	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^args = parser.parse_args()$/;"	v
args	egs/iwslt18/asr1/local/json2trn_reorder.py	/^    args = parser.parse_args()$/;"	v
args	egs/iwslt18/asr1/local/reorder_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/iwslt18/mt1/local/json2trn_reorder.py	/^    args = parser.parse_args()$/;"	v
args	egs/iwslt18/mt1/local/reorder_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/iwslt18/st1/local/json2trn_reorder.py	/^    args = parser.parse_args()$/;"	v
args	egs/iwslt18/st1/local/reorder_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/jnas/asr1/local/clean_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/jnas/asr1/local/filter_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/jnas/tts1/local/clean_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/jnas/tts1/local/filter_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/jsut/tts1/local/clean_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/jsut/tts1/local/prep_segments.py	/^    args = get_parser().parse_args(sys.argv[1:])$/;"	v
args	egs/jvs/tts1/local/clean_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/libri_trans/asr1/local/concat_json_multiref.py	/^    args = parser.parse_args()$/;"	v
args	egs/libri_trans/mt1/local/concat_json_multiref.py	/^    args = parser.parse_args()$/;"	v
args	egs/libri_trans/st1/local/concat_json_multiref.py	/^    args = parser.parse_args()$/;"	v
args	egs/ljspeech/tts1/local/clean_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/ljspeech/tts2/local/clean_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/reverb/asr1/local/filterjson.py	/^    args = parser.parse_args()$/;"	v
args	egs/reverb/asr1/local/run_wpe.py	/^args = parser.parse_args()$/;"	v
args	egs/reverb/asr1_multich/local/filterjson.py	/^    args = parser.parse_args()$/;"	v
args	egs/reverb/asr1_multich/local/run_wpe.py	/^args = parser.parse_args()$/;"	v
args	egs/swbd/asr1/local/format_acronyms_dict.py	/^args = parser.parse_args()$/;"	v
args	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^args = parser.parse_args()$/;"	v
args	egs/tweb/tts1/local/clean_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/vais1000/tts1/local/clean_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/voxforge/asr1/local/filter_text.py	/^    args = parser.parse_args()$/;"	v
args	egs/wsj_mix/asr1/local/merge_scp2json.py	/^    args = parser.parse_args()$/;"	v
args	egs/wsj_mix/asr1/local/mergejson.py	/^    args = parser.parse_args()$/;"	v
args	test/test_initialization.py	/^args = argparse.Namespace($/;"	v
args	utils/addjson.py	/^    args = parser.parse_args()$/;"	v
args	utils/average_checkpoints.py	/^    args = get_parser().parse_args()$/;"	v
args	utils/concatjson.py	/^    args = get_parser().parse_args()$/;"	v
args	utils/feats2npy.py	/^    args = get_parser().parse_args(sys.argv[1:])$/;"	v
args	utils/json2text.py	/^    args = get_parser().parse_args()$/;"	v
args	utils/merge_scp2json.py	/^    args = parser.parse_args()$/;"	v
args	utils/mergejson.py	/^    args = parser.parse_args()$/;"	v
args	utils/result2json.py	/^    args = parser.parse_args()$/;"	v
args	utils/scp2json.py	/^    args = parser.parse_args()$/;"	v
args	utils/splitjson.py	/^    args = get_parser().parse_args()$/;"	v
args	utils/text2vocabulary.py	/^    args = parser.parse_args()$/;"	v
asdict	espnet/nets/beam_search.py	/^    def asdict(self) -> dict:$/;"	m	class:Hypothesis
asr_utils	espnet/nets/chainer_backend/transformer/plot.py	/^from espnet.asr import asr_utils$/;"	i
asr_utils	espnet/nets/pytorch_backend/transformer/plot.py	/^from espnet.asr import asr_utils$/;"	i
assert_scipy_wav_style	espnet/utils/cli_utils.py	/^def assert_scipy_wav_style(value):$/;"	f
assert_scipy_wav_style	espnet/utils/cli_writers.py	/^from espnet.utils.cli_utils import assert_scipy_wav_style$/;"	i
assert_scipy_wav_style	test/test_cli.py	/^from espnet.utils.cli_utils import assert_scipy_wav_style$/;"	i
att_for	espnet/nets/chainer_backend/e2e_asr.py	/^from espnet.nets.chainer_backend.rnn.attentions import att_for$/;"	i
att_for	espnet/nets/chainer_backend/rnn/attentions.py	/^def att_for(args):$/;"	f
att_for	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.pytorch_backend.rnn.attentions import att_for$/;"	i
att_for	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.rnn.attentions import att_for$/;"	i
att_for	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.nets.pytorch_backend.rnn.attentions import att_for$/;"	i
att_for	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^from espnet.nets.pytorch_backend.rnn.attentions import att_for$/;"	i
att_for	espnet/nets/pytorch_backend/e2e_mt.py	/^from espnet.nets.pytorch_backend.rnn.attentions import att_for$/;"	i
att_for	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.pytorch_backend.rnn.attentions import att_for$/;"	i
att_for	espnet/nets/pytorch_backend/rnn/attentions.py	/^def att_for(args, num_att=1, han_mode=False):$/;"	f
att_to_numpy	espnet/nets/pytorch_backend/rnn/attentions.py	/^def att_to_numpy(att_ws, att):$/;"	f
att_to_numpy	espnet/nets/pytorch_backend/rnn/decoders.py	/^from espnet.nets.pytorch_backend.rnn.attentions import att_to_numpy$/;"	i
att_to_numpy	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^from espnet.nets.pytorch_backend.rnn.attentions import att_to_numpy$/;"	i
attention_add_arguments	espnet/nets/pytorch_backend/e2e_asr.py	/^    def attention_add_arguments(parser):$/;"	m	class:E2E
attention_add_arguments	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def attention_add_arguments(parser):$/;"	m	class:E2E
attention_add_arguments	espnet/nets/pytorch_backend/e2e_mt.py	/^    def attention_add_arguments(parser):$/;"	m	class:E2E
attention_add_arguments	espnet/nets/pytorch_backend/e2e_st.py	/^    def attention_add_arguments(parser):$/;"	m	class:E2E
attention_dim	test/test_transformer_decode.py	/^        attention_dim=adim,$/;"	v
attention_plot_class	espnet/nets/asr_interface.py	/^    def attention_plot_class(self):$/;"	m	class:ASRInterface
attention_plot_class	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def attention_plot_class(self):$/;"	m	class:E2E
attention_plot_class	espnet/nets/mt_interface.py	/^    def attention_plot_class(self):$/;"	m	class:MTInterface
attention_plot_class	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def attention_plot_class(self):$/;"	m	class:E2E
attention_plot_class	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^    def attention_plot_class(self):$/;"	m	class:E2E
attention_plot_class	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def attention_plot_class(self):$/;"	m	class:FeedForwardTransformer
attention_plot_class	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def attention_plot_class(self):$/;"	m	class:Transformer
attention_plot_class	espnet/nets/tts_interface.py	/^    def attention_plot_class(self):$/;"	m	class:TTSInterface
atype	test/test_beam_search.py	/^    atype="location",$/;"	v
atype	test/test_initialization.py	/^    atype="location",$/;"	v
author	doc/conf.py	/^author = u'Shinji Watanabe'$/;"	v
author	setup.py	/^      author='Shinji Watanabe',$/;"	v
author_email	setup.py	/^      author_email='shinjiw@ieee.org',$/;"	v
autoclass_content	doc/conf.py	/^autoclass_content = 'both'$/;"	v
awin	test/test_beam_search.py	/^    awin=5,$/;"	v
backward	espnet/nets/chainer_backend/deterministic_embed_id.py	/^    def backward(self, indexes, grad_outputs):$/;"	m	class:EmbedIDFunction
backward	espnet/nets/chainer_backend/deterministic_embed_id.py	/^    def backward(self, indexes, grads):$/;"	m	class:EmbedIDGrad
bad_utts	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^bad_utts = set()$/;"	v
bandpass_perturbation	espnet/transform/transformation.py	/^    bandpass_perturbation='espnet.transform.perturb:BandpassPerturbation',$/;"	v
base_plot_keys	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def base_plot_keys(self):$/;"	m	class:FeedForwardTransformer
base_plot_keys	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def base_plot_keys(self):$/;"	m	class:Tacotron2
base_plot_keys	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def base_plot_keys(self):$/;"	m	class:Transformer
base_plot_keys	espnet/nets/tts_interface.py	/^    def base_plot_keys(self):$/;"	m	class:TTSInterface
basename	espnet/nets/chainer_backend/transformer/plot.py	/^            from os.path import basename$/;"	i
basename	espnet/nets/pytorch_backend/transformer/plot.py	/^            from os.path import basename$/;"	i
basic_cleaners	egs/arctic/tts1/local/text/cleaners.py	/^def basic_cleaners(text):$/;"	f
basic_cleaners	egs/ljspeech/tts1/local/text/cleaners.py	/^def basic_cleaners(text):$/;"	f
basic_cleaners	egs/ljspeech/tts2/local/text/cleaners.py	/^def basic_cleaners(text):$/;"	f
basic_cleaners	egs/tweb/tts1/local/text/cleaners.py	/^def basic_cleaners(text):$/;"	f
batchfy_by_bin	espnet/utils/training/batchfy.py	/^def batchfy_by_bin(sorted_data, batch_bins, num_batches=0, min_batch_size=1, shortest_first=False,$/;"	f
batchfy_by_frame	espnet/utils/training/batchfy.py	/^def batchfy_by_frame(sorted_data, max_frames_in, max_frames_out, max_frames_inout,$/;"	f
batchfy_by_seq	espnet/utils/training/batchfy.py	/^def batchfy_by_seq(sorted_data, batch_size, max_length_in, max_length_out,$/;"	f
batchfy_shuffle	espnet/utils/training/batchfy.py	/^def batchfy_shuffle(data, batch_size, min_batch_size, num_batches, shortest_first):$/;"	f
beam_search	espnet/nets/beam_search.py	/^def beam_search(x: torch.Tensor, sos: int, eos: int, beam_size: int, vocab_size: int,$/;"	f
beam_search	test/test_lm.py	/^from espnet.nets.beam_search import beam_search$/;"	i
beam_size	test/test_beam_search.py	/^    beam_size=2,$/;"	v
beam_size	test/test_initialization.py	/^    beam_size=3,$/;"	v
blks	egs/hkust/asr1/local/hkust_segment.py	/^  blks = str.split(line)$/;"	v
buff_predict	espnet/nets/pytorch_backend/lm/default.py	/^    def buff_predict(self, state, x, n):$/;"	m	class:ClassifierWithState
build	docker/build.sh	/^build(){$/;"	f
build	espnet/nets/asr_interface.py	/^    def build(cls, idim: int, odim: int, **kwargs):$/;"	m	class:ASRInterface
build	espnet/nets/mt_interface.py	/^    def build(cls, idim: int, odim: int, **kwargs):$/;"	m	class:MTInterface
build_local	docker/build.sh	/^build_local(){$/;"	f
cache	test/test_transformer_decode.py	/^                        cache = None$/;"	v
cache	test/test_transformer_decode.py	/^                cache = new_cache$/;"	v
cache	test/test_transformer_decode.py	/^        cache = decoder.init_state()$/;"	v
calculate_all_attentions	espnet/nets/asr_interface.py	/^    def calculate_all_attentions(self, xs, ilens, ys):$/;"	m	class:ASRInterface
calculate_all_attentions	espnet/nets/chainer_backend/e2e_asr.py	/^    def calculate_all_attentions(self, xs, ilens, ys):$/;"	m	class:E2E
calculate_all_attentions	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def calculate_all_attentions(self, xs, ilens, ys):$/;"	m	class:E2E
calculate_all_attentions	espnet/nets/chainer_backend/rnn/decoders.py	/^    def calculate_all_attentions(self, hs, ys):$/;"	m	class:Decoder
calculate_all_attentions	espnet/nets/mt_interface.py	/^    def calculate_all_attentions(self, xs, ilens, ys):$/;"	m	class:MTInterface
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_asr.py	/^    def calculate_all_attentions(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def calculate_all_attentions(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def calculate_all_attentions(self, xs_pad_list, ilens_list, ys_pad):$/;"	m	class:E2E
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^    def calculate_all_attentions(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def calculate_all_attentions(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_mt.py	/^    def calculate_all_attentions(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_st.py	/^    def calculate_all_attentions(self, xs_pad, ilens, ys_pad, ys_pad_src):$/;"	m	class:E2E
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^    def calculate_all_attentions(self, xs_pad, ilens, ys_pad, ys_pad_src):$/;"	m	class:E2E
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def calculate_all_attentions(self, xs, ilens, ys, olens, spembs=None, *args, **kwargs):$/;"	m	class:FeedForwardTransformer
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def calculate_all_attentions(self, xs, ilens, ys, spembs=None, *args, **kwargs):$/;"	m	class:Tacotron2
calculate_all_attentions	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def calculate_all_attentions(self, xs, ilens, ys, olens,$/;"	m	class:Transformer
calculate_all_attentions	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def calculate_all_attentions(self, hs_pad, hlen, ys_pad, strm_idx=0, lang_ids=None):$/;"	m	class:Decoder
calculate_all_attentions	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def calculate_all_attentions(self, hs_pad, hlens, ys_pad):$/;"	m	class:DecoderRNNTAtt
calculate_all_attentions	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def calculate_all_attentions(self, hs, hlens, ys):$/;"	m	class:Decoder
calculate_all_attentions	espnet/nets/tts_interface.py	/^    def calculate_all_attentions(self, *args, **kwargs):$/;"	m	class:TTSInterface
calculate_attentions	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def calculate_attentions(self, xs, x_mask, ys_pad):$/;"	m	class:E2E
calculate_cer	espnet/nets/e2e_asr_common.py	/^    def calculate_cer(self, seqs_hat, seqs_true):$/;"	m	class:ErrorCalculator
calculate_cer_ctc	espnet/nets/e2e_asr_common.py	/^    def calculate_cer_ctc(self, ys_hat, ys_pad):$/;"	m	class:ErrorCalculator
calculate_wer	espnet/nets/e2e_asr_common.py	/^    def calculate_wer(self, seqs_hat, seqs_true):$/;"	m	class:ErrorCalculator
caught_signal	utils/queue-freegpu.pl	/^sub caught_signal {$/;"	s
chain	espnet/nets/beam_search.py	/^from itertools import chain$/;"	i
chainer	espnet/asr/asr_utils.py	/^import chainer$/;"	i
chainer	espnet/asr/chainer_backend/asr.py	/^import chainer$/;"	i
chainer	espnet/lm/chainer_backend/extlm.py	/^import chainer$/;"	i
chainer	espnet/lm/chainer_backend/extlm.py	/^import chainer.functions as F$/;"	i
chainer	espnet/lm/chainer_backend/lm.py	/^import chainer$/;"	i
chainer	espnet/lm/chainer_backend/lm.py	/^import chainer.functions as F$/;"	i
chainer	espnet/lm/chainer_backend/lm.py	/^import chainer.links as L$/;"	i
chainer	espnet/lm/lm_utils.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/asr_interface.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/ctc.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/ctc.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/ctc.py	/^import chainer.links as L$/;"	i
chainer	espnet/nets/chainer_backend/deterministic_embed_id.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/e2e_asr.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/nets_utils.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/rnn/attentions.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/rnn/attentions.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/rnn/attentions.py	/^import chainer.links as L$/;"	i
chainer	espnet/nets/chainer_backend/rnn/decoders.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/rnn/decoders.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/rnn/decoders.py	/^import chainer.links as L$/;"	i
chainer	espnet/nets/chainer_backend/rnn/encoders.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/rnn/encoders.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/rnn/encoders.py	/^import chainer.links as L$/;"	i
chainer	espnet/nets/chainer_backend/transformer/attention.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/transformer/attention.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/transformer/attention.py	/^import chainer.links as L$/;"	i
chainer	espnet/nets/chainer_backend/transformer/ctc.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/transformer/ctc.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/transformer/ctc.py	/^import chainer.links as L$/;"	i
chainer	espnet/nets/chainer_backend/transformer/decoder.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/transformer/decoder.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/transformer/decoder.py	/^import chainer.links as L$/;"	i
chainer	espnet/nets/chainer_backend/transformer/decoder_layer.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/transformer/decoder_layer.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/transformer/embedding.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/transformer/embedding.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/transformer/encoder.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/transformer/encoder_layer.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/transformer/encoder_layer.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/transformer/label_smoothing_loss.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/transformer/label_smoothing_loss.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/transformer/layer_norm.py	/^import chainer.links as L$/;"	i
chainer	espnet/nets/chainer_backend/transformer/positionwise_feed_forward.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/transformer/positionwise_feed_forward.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/transformer/positionwise_feed_forward.py	/^import chainer.links as L$/;"	i
chainer	espnet/nets/chainer_backend/transformer/subsampling.py	/^import chainer$/;"	i
chainer	espnet/nets/chainer_backend/transformer/subsampling.py	/^import chainer.functions as F$/;"	i
chainer	espnet/nets/chainer_backend/transformer/subsampling.py	/^import chainer.links as L$/;"	i
chainer	espnet/nets/pytorch_backend/e2e_asr.py	/^import chainer$/;"	i
chainer	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^import chainer$/;"	i
chainer	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^import chainer$/;"	i
chainer	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^import chainer$/;"	i
chainer	espnet/nets/pytorch_backend/e2e_mt.py	/^import chainer$/;"	i
chainer	espnet/nets/pytorch_backend/e2e_st.py	/^import chainer$/;"	i
chainer	espnet/nets/tts_interface.py	/^import chainer$/;"	i
chainer	espnet/tts/pytorch_backend/tts.py	/^import chainer$/;"	i
chainer	espnet/utils/deterministic_utils.py	/^import chainer$/;"	i
chainer	espnet/utils/training/iterators.py	/^import chainer$/;"	i
chainer	espnet/utils/training/train_utils.py	/^import chainer$/;"	i
chainer	test/test_e2e_asr.py	/^import chainer$/;"	i
chainer	test/test_e2e_asr_mulenc.py	/^import chainer$/;"	i
chainer	test/test_e2e_asr_transformer.py	/^import chainer$/;"	i
chainer	test/test_e2e_compatibility.py	/^import chainer$/;"	i
chainer	test/test_e2e_mt.py	/^import chainer$/;"	i
chainer	test/test_e2e_st.py	/^import chainer$/;"	i
chainer	test/test_lm.py	/^import chainer$/;"	i
chainer	test/test_loss.py	/^import chainer.functions as F$/;"	i
chainer	test/test_optimizer.py	/^import chainer$/;"	i
chainer	test/test_tensorboard.py	/^import chainer$/;"	i
chainer	tools/check_install.py	/^    import chainer$/;"	i
chainer_backend	espnet/asr/chainer_backend/asr.py	/^import espnet.lm.chainer_backend.extlm as extlm_chainer$/;"	i
chainer_backend	espnet/asr/chainer_backend/asr.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
chainer_backend	espnet/lm/chainer_backend/lm.py	/^import espnet.nets.chainer_backend.deterministic_embed_id as DL$/;"	i
chainer_backend	espnet/nets/chainer_backend/rnn/decoders.py	/^import espnet.nets.chainer_backend.deterministic_embed_id as DL$/;"	i
chainer_backend	test/test_e2e_asr.py	/^        import espnet.nets.chainer_backend.e2e_asr as m$/;"	i
chainer_backend	test/test_e2e_mt.py	/^        import espnet.nets.chainer_backend.e2e_mt as m$/;"	i
chainer_backend	test/test_initialization.py	/^    import espnet.nets.chainer_backend.e2e_asr as m$/;"	i
chainer_backend	test/test_lm.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
chainer_backend	test/test_recog.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
chainer_load	espnet/asr/asr_utils.py	/^def chainer_load(path, model):$/;"	f
chainer_load	espnet/asr/chainer_backend/asr.py	/^from espnet.asr.asr_utils import chainer_load$/;"	i
chainer_load	test/test_e2e_compatibility.py	/^from espnet.asr.asr_utils import chainer_load$/;"	i
channel_selector	espnet/transform/transformation.py	/^    channel_selector='espnet.transform.channel_selector:ChannelSelector')$/;"	v
char_list	egs/iwslt18/asr1/local/json2trn_reorder.py	/^    char_list = [entry.split(' ')[0] for entry in dictionary]$/;"	v
char_list	egs/iwslt18/mt1/local/json2trn_reorder.py	/^    char_list = [entry.split(' ')[0] for entry in dictionary]$/;"	v
char_list	egs/iwslt18/st1/local/json2trn_reorder.py	/^    char_list = [entry.split(' ')[0] for entry in dictionary]$/;"	v
char_list	test/test_initialization.py	/^    char_list=[u"あ", u"い", u"う", u"え", u"お"],$/;"	v
char_list	utils/json2text.py	/^    char_list = [entry.split(' ')[0] for entry in dictionary]$/;"	v
check_early_stop	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.training.train_utils import check_early_stop$/;"	i
check_early_stop	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.training.train_utils import check_early_stop$/;"	i
check_early_stop	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.utils.training.train_utils import check_early_stop$/;"	i
check_early_stop	espnet/lm/chainer_backend/lm.py	/^from espnet.utils.training.train_utils import check_early_stop$/;"	i
check_early_stop	espnet/lm/pytorch_backend/lm.py	/^from espnet.utils.training.train_utils import check_early_stop$/;"	i
check_early_stop	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.training.train_utils import check_early_stop$/;"	i
check_early_stop	espnet/st/pytorch_backend/st.py	/^from espnet.utils.training.train_utils import check_early_stop$/;"	i
check_early_stop	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.training.train_utils import check_early_stop$/;"	i
check_early_stop	espnet/utils/training/train_utils.py	/^def check_early_stop(trainer, epochs):$/;"	f
check_kwargs	espnet/transform/functional.py	/^from espnet.utils.check_kwargs import check_kwargs$/;"	i
check_kwargs	espnet/utils/check_kwargs.py	/^def check_kwargs(func, kwargs, name=None):$/;"	f
check_sorted	egs/fisher_callhome_spanish/mt1/local/divide_lang.sh	/^function check_sorted {$/;"	f
check_sorted	egs/fisher_callhome_spanish/st1/local/divide_lang.sh	/^function check_sorted {$/;"	f
check_type_forward	espnet/nets/chainer_backend/deterministic_embed_id.py	/^    def check_type_forward(self, in_types):$/;"	m	class:EmbedIDFunction
checkempty	egs/csj/asr1/local/csj_make_trans/csj2kaldi4m.pl	/^sub checkempty{$/;"	s
choices	egs/chime5/asr1/local/json2text.py	/^                        choices=['ref', 'worn', 'u01', 'u02', 'u03', 'u04', 'u05', 'u06'],$/;"	v
choices	egs/jnas/asr1/local/clean_text.py	/^                        choices=["char", "phn"],$/;"	v
choices	egs/jnas/tts1/local/clean_text.py	/^                        choices=["char", "phn"],$/;"	v
choices	egs/jsut/tts1/local/clean_text.py	/^                        choices=["char", "phn"],$/;"	v
choices	egs/jvs/tts1/local/clean_text.py	/^                        choices=["char", "phn"],$/;"	v
choices	egs/ljspeech/tts1/local/clean_text.py	/^                        choices=["char", "phn"],$/;"	v
choices	egs/ljspeech/tts2/local/clean_text.py	/^                        choices=["char", "phn"],$/;"	v
classifiers	setup.py	/^      classifiers=[$/;"	v
clean	egs/libri_trans/asr1/local/data_prep.sh	/^function clean-dash {$/;"	f
clean	egs/libri_trans/asr1/local/data_prep.sh	/^function clean-quotes {$/;"	f
clean	egs/libri_trans/mt1/local/data_prep.sh	/^function clean-dash {$/;"	f
clean	egs/libri_trans/mt1/local/data_prep.sh	/^function clean-quotes {$/;"	f
clean	egs/libri_trans/st1/local/data_prep.sh	/^function clean-dash {$/;"	f
clean	egs/libri_trans/st1/local/data_prep.sh	/^function clean-quotes {$/;"	f
clean_content	egs/arctic/tts1/local/clean_text.py	/^            clean_content = custom_english_cleaners(content.rstrip())$/;"	v
clean_content	egs/jnas/asr1/local/clean_text.py	/^            clean_content = g2p(content, args.trans_type)$/;"	v
clean_content	egs/jnas/tts1/local/clean_text.py	/^            clean_content = g2p(content, args.trans_type)$/;"	v
clean_content	egs/jsut/tts1/local/clean_text.py	/^            clean_content = g2p(content, args.trans_type)$/;"	v
clean_content	egs/jvs/tts1/local/clean_text.py	/^            clean_content = g2p(content, args.trans_type)$/;"	v
clean_content	egs/ljspeech/tts1/local/clean_text.py	/^                clean_content = g2p(text)$/;"	v
clean_content	egs/ljspeech/tts1/local/clean_text.py	/^            clean_content = custom_english_cleaners(content.rstrip())$/;"	v
clean_content	egs/ljspeech/tts2/local/clean_text.py	/^                clean_content = g2p(text)$/;"	v
clean_content	egs/ljspeech/tts2/local/clean_text.py	/^            clean_content = custom_english_cleaners(content.rstrip())$/;"	v
clean_content	egs/tweb/tts1/local/clean_text.py	/^            clean_content = custom_english_cleaners(content.rstrip())$/;"	v
clean_content	egs/vais1000/tts1/local/clean_text.py	/^            clean_content = vietnamese_cleaner(content)$/;"	v
cleaners	egs/arctic/tts1/local/text/__init__.py	/^from text import cleaners$/;"	i
cleaners	egs/ljspeech/tts1/local/text/__init__.py	/^from text import cleaners$/;"	i
cleaners	egs/ljspeech/tts2/local/text/__init__.py	/^from text import cleaners$/;"	i
cleaners	egs/tweb/tts1/local/text/__init__.py	/^from text import cleaners$/;"	i
close	espnet/utils/cli_writers.py	/^    def close(self):$/;"	m	class:BaseWriter
close	espnet/utils/io_utils.py	/^    def close(self):$/;"	m	class:SoundHDF5File
cmd	doc/argparse2rst.py	/^    cmd = m.path.name$/;"	v
cmd_usage	docker/build.sh	/^cmd_usage() {$/;"	f
cmudict	egs/arctic/tts1/local/text/symbols.py	/^from text import cmudict$/;"	i
cmudict	egs/ljspeech/tts1/local/text/symbols.py	/^from text import cmudict$/;"	i
cmudict	egs/ljspeech/tts2/local/text/symbols.py	/^from text import cmudict$/;"	i
cmudict	egs/tweb/tts1/local/text/symbols.py	/^from text import cmudict$/;"	i
cmvn	espnet/transform/transformation.py	/^    cmvn='espnet.transform.cmvn:CMVN',$/;"	v
cname	doc/module2rst.py	/^        cname = to_module(cpath)$/;"	v
codecs	egs/arctic/tts1/local/clean_text.py	/^import codecs$/;"	i
codecs	egs/commonvoice/asr1/local/filter_text.py	/^import codecs$/;"	i
codecs	egs/csj/asr1/local/csj_rm_tag.py	/^import codecs$/;"	i
codecs	egs/fisher_callhome_spanish/mt1/local/concat_short_utt.py	/^import codecs$/;"	i
codecs	egs/fisher_callhome_spanish/st1/local/concat_short_utt.py	/^import codecs$/;"	i
codecs	egs/iwslt18/asr1/local/ctm2segments.py	/^import codecs$/;"	i
codecs	egs/iwslt18/asr1/local/json2trn_reorder.py	/^import codecs$/;"	i
codecs	egs/iwslt18/asr1/local/parse_xml.py	/^import codecs$/;"	i
codecs	egs/iwslt18/asr1/local/reorder_text.py	/^import codecs$/;"	i
codecs	egs/iwslt18/mt1/local/ctm2segments.py	/^import codecs$/;"	i
codecs	egs/iwslt18/mt1/local/json2trn_reorder.py	/^import codecs$/;"	i
codecs	egs/iwslt18/mt1/local/parse_xml.py	/^import codecs$/;"	i
codecs	egs/iwslt18/mt1/local/reorder_text.py	/^import codecs$/;"	i
codecs	egs/iwslt18/st1/local/ctm2segments.py	/^import codecs$/;"	i
codecs	egs/iwslt18/st1/local/json2trn_reorder.py	/^import codecs$/;"	i
codecs	egs/iwslt18/st1/local/parse_xml.py	/^import codecs$/;"	i
codecs	egs/iwslt18/st1/local/reorder_text.py	/^import codecs$/;"	i
codecs	egs/jnas/asr1/local/clean_text.py	/^import codecs$/;"	i
codecs	egs/jnas/asr1/local/filter_text.py	/^import codecs$/;"	i
codecs	egs/jnas/tts1/local/clean_text.py	/^import codecs$/;"	i
codecs	egs/jnas/tts1/local/filter_text.py	/^import codecs$/;"	i
codecs	egs/jsut/tts1/local/clean_text.py	/^import codecs$/;"	i
codecs	egs/jvs/tts1/local/clean_text.py	/^import codecs$/;"	i
codecs	egs/libri_trans/asr1/local/concat_json_multiref.py	/^import codecs$/;"	i
codecs	egs/libri_trans/mt1/local/concat_json_multiref.py	/^import codecs$/;"	i
codecs	egs/libri_trans/st1/local/concat_json_multiref.py	/^import codecs$/;"	i
codecs	egs/ljspeech/tts1/local/clean_text.py	/^import codecs$/;"	i
codecs	egs/ljspeech/tts2/local/clean_text.py	/^import codecs$/;"	i
codecs	egs/m_ailabs/tts1/local/parse_text.py	/^import codecs$/;"	i
codecs	egs/reverb/asr1_multich/local/filterjson.py	/^import codecs$/;"	i
codecs	egs/tweb/tts1/local/clean_text.py	/^import codecs$/;"	i
codecs	egs/vais1000/tts1/local/clean_text.py	/^import codecs$/;"	i
codecs	egs/vais1000/tts1/local/text/vietnameseNormUniStd.py	/^import codecs$/;"	i
codecs	egs/voxforge/asr1/local/filter_text.py	/^import codecs$/;"	i
codecs	egs/wsj_mix/asr1/local/merge_scp2json.py	/^import codecs$/;"	i
codecs	egs/wsj_mix/asr1/local/mergejson.py	/^import codecs$/;"	i
codecs	utils/addjson.py	/^import codecs$/;"	i
codecs	utils/concatjson.py	/^import codecs$/;"	i
codecs	utils/eval_perm_free_error.py	/^import codecs$/;"	i
codecs	utils/filt.py	/^import codecs$/;"	i
codecs	utils/json2text.py	/^import codecs$/;"	i
codecs	utils/json2trn.py	/^import codecs$/;"	i
codecs	utils/json2trn_mt.py	/^import codecs$/;"	i
codecs	utils/json2trn_wo_dict.py	/^import codecs$/;"	i
codecs	utils/merge_scp2json.py	/^import codecs$/;"	i
codecs	utils/mergejson.py	/^import codecs$/;"	i
codecs	utils/result2json.py	/^import codecs$/;"	i
codecs	utils/scp2json.py	/^import codecs$/;"	i
codecs	utils/splitjson.py	/^import codecs$/;"	i
codecs	utils/text2token.py	/^import codecs$/;"	i
codecs	utils/text2vocabulary.py	/^import codecs$/;"	i
codecs	utils/trim_silence.py	/^import codecs$/;"	i
codecs	utils/trn2ctm.py	/^import codecs$/;"	i
codecs	utils/trn2stm.py	/^import codecs$/;"	i
collapse_whitespace	egs/arctic/tts1/local/text/cleaners.py	/^def collapse_whitespace(text):$/;"	f
collapse_whitespace	egs/ljspeech/tts1/local/text/cleaners.py	/^def collapse_whitespace(text):$/;"	f
collapse_whitespace	egs/ljspeech/tts2/local/text/cleaners.py	/^def collapse_whitespace(text):$/;"	f
collapse_whitespace	egs/tweb/tts1/local/text/cleaners.py	/^def collapse_whitespace(text):$/;"	f
collections	espnet/nets/chainer_backend/rnn/training.py	/^import collections$/;"	i
collections	espnet/nets/chainer_backend/transformer/training.py	/^import collections$/;"	i
comp	egs/fisher_callhome_spanish/asr1/local/callhome_make_spk2gender.py	/^    comp = line.split(' ')$/;"	v
comp	egs/fisher_callhome_spanish/asr1/local/fsp_make_spk2gender.py	/^    comp = line.split(' ')$/;"	v
comp	egs/fisher_callhome_spanish/mt1/local/callhome_make_spk2gender.py	/^    comp = line.split(' ')$/;"	v
comp	egs/fisher_callhome_spanish/mt1/local/fsp_make_spk2gender.py	/^    comp = line.split(' ')$/;"	v
comp	egs/fisher_callhome_spanish/st1/local/callhome_make_spk2gender.py	/^    comp = line.split(' ')$/;"	v
comp	egs/fisher_callhome_spanish/st1/local/fsp_make_spk2gender.py	/^    comp = line.split(' ')$/;"	v
compare_vp	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^def compare_vp(voice_part_old, voice_part_new):$/;"	f
compute_perplexity	espnet/lm/chainer_backend/lm.py	/^from espnet.lm.lm_utils import compute_perplexity$/;"	i
compute_perplexity	espnet/lm/lm_utils.py	/^def compute_perplexity(result):$/;"	f
compute_perplexity	espnet/lm/pytorch_backend/lm.py	/^def compute_perplexity(result):$/;"	f
concat	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                            concat = sum($/;"	v
concat	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                        concat = sum(input_infos + output_infos + infos, [])$/;"	v
concat	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        concat = sum(input_lines + output_lines + lines, [])$/;"	v
concat	utils/merge_scp2json.py	/^                            concat = sum($/;"	v
concat	utils/merge_scp2json.py	/^                        concat = sum(input_infos + output_infos + infos, [])$/;"	v
concat	utils/merge_scp2json.py	/^        concat = sum(input_lines + output_lines + lines, [])$/;"	v
concat_examples	espnet/lm/pytorch_backend/lm.py	/^def concat_examples(batch, device=None, padding=None):$/;"	f
config_file_parser_class	doc/module2rst.py	/^    config_file_parser_class=configargparse.YAMLConfigFileParser,$/;"	v
configargparse	doc/argparse2rst.py	/^import configargparse$/;"	i
configargparse	doc/module2rst.py	/^import configargparse$/;"	i
configargparse	espnet/bin/asr_enhance.py	/^import configargparse$/;"	i
configargparse	espnet/bin/asr_recog.py	/^import configargparse$/;"	i
configargparse	espnet/bin/asr_train.py	/^import configargparse$/;"	i
configargparse	espnet/bin/lm_train.py	/^import configargparse$/;"	i
configargparse	espnet/bin/mt_train.py	/^import configargparse$/;"	i
configargparse	espnet/bin/mt_trans.py	/^import configargparse$/;"	i
configargparse	espnet/bin/st_train.py	/^import configargparse$/;"	i
configargparse	espnet/bin/st_trans.py	/^import configargparse$/;"	i
configargparse	espnet/bin/tts_decode.py	/^import configargparse$/;"	i
configargparse	espnet/bin/tts_train.py	/^import configargparse$/;"	i
content	egs/arctic/tts1/local/clean_text.py	/^            content = " ".join(line[1:])$/;"	v
content	egs/jnas/asr1/local/clean_text.py	/^            content = "".join(line.split(" ")[1:])$/;"	v
content	egs/jnas/tts1/local/clean_text.py	/^            content = "".join(line.split(" ")[1:])$/;"	v
content	egs/tweb/tts1/local/clean_text.py	/^            content = " ".join(line[1:])$/;"	v
context_residual	test/test_beam_search.py	/^    context_residual=False,$/;"	v
context_residual	test/test_initialization.py	/^    context_residual=False,$/;"	v
contextlib	utils/spm_encode	/^import contextlib$/;"	i
convert	espnet/lm/chainer_backend/lm.py	/^from chainer.dataset import convert$/;"	i
convert	espnet/lm/pytorch_backend/lm.py	/^from chainer.dataset import convert$/;"	i
convert	utils/json2trn.py	/^def convert(jsonf, dic, refs, hyps, num_spkrs=1):$/;"	f
convert	utils/json2trn_mt.py	/^def convert(jsonf, dic, refs, hyps, srcs, dic_src):$/;"	f
convert	utils/json2trn_wo_dict.py	/^def convert(jsonf, refs, hyps, num_spkrs=1):$/;"	f
convert	utils/trn2ctm.py	/^def convert(trn=None, ctm=None):$/;"	f
convert	utils/trn2stm.py	/^def convert(trn=None, stm=None, orig_stm=None):$/;"	f
convert_batch	test/test_e2e_asr.py	/^def convert_batch(batch, backend="pytorch", is_cuda=False, idim=40, odim=5):$/;"	f
convert_batch	test/test_e2e_asr_mulenc.py	/^def convert_batch(batch, backend="pytorch", is_cuda=False, idim=40, odim=5, num_inputs=2):$/;"	f
convert_batch	test/test_e2e_mt.py	/^def convert_batch(batch, backend="pytorch", is_cuda=False, idim=5, odim=5):$/;"	f
convert_batch	test/test_e2e_st.py	/^def convert_batch(batch, backend="pytorch", is_cuda=False, idim=40, odim=5):$/;"	f
convert_score	utils/eval_perm_free_error.py	/^def convert_score(keys, dic):$/;"	f
convert_to_ascii	egs/arctic/tts1/local/text/cleaners.py	/^def convert_to_ascii(text):$/;"	f
convert_to_ascii	egs/ljspeech/tts1/local/text/cleaners.py	/^def convert_to_ascii(text):$/;"	f
convert_to_ascii	egs/ljspeech/tts2/local/text/cleaners.py	/^def convert_to_ascii(text):$/;"	f
convert_to_ascii	egs/tweb/tts1/local/text/cleaners.py	/^def convert_to_ascii(text):$/;"	f
convert_to_char	espnet/nets/e2e_asr_common.py	/^    def convert_to_char(self, ys_hat, ys_pad):$/;"	m	class:ErrorCalculator
copy	espnet/asr/asr_mix_utils.py	/^import copy$/;"	i
copy	espnet/asr/asr_utils.py	/^import copy$/;"	i
copy	espnet/asr/pytorch_backend/asr.py	/^import copy$/;"	i
copy	espnet/lm/chainer_backend/lm.py	/^import copy$/;"	i
copy	espnet/lm/pytorch_backend/lm.py	/^import copy$/;"	i
copy	espnet/nets/pytorch_backend/e2e_st.py	/^import copy$/;"	i
copy	espnet/st/pytorch_backend/st.py	/^import copy$/;"	i
copy	espnet/transform/transformation.py	/^import copy$/;"	i
copy	espnet/tts/pytorch_backend/tts.py	/^import copy$/;"	i
copy	test/test_e2e_asr.py	/^        import copy$/;"	i
copyright	doc/conf.py	/^copyright = u'2017, Shinji Watanabe'$/;"	v
count	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        count = 0$/;"	v
count	utils/merge_scp2json.py	/^        count = 0$/;"	v
count_tokens	espnet/lm/chainer_backend/lm.py	/^from espnet.lm.lm_utils import count_tokens$/;"	i
count_tokens	espnet/lm/lm_utils.py	/^def count_tokens(data, unk_id=None):$/;"	f
count_tokens	espnet/lm/pytorch_backend/lm.py	/^from espnet.lm.lm_utils import count_tokens$/;"	i
counts	utils/text2vocabulary.py	/^    counts = {}$/;"	v
create_dataset	espnet/utils/io_utils.py	/^    def create_dataset(self, name, shape=None, data=None, **kwds):$/;"	m	class:SoundHDF5File
create_dense_flows	espnet/utils/spec_augment.py	/^def create_dense_flows(flattened_flows, batch_size, image_height, image_width):$/;"	f
create_folder_str	egs/dirha_wsj/asr1/local/tools/create_folder_str.m	/^function create_folder_str(folder_old,folder_new)$/;"	f
create_vp	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^def create_vp(voice_part_old, voice_part_tmp):$/;"	f
cross_squared_distance_matrix	espnet/utils/spec_augment.py	/^def cross_squared_distance_matrix(x, y):$/;"	f
csep	doc/module2rst.py	/^        csep = "-" * len(cname)$/;"	v
csv	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^import csv$/;"	i
csv	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^import csv$/;"	i
ctc	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from espnet.nets.chainer_backend.transformer import ctc$/;"	i
ctc_add_arguments	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def ctc_add_arguments(parser):$/;"	m	class:E2E
ctc_for	espnet/nets/chainer_backend/ctc.py	/^def ctc_for(args, odim):$/;"	f
ctc_for	espnet/nets/chainer_backend/e2e_asr.py	/^from espnet.nets.chainer_backend.ctc import ctc_for$/;"	i
ctc_for	espnet/nets/pytorch_backend/ctc.py	/^def ctc_for(args, odim, reduce=True):$/;"	f
ctc_for	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.pytorch_backend.ctc import ctc_for$/;"	i
ctc_for	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.ctc import ctc_for$/;"	i
ctc_for	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.nets.pytorch_backend.ctc import ctc_for$/;"	i
ctc_mapping	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def ctc_mapping(self, x, blank=0):$/;"	m	class:E2E
ctc_type	test/test_beam_search.py	/^    ctc_type="warpctc",$/;"	v
ctc_type	test/test_initialization.py	/^    ctc_type="warpctc",$/;"	v
ctc_weight	test/test_beam_search.py	/^    ctc_weight=0.2,$/;"	v
ctc_weight	test/test_initialization.py	/^    ctc_weight=0.2,$/;"	v
ctrl_c	docker/run.sh	/^function ctrl_c() {$/;"	f
cuda	espnet/nets/chainer_backend/ctc.py	/^from chainer import cuda$/;"	i
cuda	espnet/nets/chainer_backend/deterministic_embed_id.py	/^from chainer import cuda$/;"	i
cuda	espnet/nets/chainer_backend/rnn/encoders.py	/^from chainer import cuda$/;"	i
cuda	espnet/nets/chainer_backend/rnn/training.py	/^from chainer import cuda$/;"	i
cuda	espnet/nets/chainer_backend/transformer/training.py	/^from chainer import cuda$/;"	i
cupy	test/test_e2e_asr.py	/^        import cupy$/;"	i
custom_converter	espnet/nets/chainer_backend/asr_interface.py	/^    def custom_converter(*args, **kw):$/;"	m	class:ChainerASRInterface
custom_converter	espnet/nets/chainer_backend/e2e_asr.py	/^    def custom_converter(subsampling_factor=0):$/;"	m	class:E2E
custom_converter	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def custom_converter(subsampling_factor=0):$/;"	m	class:E2E
custom_english_cleaners	egs/arctic/tts1/local/clean_text.py	/^from text.cleaners import custom_english_cleaners$/;"	i
custom_english_cleaners	egs/arctic/tts1/local/text/cleaners.py	/^def custom_english_cleaners(text):$/;"	f
custom_english_cleaners	egs/ljspeech/tts1/local/clean_text.py	/^from text.cleaners import custom_english_cleaners$/;"	i
custom_english_cleaners	egs/ljspeech/tts1/local/text/cleaners.py	/^def custom_english_cleaners(text):$/;"	f
custom_english_cleaners	egs/ljspeech/tts2/local/clean_text.py	/^from text.cleaners import custom_english_cleaners$/;"	i
custom_english_cleaners	egs/ljspeech/tts2/local/text/cleaners.py	/^def custom_english_cleaners(text):$/;"	f
custom_english_cleaners	egs/tweb/tts1/local/clean_text.py	/^from text.cleaners import custom_english_cleaners$/;"	i
custom_english_cleaners	egs/tweb/tts1/local/text/cleaners.py	/^def custom_english_cleaners(text):$/;"	f
custom_parallel_updater	espnet/nets/chainer_backend/asr_interface.py	/^    def custom_parallel_updater(*args, **kw):$/;"	m	class:ChainerASRInterface
custom_parallel_updater	espnet/nets/chainer_backend/e2e_asr.py	/^    def custom_parallel_updater(iters, optimizer, converter, devices, accum_grad=1):$/;"	m	class:E2E
custom_parallel_updater	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def custom_parallel_updater(iters, optimizer, converter, devices, accum_grad=1):$/;"	m	class:E2E
custom_updater	espnet/nets/chainer_backend/asr_interface.py	/^    def custom_updater(*args, **kw):$/;"	m	class:ChainerASRInterface
custom_updater	espnet/nets/chainer_backend/e2e_asr.py	/^    def custom_updater(iters, optimizer, converter, device=-1, accum_grad=1):$/;"	m	class:E2E
custom_updater	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def custom_updater(iters, optimizer, converter, device=-1, accum_grad=1):$/;"	m	class:E2E
d	doc/argparse2rst.py	/^    d = m.module.get_parser().description$/;"	v
d	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                    d = {'name': 'input{}'.format(idx)}$/;"	v
d	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                    d = {'name': 'target{}'.format(idx)}$/;"	v
d	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                    d = {}$/;"	v
d	utils/merge_scp2json.py	/^                    d = {'name': 'input{}'.format(idx)}$/;"	v
d	utils/merge_scp2json.py	/^                    d = {'name': 'target{}'.format(idx)}$/;"	v
d	utils/merge_scp2json.py	/^                    d = {}$/;"	v
data	espnet/utils/dataset.py	/^import torch.utils.data$/;"	i
data_parallel	espnet/asr/pytorch_backend/asr.py	/^from torch.nn.parallel import data_parallel$/;"	i
data_parallel	espnet/lm/pytorch_backend/lm.py	/^from torch.nn.parallel import data_parallel$/;"	i
datatype	espnet/nets/pytorch_backend/transformer/mask.py	/^datatype = torch.bool if is_torch_1_2_plus else torch.uint8$/;"	v
datetime	egs/vais1000/tts1/local/text/regex_tokenize.py	/^datetime = [$/;"	v
decode	espnet/bin/tts_decode.py	/^        from espnet.tts.pytorch_backend.tts import decode$/;"	i
decode	espnet/tts/pytorch_backend/tts.py	/^def decode(args):$/;"	f
decode	utils/spm_decode	/^        def decode(l):$/;"	f	function:main
decode_mu_law	espnet/nets/pytorch_backend/wavenet.py	/^def decode_mu_law(y, mu=256):$/;"	f
decode_mu_law	utils/generate_wav_from_fbank.py	/^from espnet.nets.pytorch_backend.wavenet import decode_mu_law$/;"	i
decode_with_attention_offline	espnet/nets/pytorch_backend/streaming/window.py	/^    def decode_with_attention_offline(self):$/;"	m	class:WindowStreamingE2E
decoder	test/test_transformer_decode.py	/^    decoder = Decoder($/;"	v
decoder_add_arguments	espnet/nets/pytorch_backend/e2e_asr.py	/^    def decoder_add_arguments(parser):$/;"	m	class:E2E
decoder_add_arguments	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def decoder_add_arguments(parser):$/;"	m	class:E2E
decoder_add_arguments	espnet/nets/pytorch_backend/e2e_mt.py	/^    def decoder_add_arguments(parser):$/;"	m	class:E2E
decoder_add_arguments	espnet/nets/pytorch_backend/e2e_st.py	/^    def decoder_add_arguments(parser):$/;"	m	class:E2E
decoder_for	espnet/nets/chainer_backend/e2e_asr.py	/^from espnet.nets.chainer_backend.rnn.decoders import decoder_for$/;"	i
decoder_for	espnet/nets/chainer_backend/rnn/decoders.py	/^def decoder_for(args, odim, sos, eos, att, labeldist):$/;"	f
decoder_for	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.pytorch_backend.rnn.decoders import decoder_for$/;"	i
decoder_for	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.rnn.decoders import decoder_for$/;"	i
decoder_for	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.nets.pytorch_backend.rnn.decoders import decoder_for$/;"	i
decoder_for	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^from espnet.nets.pytorch_backend.rnn.decoders_transducer import decoder_for$/;"	i
decoder_for	espnet/nets/pytorch_backend/e2e_mt.py	/^from espnet.nets.pytorch_backend.rnn.decoders import decoder_for$/;"	i
decoder_for	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.pytorch_backend.rnn.decoders import decoder_for$/;"	i
decoder_for	espnet/nets/pytorch_backend/rnn/decoders.py	/^def decoder_for(args, odim, sos, eos, att, labeldist):$/;"	f
decoder_for	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^def decoder_for(args, odim, att=None, blank=0):$/;"	f
decoder_init	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^def decoder_init(m):$/;"	f
decompress	utils/download_from_google_drive.sh	/^decompress () {$/;"	f
default	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                        default=sys.stdout,$/;"	v
default_name	espnet/utils/training/tensorboard_logger.py	/^    default_name = "espnet_tensorboard_logger"$/;"	v	class:TensorboardLogger
default_params	espnet/transform/functional.py	/^    def default_params(cls):$/;"	m	class:FuncTrans
defaultdict	test/test_tensorboard.py	/^from collections import defaultdict$/;"	i
delay	egs/reverb/asr1/local/run_wpe.py	/^delay = 3$/;"	v
delay	egs/reverb/asr1_multich/local/run_wpe.py	/^delay = 3$/;"	v
delta	espnet/transform/add_deltas.py	/^def delta(feat, window):$/;"	f
delta	espnet/transform/transformation.py	/^    delta='espnet.transform.add_deltas:AddDeltas',$/;"	v
dense_image_warp	espnet/utils/spec_augment.py	/^def dense_image_warp(image, flow):$/;"	f
description	doc/module2rst.py	/^    description='generate RST files from <root> module recursively into <dst>\/_gen',$/;"	v
description	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        description='Given each file paths with such format as '$/;"	v
description	setup.py	/^      description='ESPnet: end-to-end speech processing toolkit',$/;"	v
dev_size	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^dev_size = min(int(len(subsets['train']['all']) * 0.1), len(subsets['test']['all']))$/;"	v
dic	egs/iwslt18/asr1/local/reorder_text.py	/^    dic = {}$/;"	v
dic	egs/iwslt18/mt1/local/reorder_text.py	/^    dic = {}$/;"	v
dic	egs/iwslt18/st1/local/reorder_text.py	/^    dic = {}$/;"	v
dic	egs/wsj_mix/asr1/local/mergejson.py	/^        dic = old_dic[id]$/;"	v
dic	utils/mergejson.py	/^                dic = {k2: v for j in js for k2, v in j['utts'][k].items()}$/;"	v
dict_acronym	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^dict_acronym = {}$/;"	v
dict_acronym	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^dict_acronym = {}$/;"	v
dict_acronym_noi	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^dict_acronym_noi = {} # Mapping of acronyms without I, i$/;"	v
dict_acronym_noi	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^dict_acronym_noi = {} # Mapping of acronyms without I, i$/;"	v
dict_letter	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^dict_letter = {}$/;"	v
dict_letter	egs/swbd/asr1/local/format_acronyms_dict.py	/^dict_letter = {}$/;"	v
dictionary	egs/iwslt18/asr1/local/json2trn_reorder.py	/^        dictionary = f.readlines()$/;"	v
dictionary	egs/iwslt18/mt1/local/json2trn_reorder.py	/^        dictionary = f.readlines()$/;"	v
dictionary	egs/iwslt18/st1/local/json2trn_reorder.py	/^        dictionary = f.readlines()$/;"	v
dictionary	utils/json2text.py	/^        dictionary = f.readlines()$/;"	v
digit	egs/vais1000/tts1/local/text/regex_tokenize.py	/^digit = r"\\d+([\\.,_]\\d+)+"$/;"	v
dirname	setup.py	/^dirname = os.path.dirname(__file__)$/;"	v
dirname	utils/splitjson.py	/^    dirname = '{}\/split{}utt'.format(dirname, args.parts)$/;"	v
dirname	utils/splitjson.py	/^    dirname = os.path.dirname(args.json)$/;"	v
dist_strtobool	espnet/utils/cli_utils.py	/^from distutils.util import strtobool as dist_strtobool$/;"	i
division	egs/iwslt18/asr1/local/ctm2segments.py	/^from __future__ import division$/;"	i
division	egs/iwslt18/mt1/local/ctm2segments.py	/^from __future__ import division$/;"	i
division	egs/iwslt18/st1/local/ctm2segments.py	/^from __future__ import division$/;"	i
division	espnet/asr/chainer_backend/asr.py	/^from __future__ import division$/;"	i
division	espnet/lm/chainer_backend/extlm.py	/^from __future__ import division$/;"	i
division	espnet/lm/chainer_backend/lm.py	/^from __future__ import division$/;"	i
division	espnet/lm/pytorch_backend/extlm.py	/^from __future__ import division$/;"	i
division	espnet/nets/chainer_backend/rnn/training.py	/^from __future__ import division$/;"	i
division	espnet/nets/chainer_backend/transformer/training.py	/^from __future__ import division$/;"	i
division	espnet/nets/pytorch_backend/e2e_asr.py	/^from __future__ import division$/;"	i
division	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from __future__ import division$/;"	i
division	espnet/nets/pytorch_backend/e2e_mt.py	/^from __future__ import division$/;"	i
division	espnet/nets/pytorch_backend/e2e_st.py	/^from __future__ import division$/;"	i
division	test/test_e2e_asr.py	/^from __future__ import division$/;"	i
division	test/test_e2e_asr_mulenc.py	/^from __future__ import division$/;"	i
division	test/test_e2e_mt.py	/^from __future__ import division$/;"	i
division	test/test_e2e_st.py	/^from __future__ import division$/;"	i
division	test/test_e2e_tts_tacotron2.py	/^from __future__ import division$/;"	i
division	utils/splitjson.py	/^from __future__ import division$/;"	i
division	utils/spm_decode	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
division	utils/spm_encode	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
division	utils/trim_silence.py	/^from __future__ import division$/;"	i
dlayer	test/test_transformer_decode.py	/^    dlayer = decoder.decoders[0]$/;"	v
dlayers	test/test_beam_search.py	/^    dlayers=1,$/;"	v
dlayers	test/test_beam_search.py	/^    dlayers=2,$/;"	v
dlayers	test/test_initialization.py	/^    dlayers=2,$/;"	v
do_filtering	utils/reduce_data_dir.sh	/^function do_filtering {$/;"	f
download_models	utils/recog_wav.sh	/^function download_models () {$/;"	f
download_models	utils/synth_wav.sh	/^function download_models () {$/;"	f
download_vocoder_models	utils/synth_wav.sh	/^function download_vocoder_models () {$/;"	f
download_zip_from_google_drive	test/test_e2e_compatibility.py	/^def download_zip_from_google_drive(download_dir, file_id):$/;"	f
draw_attention_plot	espnet/asr/asr_mix_utils.py	/^    def draw_attention_plot(self, att_w):$/;"	m	class:PlotAttentionReport
draw_attention_plot	espnet/asr/asr_utils.py	/^    def draw_attention_plot(self, att_w):$/;"	m	class:PlotAttentionReport
draw_han_plot	espnet/asr/asr_utils.py	/^    def draw_han_plot(self, att_w):$/;"	m	class:PlotAttentionReport
dropout_rate	test/test_beam_search.py	/^    dropout_rate=0.0,$/;"	v
dropout_rate	test/test_initialization.py	/^    dropout_rate=0.0,$/;"	v
dropout_rate	test/test_transformer_decode.py	/^        dropout_rate=0.0)$/;"	v
dropout_rate_decoder	test/test_beam_search.py	/^    dropout_rate_decoder=0.0,$/;"	v
dropout_rate_decoder	test/test_initialization.py	/^    dropout_rate_decoder=0.0,$/;"	v
dst	doc/module2rst.py	/^    dst = f"{gendir}\/{fname}"$/;"	v
dtype	test/test_beam_search.py	/^    dtype="lstm",$/;"	v
dtype	test/test_initialization.py	/^    dtype="lstm",$/;"	v
dunits	test/test_beam_search.py	/^    dunits=16,$/;"	v
dunits	test/test_initialization.py	/^    dunits=300,$/;"	v
dur	test/test_transformer_decode.py	/^            dur = (time() - start) \/ n_avg$/;"	v
dynamic_import	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/asr/pytorch_backend/asr_init.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/bin/asr_train.py	/^    from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/bin/mt_train.py	/^    from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/bin/st_train.py	/^    from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/bin/tts_train.py	/^    from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/nets/asr_interface.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/nets/lm_interface.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/nets/st_interface.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/st/pytorch_backend/st.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/transform/transformation.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
dynamic_import	espnet/utils/dynamic_import.py	/^def dynamic_import(import_path, alias=dict()):$/;"	f
dynamic_import_asr	espnet/nets/asr_interface.py	/^def dynamic_import_asr(module, backend):$/;"	f
dynamic_import_asr	test/test_asr_interface.py	/^from espnet.nets.asr_interface import dynamic_import_asr$/;"	i
dynamic_import_asr	test/test_beam_search.py	/^from espnet.nets.asr_interface import dynamic_import_asr$/;"	i
dynamic_import_asr	test/test_train_dtype.py	/^from espnet.nets.asr_interface import dynamic_import_asr$/;"	i
dynamic_import_lm	espnet/asr/pytorch_backend/recog.py	/^from espnet.nets.lm_interface import dynamic_import_lm$/;"	i
dynamic_import_lm	espnet/bin/lm_train.py	/^from espnet.nets.lm_interface import dynamic_import_lm$/;"	i
dynamic_import_lm	espnet/lm/pytorch_backend/lm.py	/^from espnet.nets.lm_interface import dynamic_import_lm$/;"	i
dynamic_import_lm	espnet/nets/lm_interface.py	/^def dynamic_import_lm(module, backend):$/;"	f
dynamic_import_lm	test/test_beam_search.py	/^from espnet.nets.lm_interface import dynamic_import_lm$/;"	i
dynamic_import_lm	test/test_lm.py	/^from espnet.nets.lm_interface import dynamic_import_lm$/;"	i
dynamic_import_st	espnet/nets/st_interface.py	/^def dynamic_import_st(module, backend):$/;"	f
editdistance	espnet/nets/e2e_asr_common.py	/^import editdistance$/;"	i
editdistance	espnet/nets/pytorch_backend/e2e_asr.py	/^import editdistance$/;"	i
editdistance	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^import editdistance$/;"	i
editdistance	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^import editdistance$/;"	i
editdistance	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^import editdistance$/;"	i
editdistance	espnet/nets/pytorch_backend/e2e_st.py	/^import editdistance$/;"	i
elayers	test/test_beam_search.py	/^    elayers=1,$/;"	v
elayers	test/test_beam_search.py	/^    elayers=2,$/;"	v
elayers	test/test_initialization.py	/^    elayers=4,$/;"	v
email	egs/vais1000/tts1/local/text/regex_tokenize.py	/^email = r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+"$/;"	v
embed_id	espnet/nets/chainer_backend/deterministic_embed_id.py	/^def embed_id(x, W, ignore_label=None):$/;"	f
encode	espnet/nets/asr_interface.py	/^    def encode(self, feat):$/;"	m	class:ASRInterface
encode	espnet/nets/pytorch_backend/e2e_asr.py	/^    def encode(self, x):$/;"	m	class:E2E
encode	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def encode(self, x_list):$/;"	m	class:E2E
encode	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def encode(self, x):$/;"	m	class:E2E
encode	espnet/nets/pytorch_backend/e2e_st.py	/^    def encode(self, x):$/;"	m	class:E2E
encode	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^    def encode(self, x):$/;"	m	class:E2E
encode	utils/spm_encode	/^        def encode(l):$/;"	f	function:main
encode_line	utils/spm_encode	/^        def encode_line(line):$/;"	f	function:main
encode_mu_law	espnet/nets/pytorch_backend/wavenet.py	/^def encode_mu_law(x, mu=256):$/;"	f
encode_mu_law	utils/generate_wav_from_fbank.py	/^from espnet.nets.pytorch_backend.wavenet import encode_mu_law$/;"	i
encoder_add_arguments	espnet/nets/pytorch_backend/e2e_asr.py	/^    def encoder_add_arguments(parser):$/;"	m	class:E2E
encoder_add_arguments	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def encoder_add_arguments(parser):$/;"	m	class:E2E
encoder_add_arguments	espnet/nets/pytorch_backend/e2e_mt.py	/^    def encoder_add_arguments(parser):$/;"	m	class:E2E
encoder_add_arguments	espnet/nets/pytorch_backend/e2e_st.py	/^    def encoder_add_arguments(parser):$/;"	m	class:E2E
encoder_for	espnet/nets/chainer_backend/e2e_asr.py	/^from espnet.nets.chainer_backend.rnn.encoders import encoder_for$/;"	i
encoder_for	espnet/nets/chainer_backend/rnn/encoders.py	/^def encoder_for(args, idim, subsample):$/;"	f
encoder_for	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.pytorch_backend.rnn.encoders import encoder_for$/;"	i
encoder_for	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^def encoder_for(args, idim, subsample):$/;"	f
encoder_for	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.nets.pytorch_backend.rnn.encoders import encoder_for$/;"	i
encoder_for	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^from espnet.nets.pytorch_backend.rnn.encoders import encoder_for$/;"	i
encoder_for	espnet/nets/pytorch_backend/e2e_mt.py	/^from espnet.nets.pytorch_backend.rnn.encoders import encoder_for$/;"	i
encoder_for	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.pytorch_backend.rnn.encoders import encoder_for$/;"	i
encoder_for	espnet/nets/pytorch_backend/rnn/encoders.py	/^def encoder_for(args, idim, subsample):$/;"	f
encoder_for_single	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.rnn.encoders import encoder_for as encoder_for_single$/;"	i
encoder_init	espnet/nets/pytorch_backend/tacotron2/encoder.py	/^def encoder_init(m):$/;"	f
encoder_mix_add_arguments	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def encoder_mix_add_arguments(parser):$/;"	m	class:E2E
encoding	setup.py	/^                            encoding='utf-8').read(),$/;"	v
end	doc/make.bat	/^:end$/;"	l
end_detect	espnet/nets/beam_search.py	/^from espnet.nets.e2e_asr_common import end_detect$/;"	i
end_detect	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^            from espnet.nets.e2e_asr_common import end_detect$/;"	i
end_detect	espnet/nets/chainer_backend/rnn/decoders.py	/^from espnet.nets.e2e_asr_common import end_detect$/;"	i
end_detect	espnet/nets/e2e_asr_common.py	/^def end_detect(ended_hyps, i, M=3, D_end=np.log(1 * np.exp(-10))):$/;"	f
end_detect	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^            from espnet.nets.e2e_asr_common import end_detect$/;"	i
end_detect	espnet/nets/pytorch_backend/rnn/decoders.py	/^from espnet.nets.e2e_asr_common import end_detect$/;"	i
end_detect_yzl23	espnet/nets/e2e_asr_common.py	/^def end_detect_yzl23(ended_hyps, remained_hyps, penalty):$/;"	f
end_detect_yzl23	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^            from espnet.nets.e2e_asr_common import end_detect_yzl23$/;"	i
end_time	egs/chime5/asr1/local/json2text.py	/^            end_time = hms_to_seconds(end_time)$/;"	v
end_time	egs/chime5/asr1/local/json2text.py	/^            end_time = x['end_time'][mictype]$/;"	v
english_cleaners	egs/arctic/tts1/local/text/cleaners.py	/^def english_cleaners(text):$/;"	f
english_cleaners	egs/ljspeech/tts1/local/text/cleaners.py	/^def english_cleaners(text):$/;"	f
english_cleaners	egs/ljspeech/tts2/local/text/cleaners.py	/^def english_cleaners(text):$/;"	f
english_cleaners	egs/tweb/tts1/local/text/cleaners.py	/^def english_cleaners(text):$/;"	f
enhance	espnet/asr/pytorch_backend/asr.py	/^def enhance(args):$/;"	f
enhance	espnet/bin/asr_enhance.py	/^from espnet.asr.pytorch_backend.asr import enhance$/;"	i
enhance	espnet/nets/pytorch_backend/e2e_asr.py	/^    def enhance(self, xs):$/;"	m	class:E2E
enhance	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def enhance(self, xs):$/;"	m	class:E2E
enhance	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^    def enhance(self, xs):$/;"	m	class:E2E
ensure_ascii	utils/splitjson.py	/^                                ensure_ascii=False,$/;"	v
entry	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        entry = ('\\n' + indent).join(entry.split('\\n'))$/;"	v
entry	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        entry = json.dumps(entry, indent=4, ensure_ascii=False,$/;"	v
entry	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        entry = {}$/;"	v
entry	utils/merge_scp2json.py	/^        entry = ('\\n' + indent).join(entry.split('\\n'))$/;"	v
entry	utils/merge_scp2json.py	/^        entry = json.dumps(entry, indent=4, ensure_ascii=False,$/;"	v
entry	utils/merge_scp2json.py	/^        entry = {}$/;"	v
epoch_detail	espnet/lm/lm_utils.py	/^    def epoch_detail(self):$/;"	m	class:ParallelSentenceIterator
epoch_detail	espnet/utils/dataset.py	/^    def epoch_detail(self):$/;"	m	class:ChainerDataLoader
eprojs	test/test_beam_search.py	/^    eprojs=8,$/;"	v
eprojs	test/test_initialization.py	/^    eprojs=320,$/;"	v
err	egs/jnas/asr1/local/make_eval_trans.py	/^def err(msg):$/;"	f
err	egs/jnas/asr1/local/make_train_trans.py	/^def err(msg):$/;"	f
err	egs/jnas/tts1/local/make_eval_trans.py	/^def err(msg):$/;"	f
err	egs/jnas/tts1/local/make_train_trans.py	/^def err(msg):$/;"	f
err	egs/voxforge/asr1/local/make_trans.py	/^def err(msg):$/;"	f
errno	egs/reverb/asr1/local/run_wpe.py	/^import os, errno$/;"	i
errno	egs/reverb/asr1_multich/local/run_wpe.py	/^import os, errno$/;"	i
espnet	doc/conf.py	/^import espnet$/;"	i
espnet	espnet/asr/chainer_backend/asr.py	/^import espnet.lm.chainer_backend.extlm as extlm_chainer$/;"	i
espnet	espnet/asr/chainer_backend/asr.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
espnet	espnet/asr/pytorch_backend/asr.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
espnet	espnet/asr/pytorch_backend/asr.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
espnet	espnet/asr/pytorch_backend/asr_mix.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
espnet	espnet/asr/pytorch_backend/asr_mix.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
espnet	espnet/lm/chainer_backend/lm.py	/^import espnet.nets.chainer_backend.deterministic_embed_id as DL$/;"	i
espnet	espnet/mt/pytorch_backend/mt.py	/^import espnet.lm.pytorch_backend.lm as lm_pytorch$/;"	i
espnet	espnet/nets/chainer_backend/rnn/decoders.py	/^import espnet.nets.chainer_backend.deterministic_embed_id as DL$/;"	i
espnet	espnet/st/pytorch_backend/st.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
espnet	test/test_e2e_asr.py	/^        import espnet.nets.chainer_backend.e2e_asr as m$/;"	i
espnet	test/test_e2e_asr.py	/^        import espnet.nets.pytorch_backend.e2e_asr as m$/;"	i
espnet	test/test_e2e_asr_mulenc.py	/^    import espnet.nets.pytorch_backend.e2e_asr_mulenc as m$/;"	i
espnet	test/test_e2e_mt.py	/^        import espnet.nets.chainer_backend.e2e_mt as m$/;"	i
espnet	test/test_e2e_mt.py	/^        import espnet.nets.pytorch_backend.e2e_mt as m$/;"	i
espnet	test/test_e2e_st.py	/^        import espnet.nets.pytorch_backend.e2e_st as m$/;"	i
espnet	test/test_initialization.py	/^    import espnet.nets.chainer_backend.e2e_asr as m$/;"	i
espnet	test/test_initialization.py	/^    import espnet.nets.pytorch_backend.e2e_asr as m$/;"	i
espnet	test/test_lm.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
espnet	test/test_lm.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
espnet	test/test_recog.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
espnet	test/test_recog.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
espnet	test/test_recog.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
etree	egs/iwslt18/asr1/local/parse_xml.py	/^import xml.etree.ElementTree as etree$/;"	i
etree	egs/iwslt18/mt1/local/parse_xml.py	/^import xml.etree.ElementTree as etree$/;"	i
etree	egs/iwslt18/st1/local/parse_xml.py	/^import xml.etree.ElementTree as etree$/;"	i
etype	test/test_beam_search.py	/^    etype="vggblstm",$/;"	v
etype	test/test_initialization.py	/^    etype="vggblstmp",$/;"	v
eunits	test/test_beam_search.py	/^    eunits=16,$/;"	v
eunits	test/test_initialization.py	/^    eunits=320,$/;"	v
eval_PESQ	utils/eval-source-separation.py	/^def eval_PESQ(ref, enh, fs, compute_permutation: bool = True,$/;"	f
eval_STOI	utils/eval-source-separation.py	/^def eval_STOI(ref, y, fs, extended=False, compute_permutation=True):$/;"	f
evaluate	espnet/asr/pytorch_backend/asr.py	/^    def evaluate(self):$/;"	m	class:CustomEvaluator
evaluate	espnet/lm/chainer_backend/lm.py	/^    def evaluate(self):$/;"	m	class:LMEvaluator
evaluate	espnet/lm/pytorch_backend/lm.py	/^    def evaluate(self):$/;"	m	class:LMEvaluator
evaluate	espnet/tts/pytorch_backend/tts.py	/^    def evaluate(self):$/;"	m	class:CustomEvaluator
exclude	utils/text2vocabulary.py	/^    exclude = ['<sos>', '<eos>', '<unk>']$/;"	v
exclude_patterns	doc/conf.py	/^exclude_patterns = [$/;"	v
exist_or_not	utils/text2token.py	/^def exist_or_not(i, match_pos):$/;"	f
expand_abbreviations	egs/arctic/tts1/local/text/cleaners.py	/^def expand_abbreviations(text):$/;"	f
expand_abbreviations	egs/ljspeech/tts1/local/text/cleaners.py	/^def expand_abbreviations(text):$/;"	f
expand_abbreviations	egs/ljspeech/tts2/local/text/cleaners.py	/^def expand_abbreviations(text):$/;"	f
expand_abbreviations	egs/tweb/tts1/local/text/cleaners.py	/^def expand_abbreviations(text):$/;"	f
expand_numbers	egs/arctic/tts1/local/text/cleaners.py	/^def expand_numbers(text):$/;"	f
expand_numbers	egs/ljspeech/tts1/local/text/cleaners.py	/^def expand_numbers(text):$/;"	f
expand_numbers	egs/ljspeech/tts2/local/text/cleaners.py	/^def expand_numbers(text):$/;"	f
expand_numbers	egs/tweb/tts1/local/text/cleaners.py	/^def expand_numbers(text):$/;"	f
expand_symbols	egs/arctic/tts1/local/text/cleaners.py	/^def expand_symbols(text):$/;"	f
expand_symbols	egs/ljspeech/tts1/local/text/cleaners.py	/^def expand_symbols(text):$/;"	f
expand_symbols	egs/ljspeech/tts2/local/text/cleaners.py	/^def expand_symbols(text):$/;"	f
expand_symbols	egs/tweb/tts1/local/text/cleaners.py	/^def expand_symbols(text):$/;"	f
extend_pe	espnet/nets/pytorch_backend/transformer/embedding.py	/^    def extend_pe(self, x):$/;"	m	class:PositionalEncoding
extension	espnet/asr/asr_mix_utils.py	/^from chainer.training import extension$/;"	i
extension	espnet/asr/asr_utils.py	/^from chainer.training import extension$/;"	i
extension	espnet/lm/lm_utils.py	/^from chainer.training import extension$/;"	i
extension	espnet/nets/chainer_backend/transformer/training.py	/^from chainer.training import extension$/;"	i
extensions	doc/conf.py	/^extensions = [$/;"	v
extensions	espnet/asr/chainer_backend/asr.py	/^from chainer.training import extensions$/;"	i
extensions	espnet/asr/pytorch_backend/asr.py	/^from chainer.training import extensions$/;"	i
extensions	espnet/asr/pytorch_backend/asr_mix.py	/^from chainer.training import extensions$/;"	i
extensions	espnet/lm/chainer_backend/lm.py	/^from chainer.training import extensions$/;"	i
extensions	espnet/lm/pytorch_backend/lm.py	/^from chainer.training import extensions$/;"	i
extensions	espnet/mt/pytorch_backend/mt.py	/^from chainer.training import extensions$/;"	i
extensions	espnet/st/pytorch_backend/st.py	/^from chainer.training import extensions$/;"	i
extensions	espnet/tts/pytorch_backend/tts.py	/^from chainer.training import extensions$/;"	i
extlm_chainer	espnet/asr/chainer_backend/asr.py	/^import espnet.lm.chainer_backend.extlm as extlm_chainer$/;"	i
extlm_pytorch	espnet/asr/pytorch_backend/asr.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
extlm_pytorch	espnet/asr/pytorch_backend/asr_mix.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
extlm_pytorch	test/test_recog.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
extra_repr	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^    def extra_repr(self):$/;"	m	class:GlobalMVN
extra_repr	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^    def extra_repr(self):$/;"	m	class:LogMel
extra_repr	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^    def extra_repr(self):$/;"	m	class:UtteranceMVN
extras_require	setup.py	/^      extras_require=extras_require,$/;"	v
extras_require	setup.py	/^extras_require = {k: v for k, v in requirements.items()$/;"	v
f	egs/csj/asr1/local/csj_rm_tag.py	/^        f = open(args.text, encoding='utf-8')$/;"	v
f	egs/csj/asr1/local/csj_rm_tag.py	/^        f = sys.stdin$/;"	v
f	test/test_e2e_asr_transformer.py	/^        f = torch.nn.DataParallel(f)$/;"	v	class:test_sequential.Masked
f_g2p	egs/ljspeech/tts1/local/clean_text.py	/^    f_g2p = G2p()$/;"	v
f_g2p	egs/ljspeech/tts2/local/clean_text.py	/^    f_g2p = G2p()$/;"	v
fading	egs/reverb/asr1/local/run_wpe.py	/^    fading=True,$/;"	v
fading	egs/reverb/asr1_multich/local/run_wpe.py	/^    fading=True,$/;"	v
fail	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                    fail = False$/;"	v
fail	utils/merge_scp2json.py	/^                    fail = False$/;"	v
fbank	espnet/transform/transformation.py	/^    fbank='espnet.transform.spectrogram:LogMelSpectrogram',$/;"	v
fconv	egs/reverb/asr1/local/Generate_mcTrainData_cut.m	/^function [y]=fconv(x, h)$/;"	f
fconv	egs/reverb/asr1_multich/local/Generate_mcTrainData_cut.m	/^function [y]=fconv(x, h)$/;"	f
fd	utils/text2vocabulary.py	/^        fd = codecs.open(fn, 'r', encoding="utf-8") if fn != '-' else codecs.getreader("utf-8")($/;"	v
fd	utils/text2vocabulary.py	/^    fd = codecs.open(args.output, 'w', encoding="utf-8") if args.output else codecs.getwriter("utf-8")($/;"	v
feature_transform_for	espnet/nets/pytorch_backend/e2e_asr.py	/^                import feature_transform_for$/;"	i
feature_transform_for	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^                import feature_transform_for$/;"	i
feature_transform_for	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^                import feature_transform_for$/;"	i
feature_transform_for	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^def feature_transform_for(args, n_fft):$/;"	f
fil	egs/commonvoice/asr1/local/filter_text.py	/^        fil = [x.rstrip() for x in f]$/;"	v
fil	egs/jnas/asr1/local/filter_text.py	/^        fil = [x.rstrip() for x in f]$/;"	v
fil	egs/jnas/tts1/local/filter_text.py	/^        fil = [x.rstrip() for x in f]$/;"	v
fil	egs/voxforge/asr1/local/filter_text.py	/^        fil = [x.rstrip() for x in f]$/;"	v
file_order	egs/iwslt18/asr1/local/json2trn_reorder.py	/^    file_order = []$/;"	v
file_order	egs/iwslt18/asr1/local/reorder_text.py	/^    file_order = []$/;"	v
file_order	egs/iwslt18/mt1/local/json2trn_reorder.py	/^    file_order = []$/;"	v
file_order	egs/iwslt18/mt1/local/reorder_text.py	/^    file_order = []$/;"	v
file_order	egs/iwslt18/st1/local/json2trn_reorder.py	/^    file_order = []$/;"	v
file_order	egs/iwslt18/st1/local/reorder_text.py	/^    file_order = []$/;"	v
file_reader_helper	espnet/utils/cli_readers.py	/^def file_reader_helper(rspecifier: str, filetype: str = 'mat',$/;"	f
file_reader_helper	test/test_cli.py	/^from espnet.utils.cli_readers import file_reader_helper$/;"	i
file_reader_helper	utils/apply-cmvn.py	/^from espnet.utils.cli_readers import file_reader_helper$/;"	i
file_reader_helper	utils/compute-cmvn-stats.py	/^from espnet.utils.cli_readers import file_reader_helper$/;"	i
file_reader_helper	utils/convert_fbank_to_wav.py	/^from espnet.utils.cli_readers import file_reader_helper$/;"	i
file_reader_helper	utils/copy-feats.py	/^from espnet.utils.cli_readers import file_reader_helper$/;"	i
file_reader_helper	utils/feat-to-shape.py	/^from espnet.utils.cli_readers import file_reader_helper$/;"	i
file_reader_helper	utils/generate_wav_from_fbank.py	/^from espnet.utils.cli_readers import file_reader_helper$/;"	i
file_writer_helper	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.cli_writers import file_writer_helper$/;"	i
file_writer_helper	espnet/utils/cli_writers.py	/^def file_writer_helper(wspecifier: str, filetype: str = 'mat',$/;"	f
file_writer_helper	test/test_cli.py	/^from espnet.utils.cli_writers import file_writer_helper$/;"	i
file_writer_helper	utils/apply-cmvn.py	/^from espnet.utils.cli_writers import file_writer_helper$/;"	i
file_writer_helper	utils/compute-cmvn-stats.py	/^from espnet.utils.cli_writers import file_writer_helper$/;"	i
file_writer_helper	utils/compute-fbank-feats.py	/^from espnet.utils.cli_writers import file_writer_helper$/;"	i
file_writer_helper	utils/compute-stft-feats.py	/^from espnet.utils.cli_writers import file_writer_helper$/;"	i
file_writer_helper	utils/copy-feats.py	/^from espnet.utils.cli_writers import file_writer_helper$/;"	i
file_writer_helper	utils/dump-pcm.py	/^from espnet.utils.cli_writers import file_writer_helper$/;"	i
filename	utils/splitjson.py	/^    filename = os.path.basename(args.json).split('.')[0]$/;"	v
fill_missing_args	espnet/nets/asr_interface.py	/^from espnet.utils.fill_missing_args import fill_missing_args$/;"	i
fill_missing_args	espnet/nets/mt_interface.py	/^from espnet.utils.fill_missing_args import fill_missing_args$/;"	i
fill_missing_args	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.utils.fill_missing_args import fill_missing_args$/;"	i
fill_missing_args	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from espnet.utils.fill_missing_args import fill_missing_args$/;"	i
fill_missing_args	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.utils.fill_missing_args import fill_missing_args$/;"	i
fill_missing_args	espnet/utils/fill_missing_args.py	/^def fill_missing_args(args, add_arguments):$/;"	f
filter_file	utils/filt.py	/^def filter_file(infile, filt, exclude):$/;"	f
filter_modules	espnet/asr/pytorch_backend/asr_init.py	/^def filter_modules(model_state_dict, modules):$/;"	f
fin_Letter	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^fin_Letter = open(args.Letter, "r")$/;"	v
fin_Letter	egs/swbd/asr1/local/format_acronyms_dict.py	/^fin_Letter = open(args.Letter, "r")$/;"	v
fin_lex	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^fin_lex = open(args.input,"r")$/;"	v
fin_lex	egs/swbd/asr1/local/format_acronyms_dict.py	/^fin_lex = open(args.input,"r")$/;"	v
fin_map	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^fin_map = open(args.Map, "r")$/;"	v
fin_map	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^fin_map = open(args.Map, "r")$/;"	v
fin_trans	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^fin_trans = open(args.input, "r")$/;"	v
fin_trans	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^fin_trans = open(args.input, "r")$/;"	v
final	espnet/lm/chainer_backend/extlm.py	/^    def final(self, state):$/;"	m	class:LookAheadWordLM
final	espnet/lm/chainer_backend/extlm.py	/^    def final(self, state):$/;"	m	class:MultiLevelLM
final	espnet/lm/chainer_backend/lm.py	/^    def final(self, state):$/;"	m	class:ClassifierWithState
final	espnet/lm/pytorch_backend/extlm.py	/^    def final(self, state):$/;"	m	class:LookAheadWordLM
final	espnet/lm/pytorch_backend/extlm.py	/^    def final(self, state):$/;"	m	class:MultiLevelLM
final	espnet/nets/pytorch_backend/lm/default.py	/^    def final(self, state, index=None):$/;"	m	class:ClassifierWithState
final_score	espnet/nets/pytorch_backend/lm/default.py	/^    def final_score(self, state):$/;"	m	class:DefaultRNNLM
final_score	espnet/nets/scorer_interface.py	/^    def final_score(self, state: Any) -> float:$/;"	m	class:ScorerInterface
finalize	espnet/utils/dataset.py	/^    def finalize(self):$/;"	m	class:ChainerDataLoader
find_files	egs/dirha_wsj/asr1/local/tools/find_files.m	/^function fileList = find_files(dirName,ext)$/;"	f
find_packages	setup.py	/^from setuptools import find_packages$/;"	i
first	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        first = concat[0]$/;"	v
first	utils/merge_scp2json.py	/^        first = concat[0]$/;"	v
fl	utils/splitjson.py	/^        fl = '{}\/{}.{}.json'.format(dirname, filename, i + 1)$/;"	v
flatten_grid_locations	espnet/utils/spec_augment.py	/^def flatten_grid_locations(grid_locations, image_height, image_width):$/;"	f
fname	doc/module2rst.py	/^    fname = to_module(p) + ".rst"$/;"	v
foo_bar	test/test_transform.py	/^    def foo_bar(x, a=1, b=2):$/;"	f	function:test_func_trans
format	utils/splitjson.py	/^                        format="%(asctime)s (%(module)s:%(lineno)d) %(levelname)s: %(message)s")$/;"	v
format_mulenc_args	espnet/asr/asr_utils.py	/^def format_mulenc_args(args):$/;"	f
format_mulenc_args	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import format_mulenc_args$/;"	i
formatter_class	doc/module2rst.py	/^    formatter_class=configargparse.ArgumentDefaultsHelpFormatter)$/;"	v
formatter_class	egs/libri_trans/asr1/local/concat_json_multiref.py	/^        formatter_class=argparse.ArgumentDefaultsHelpFormatter)$/;"	v
formatter_class	egs/libri_trans/mt1/local/concat_json_multiref.py	/^        formatter_class=argparse.ArgumentDefaultsHelpFormatter)$/;"	v
formatter_class	egs/libri_trans/st1/local/concat_json_multiref.py	/^        formatter_class=argparse.ArgumentDefaultsHelpFormatter)$/;"	v
formatter_class	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        formatter_class=argparse.ArgumentDefaultsHelpFormatter)$/;"	v
forward	espnet/lm/pytorch_backend/extlm.py	/^    def forward(self, state, x):$/;"	m	class:LookAheadWordLM
forward	espnet/lm/pytorch_backend/extlm.py	/^    def forward(self, state, x):$/;"	m	class:MultiLevelLM
forward	espnet/nets/asr_interface.py	/^    def forward(self, xs, ilens, ys):$/;"	m	class:ASRInterface
forward	espnet/nets/beam_search.py	/^    def forward(self, x: torch.Tensor, maxlenratio: float = 0.0, minlenratio: float = 0.0) -> List[Hypothesis]:$/;"	m	class:BeamSearch
forward	espnet/nets/chainer_backend/deterministic_embed_id.py	/^    def forward(self, inputs):$/;"	m	class:EmbedIDFunction
forward	espnet/nets/chainer_backend/deterministic_embed_id.py	/^    def forward(self, inputs):$/;"	m	class:EmbedIDGrad
forward	espnet/nets/chainer_backend/e2e_asr.py	/^    def forward(self, xs, ilens, ys):$/;"	m	class:E2E
forward	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def forward(self, xs, ilens, ys_pad, calculate_attentions=False):$/;"	m	class:E2E
forward	espnet/nets/chainer_backend/transformer/attention.py	/^    def forward(self, e_var, s_var=None, mask=None, batch=1):$/;"	m	class:MultiHeadAttention
forward	espnet/nets/chainer_backend/transformer/ctc.py	/^    def forward(self, hs, ys):$/;"	m	class:WarpCTC
forward	espnet/nets/chainer_backend/transformer/decoder.py	/^    def forward(self, ys_pad, source, x_mask):$/;"	m	class:Decoder
forward	espnet/nets/chainer_backend/transformer/decoder_layer.py	/^    def forward(self, e, s, xy_mask, yy_mask, batch):$/;"	m	class:DecoderLayer
forward	espnet/nets/chainer_backend/transformer/embedding.py	/^    def forward(self, e):$/;"	m	class:PositionalEncoding
forward	espnet/nets/chainer_backend/transformer/encoder.py	/^    def forward(self, e, ilens):$/;"	m	class:Encoder
forward	espnet/nets/chainer_backend/transformer/encoder_layer.py	/^    def forward(self, e, xx_mask, batch):$/;"	m	class:EncoderLayer
forward	espnet/nets/chainer_backend/transformer/label_smoothing_loss.py	/^    def forward(self, ys_block, ys_pad):$/;"	m	class:LabelSmoothingLoss
forward	espnet/nets/chainer_backend/transformer/subsampling.py	/^    def forward(self, xs, ilens):$/;"	m	class:Conv2dSubsampling
forward	espnet/nets/chainer_backend/transformer/subsampling.py	/^    def forward(self, xs, ilens):$/;"	m	class:LinearSampling
forward	espnet/nets/lm_interface.py	/^    def forward(self, x, t):$/;"	m	class:LMInterface
forward	espnet/nets/mt_interface.py	/^    def forward(self, xs, ilens, ys):$/;"	m	class:MTInterface
forward	espnet/nets/pytorch_backend/ctc.py	/^    def forward(self, hs_pad, hlens, ys_pad):$/;"	m	class:CTC
forward	espnet/nets/pytorch_backend/e2e_asr.py	/^    def forward(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
forward	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def forward(self, xs_pad, ilens):$/;"	m	class:EncoderMix
forward	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def forward(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
forward	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def forward(self, xs_pad_list, ilens_list, ys_pad):$/;"	m	class:E2E
forward	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^    def forward(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
forward	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def forward(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
forward	espnet/nets/pytorch_backend/e2e_mt.py	/^    def forward(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
forward	espnet/nets/pytorch_backend/e2e_st.py	/^    def forward(self, xs_pad, ilens, ys_pad, ys_pad_src):$/;"	m	class:E2E
forward	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^    def forward(self, xs_pad, ilens, ys_pad, ys_pad_src):$/;"	m	class:E2E
forward	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def forward(self, xs, ilens, ys, olens, spembs=None, *args, **kwargs):$/;"	m	class:FeedForwardTransformer
forward	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def forward(self, after_outs, before_outs, logits, ys, labels, olens):$/;"	m	class:Tacotron2Loss
forward	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def forward(self, att_ws, ilens, olens):$/;"	m	class:GuidedAttentionLoss
forward	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def forward(self, xs, ilens, ys, labels, olens, spembs=None, spcs=None, *args, **kwargs):$/;"	m	class:Tacotron2
forward	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def forward(self, after_outs, before_outs, logits, ys, labels, olens):$/;"	m	class:TransformerLoss
forward	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def forward(self, att_ws, ilens, olens):$/;"	m	class:GuidedMultiHeadAttentionLoss
forward	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def forward(self, xs, ilens, ys, labels, olens, spembs=None, *args, **kwargs):$/;"	m	class:Transformer
forward	espnet/nets/pytorch_backend/fastspeech/duration_calculator.py	/^    def forward(self, xs, ilens, ys, olens, spembs=None):$/;"	m	class:DurationCalculator
forward	espnet/nets/pytorch_backend/fastspeech/duration_predictor.py	/^    def forward(self, outputs, targets):$/;"	m	class:DurationPredictorLoss
forward	espnet/nets/pytorch_backend/fastspeech/duration_predictor.py	/^    def forward(self, xs, x_masks=None):$/;"	m	class:DurationPredictor
forward	espnet/nets/pytorch_backend/fastspeech/length_regulator.py	/^    def forward(self, xs, ds, ilens, alpha=1.0):$/;"	m	class:LengthRegulator
forward	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^            -> Tuple[ComplexTensor, torch.LongTensor, ComplexTensor]:$/;"	m	class:DNN_Beamformer
forward	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^    def forward(self, psd_in: ComplexTensor, ilens: torch.LongTensor,$/;"	m	class:AttentionReference
forward	espnet/nets/pytorch_backend/frontends/dnn_wpe.py	/^    def forward(self,$/;"	m	class:DNN_WPE
forward	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^            -> Tuple[torch.Tensor, torch.LongTensor]:$/;"	m	class:GlobalMVN
forward	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^            -> Tuple[torch.Tensor, torch.LongTensor]:$/;"	m	class:LogMel
forward	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^            -> Tuple[torch.Tensor, torch.LongTensor]:$/;"	m	class:UtteranceMVN
forward	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^    def forward(self, x: ComplexTensor,$/;"	m	class:FeatureTransform
forward	espnet/nets/pytorch_backend/frontends/frontend.py	/^    def forward(self, x: ComplexTensor,$/;"	m	class:Frontend
forward	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^            -> Tuple[Tuple[torch.Tensor, ...], torch.LongTensor]:$/;"	m	class:MaskEstimator
forward	espnet/nets/pytorch_backend/lm/default.py	/^    def forward(self, state, *args, **kwargs):$/;"	m	class:ClassifierWithState
forward	espnet/nets/pytorch_backend/lm/default.py	/^    def forward(self, state, x):$/;"	m	class:RNNLM
forward	espnet/nets/pytorch_backend/lm/default.py	/^    def forward(self, x, t):$/;"	m	class:DefaultRNNLM
forward	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^    def forward(self, x, t):$/;"	m	class:SequentialRNNLM
forward	espnet/nets/pytorch_backend/lm/transformer.py	/^    def forward(self, x: torch.Tensor, t: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor, torch.Tensor]:$/;"	m	class:TransformerLM
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev):$/;"	m	class:AttMultiHeadAdd
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev):$/;"	m	class:AttMultiHeadDot
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev):$/;"	m	class:AttMultiHeadMultiResLoc
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev):$/;"	m	class:NoAtt
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev, out_prev, scaling=1.0):$/;"	m	class:AttForwardTA
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev, scaling=1.0):$/;"	m	class:AttForward
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev, scaling=2.0):$/;"	m	class:AttAdd
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev, scaling=2.0):$/;"	m	class:AttDot
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev, scaling=2.0):$/;"	m	class:AttLoc
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev, scaling=2.0):$/;"	m	class:AttLoc2D
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev, scaling=2.0):$/;"	m	class:AttMultiHeadLoc
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev_list, scaling=2.0):$/;"	m	class:AttCov
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev_list, scaling=2.0):$/;"	m	class:AttCovLoc
forward	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def forward(self, enc_hs_pad, enc_hs_len, dec_z, att_prev_states, scaling=2.0):$/;"	m	class:AttLocRec
forward	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def forward(self, hs_pad, hlens, ys_pad, strm_idx=0, lang_ids=None):$/;"	m	class:Decoder
forward	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def forward(self, hs_pad, hlens, ys_pad):$/;"	m	class:DecoderRNNT
forward	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def forward(self, hs_pad, hlens, ys_pad):$/;"	m	class:DecoderRNNTAtt
forward	espnet/nets/pytorch_backend/rnn/encoders.py	/^    def forward(self, xs_pad, ilens, **kwargs):$/;"	m	class:VGG2L
forward	espnet/nets/pytorch_backend/rnn/encoders.py	/^    def forward(self, xs_pad, ilens, prev_state=None):$/;"	m	class:RNN
forward	espnet/nets/pytorch_backend/rnn/encoders.py	/^    def forward(self, xs_pad, ilens, prev_state=None):$/;"	m	class:RNNP
forward	espnet/nets/pytorch_backend/rnn/encoders.py	/^    def forward(self, xs_pad, ilens, prev_states=None):$/;"	m	class:Encoder
forward	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^    def forward(self, cbhg_outs, spcs, olens):$/;"	m	class:CBHGLoss
forward	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^    def forward(self, x):$/;"	m	class:HighwayNet
forward	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^    def forward(self, xs, ilens):$/;"	m	class:CBHG
forward	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def forward(self, hs, hlens, ys):$/;"	m	class:Decoder
forward	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def forward(self, inputs, hidden):$/;"	m	class:ZoneOutCell
forward	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def forward(self, x):$/;"	m	class:Prenet
forward	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def forward(self, xs):$/;"	m	class:Postnet
forward	espnet/nets/pytorch_backend/tacotron2/encoder.py	/^    def forward(self, xs, ilens=None):$/;"	m	class:Encoder
forward	espnet/nets/pytorch_backend/transformer/attention.py	/^    def forward(self, query, key, value, mask):$/;"	m	class:MultiHeadedAttention
forward	espnet/nets/pytorch_backend/transformer/decoder.py	/^    def forward(self, tgt, tgt_mask, memory, memory_mask):$/;"	m	class:Decoder
forward	espnet/nets/pytorch_backend/transformer/decoder_layer.py	/^    def forward(self, tgt, tgt_mask, memory, memory_mask, cache=None):$/;"	m	class:DecoderLayer
forward	espnet/nets/pytorch_backend/transformer/embedding.py	/^    def forward(self, x):$/;"	m	class:ScaledPositionalEncoding
forward	espnet/nets/pytorch_backend/transformer/embedding.py	/^    def forward(self, x: torch.Tensor):$/;"	m	class:PositionalEncoding
forward	espnet/nets/pytorch_backend/transformer/encoder.py	/^    def forward(self, xs, masks):$/;"	m	class:Encoder
forward	espnet/nets/pytorch_backend/transformer/encoder_layer.py	/^    def forward(self, x, mask):$/;"	m	class:EncoderLayer
forward	espnet/nets/pytorch_backend/transformer/label_smoothing_loss.py	/^    def forward(self, x, target):$/;"	m	class:LabelSmoothingLoss
forward	espnet/nets/pytorch_backend/transformer/layer_norm.py	/^    def forward(self, x):$/;"	m	class:LayerNorm
forward	espnet/nets/pytorch_backend/transformer/multi_layer_conv.py	/^    def forward(self, x):$/;"	m	class:Conv1dLinear
forward	espnet/nets/pytorch_backend/transformer/multi_layer_conv.py	/^    def forward(self, x):$/;"	m	class:MultiLayeredConv1d
forward	espnet/nets/pytorch_backend/transformer/positionwise_feed_forward.py	/^    def forward(self, x):$/;"	m	class:PositionwiseFeedForward
forward	espnet/nets/pytorch_backend/transformer/repeat.py	/^    def forward(self, *args):$/;"	m	class:MultiSequential
forward	espnet/nets/pytorch_backend/transformer/subsampling.py	/^    def forward(self, x, x_mask):$/;"	m	class:Conv2dSubsampling
forward	espnet/nets/pytorch_backend/wavenet.py	/^    def forward(self, x):$/;"	m	class:CausalConv1d
forward	espnet/nets/pytorch_backend/wavenet.py	/^    def forward(self, x):$/;"	m	class:OneHot
forward	espnet/nets/pytorch_backend/wavenet.py	/^    def forward(self, x):$/;"	m	class:UpSampling
forward	espnet/nets/pytorch_backend/wavenet.py	/^    def forward(self, x, h):$/;"	m	class:WaveNet
forward	espnet/nets/tts_interface.py	/^    def forward(self, *args, **kwargs):$/;"	m	class:TTSInterface
forward	test/test_e2e_asr_transformer.py	/^        def forward(self, x, m):$/;"	m	class:test_sequential.Masked
forward	test/test_optimizer.py	/^    def forward(self, x):$/;"	m	class:ThModel
forward	test/test_positional_encoding.py	/^    def forward(self, x):$/;"	m	class:LegacyPositionalEncoding
forward	test/test_positional_encoding.py	/^    def forward(self, x):$/;"	m	class:LegacyScaledPositionalEncoding
forward_one_step	espnet/nets/pytorch_backend/transformer/decoder.py	/^    def forward_one_step(self, tgt, tgt_mask, memory, cache=None):$/;"	m	class:Decoder
fout_lex	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^fout_lex = open(args.output1, "w")$/;"	v
fout_lex	egs/swbd/asr1/local/format_acronyms_dict.py	/^fout_lex = open(args.output, "w")$/;"	v
fout_lex_ori	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^fout_lex_ori = open(args.output2, "w")$/;"	v
fout_map	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^fout_map = open(args.Map, "w")$/;"	v
fout_map	egs/swbd/asr1/local/format_acronyms_dict.py	/^fout_map = open(args.Map, "w")$/;"	v
fout_trans	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^fout_trans = open(args.output, "w")$/;"	v
fout_trans	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^fout_trans = open(args.output, "w")$/;"	v
freq_mask	espnet/transform/spec_augment.py	/^def freq_mask(x, F=30, n_mask=2, replace_with_zero=True, inplace=False):$/;"	f
freq_mask	espnet/transform/transformation.py	/^    freq_mask='espnet.transform.spec_augment:FreqMask',$/;"	v
freq_mask	espnet/utils/spec_augment.py	/^def freq_mask(spec, F=30, num_masks=1, replace_with_zero=False):$/;"	f
frontend_for	espnet/nets/pytorch_backend/e2e_asr.py	/^                import frontend_for$/;"	i
frontend_for	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^                import frontend_for$/;"	i
frontend_for	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^                import frontend_for$/;"	i
frontend_for	espnet/nets/pytorch_backend/frontends/frontend.py	/^def frontend_for(args, idim):$/;"	f
fscps	egs/wsj_mix/asr1/local/merge_scp2json.py	/^    fscps = [[open(i[1], 'r', encoding='utf-8') for i in il] for il in infos]$/;"	v
fscps	utils/merge_scp2json.py	/^    fscps = [[open(i[1], 'r', encoding='utf-8') for i in il] for il in infos]$/;"	v
func	espnet/transform/functional.py	/^    def func(self):$/;"	m	class:FuncTrans
function_node	espnet/nets/chainer_backend/deterministic_embed_id.py	/^from chainer import function_node$/;"	i
g2p	egs/jnas/asr1/local/clean_text.py	/^def g2p(text, trans_type="char"):$/;"	f
g2p	egs/jnas/tts1/local/clean_text.py	/^def g2p(text, trans_type="char"):$/;"	f
g2p	egs/jsut/tts1/local/clean_text.py	/^def g2p(text, trans_type="char"):$/;"	f
g2p	egs/jvs/tts1/local/clean_text.py	/^def g2p(text, trans_type="char"):$/;"	f
g2p	egs/ljspeech/tts1/local/clean_text.py	/^def g2p(text):$/;"	f
g2p	egs/ljspeech/tts2/local/clean_text.py	/^def g2p(text):$/;"	f
gather	espnet/utils/spec_augment.py	/^    def gather(y_coords, x_coords, name):$/;"	f	function:interpolate_bilinear
gather_grads	espnet/nets/chainer_backend/rnn/training.py	/^from chainer.training.updaters.multiprocess_parallel_updater import gather_grads$/;"	i
gather_grads	espnet/nets/chainer_backend/transformer/training.py	/^from chainer.training.updaters.multiprocess_parallel_updater import gather_grads$/;"	i
gather_params	espnet/nets/chainer_backend/rnn/training.py	/^from chainer.training.updaters.multiprocess_parallel_updater import gather_params$/;"	i
gather_params	espnet/nets/chainer_backend/transformer/training.py	/^from chainer.training.updaters.multiprocess_parallel_updater import gather_params$/;"	i
gen_obs	egs/reverb/asr1/local/Generate_mcTrainData_cut.m	/^function [y]=gen_obs(x,RIR,NOISE,SNRdB)$/;"	f
gen_obs	egs/reverb/asr1_multich/local/Generate_mcTrainData_cut.m	/^function [y]=gen_obs(x,RIR,NOISE,SNRdB)$/;"	f
gen_rst	doc/module2rst.py	/^def gen_rst(module_path, f):$/;"	f
gendir	doc/module2rst.py	/^gendir = args.dst + "\/_gen"$/;"	v
generate	espnet/nets/pytorch_backend/wavenet.py	/^    def generate(self, x, h, n_samples, interval=None, mode="sampling"):$/;"	m	class:WaveNet
get_attention_weight	espnet/asr/asr_mix_utils.py	/^    def get_attention_weight(self, idx, att_w, spkr_idx):$/;"	m	class:PlotAttentionReport
get_attention_weight	espnet/asr/asr_utils.py	/^    def get_attention_weight(self, idx, att_w):$/;"	m	class:PlotAttentionReport
get_attention_weights	espnet/asr/asr_mix_utils.py	/^    def get_attention_weights(self):$/;"	m	class:PlotAttentionReport
get_attention_weights	espnet/asr/asr_utils.py	/^    def get_attention_weights(self):$/;"	m	class:PlotAttentionReport
get_attention_weights	espnet/nets/chainer_backend/transformer/plot.py	/^    def get_attention_weights(self):$/;"	m	class:PlotAttentionReport
get_attention_weights	espnet/nets/pytorch_backend/transformer/plot.py	/^    def get_attention_weights(self):$/;"	m	class:PlotAttentionReport
get_commandline_args	egs/libri_trans/asr1/local/concat_json_multiref.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	egs/libri_trans/mt1/local/concat_json_multiref.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	egs/libri_trans/st1/local/concat_json_multiref.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	egs/wsj_mix/asr1/local/merge_scp2json.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	espnet/utils/cli_utils.py	/^def get_commandline_args():$/;"	f
get_commandline_args	utils/addjson.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/apply-cmvn.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/compute-cmvn-stats.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/compute-fbank-feats.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/compute-stft-feats.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/concatjson.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/convert_fbank_to_wav.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/copy-feats.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/dump-pcm.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/eval-source-separation.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/feat-to-shape.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/generate_wav_from_fbank.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/json2text.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/json2trn.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/json2trn_mt.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/json2trn_wo_dict.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/merge_scp2json.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/mergejson.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/splitjson.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_commandline_args	utils/trim_silence.py	/^from espnet.utils.cli_utils import get_commandline_args$/;"	i
get_default_recog_args	test/test_e2e_asr_transducer.py	/^def get_default_recog_args(**kwargs):$/;"	f
get_default_scope_inputs	test/test_asr_init.py	/^def get_default_scope_inputs():$/;"	f
get_default_scope_inputs	test/test_e2e_asr_transducer.py	/^def get_default_scope_inputs():$/;"	f
get_default_train_args	test/test_e2e_asr_transducer.py	/^def get_default_train_args(**kwargs):$/;"	f
get_flat_grid_locations	espnet/utils/spec_augment.py	/^def get_flat_grid_locations(image_height, image_width, device):$/;"	f
get_grid_locations	espnet/utils/spec_augment.py	/^def get_grid_locations(image_height, image_width, device):$/;"	f
get_model_conf	espnet/asr/asr_utils.py	/^def get_model_conf(model_path, conf_path=None):$/;"	f
get_model_conf	espnet/asr/chainer_backend/asr.py	/^from espnet.asr.asr_utils import get_model_conf$/;"	i
get_model_conf	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import get_model_conf$/;"	i
get_model_conf	espnet/asr/pytorch_backend/asr_init.py	/^from espnet.asr.asr_utils import get_model_conf$/;"	i
get_model_conf	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.asr_utils import get_model_conf$/;"	i
get_model_conf	espnet/asr/pytorch_backend/recog.py	/^from espnet.asr.asr_utils import get_model_conf$/;"	i
get_model_conf	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.asr_utils import get_model_conf$/;"	i
get_model_conf	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.asr.asr_utils import get_model_conf$/;"	i
get_model_conf	espnet/st/pytorch_backend/st.py	/^from espnet.asr.asr_utils import get_model_conf$/;"	i
get_model_conf	espnet/tts/pytorch_backend/tts.py	/^from espnet.asr.asr_utils import get_model_conf$/;"	i
get_model_conf	test/test_e2e_compatibility.py	/^from espnet.asr.asr_utils import get_model_conf$/;"	i
get_mvdr_vector	espnet/nets/pytorch_backend/frontends/beamformer.py	/^def get_mvdr_vector(psd_s: ComplexTensor,$/;"	f
get_mvdr_vector	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^    import get_mvdr_vector$/;"	i
get_name	egs/ami/asr1/local/ami_split_segments.pl	/^sub get_name {$/;"	s
get_num_frames_writer	espnet/utils/cli_writers.py	/^def get_num_frames_writer(write_num_frames: str):$/;"	f
get_parser	doc/argparse2rst.py	/^def get_parser():$/;"	f
get_parser	egs/jsut/tts1/local/prep_segments.py	/^def get_parser():$/;"	f
get_parser	espnet/bin/asr_enhance.py	/^def get_parser():$/;"	f
get_parser	espnet/bin/asr_recog.py	/^def get_parser():$/;"	f
get_parser	espnet/bin/asr_train.py	/^def get_parser(parser=None, required=True):$/;"	f
get_parser	espnet/bin/lm_train.py	/^def get_parser():$/;"	f
get_parser	espnet/bin/mt_train.py	/^def get_parser(parser=None, required=True):$/;"	f
get_parser	espnet/bin/mt_trans.py	/^def get_parser():$/;"	f
get_parser	espnet/bin/st_train.py	/^def get_parser(parser=None, required=True):$/;"	f
get_parser	espnet/bin/st_trans.py	/^def get_parser():$/;"	f
get_parser	espnet/bin/tts_decode.py	/^def get_parser():$/;"	f
get_parser	espnet/bin/tts_train.py	/^def get_parser():$/;"	f
get_parser	espnet/nets/asr_interface.py	/^from espnet.bin.asr_train import get_parser$/;"	i
get_parser	espnet/nets/mt_interface.py	/^from espnet.bin.asr_train import get_parser$/;"	i
get_parser	utils/addjson.py	/^def get_parser():$/;"	f
get_parser	utils/apply-cmvn.py	/^def get_parser():$/;"	f
get_parser	utils/average_checkpoints.py	/^def get_parser():$/;"	f
get_parser	utils/change_yaml.py	/^def get_parser():$/;"	f
get_parser	utils/compute-cmvn-stats.py	/^def get_parser():$/;"	f
get_parser	utils/compute-fbank-feats.py	/^def get_parser():$/;"	f
get_parser	utils/compute-stft-feats.py	/^def get_parser():$/;"	f
get_parser	utils/concatjson.py	/^def get_parser():$/;"	f
get_parser	utils/convert_fbank_to_wav.py	/^def get_parser():$/;"	f
get_parser	utils/copy-feats.py	/^def get_parser():$/;"	f
get_parser	utils/dump-pcm.py	/^def get_parser():$/;"	f
get_parser	utils/eval-source-separation.py	/^def get_parser():$/;"	f
get_parser	utils/eval_perm_free_error.py	/^def get_parser():$/;"	f
get_parser	utils/feat-to-shape.py	/^def get_parser():$/;"	f
get_parser	utils/feats2npy.py	/^def get_parser():$/;"	f
get_parser	utils/filt.py	/^def get_parser():$/;"	f
get_parser	utils/generate_wav_from_fbank.py	/^def get_parser():$/;"	f
get_parser	utils/get_yaml.py	/^def get_parser():$/;"	f
get_parser	utils/json2sctm.py	/^def get_parser():$/;"	f
get_parser	utils/json2text.py	/^def get_parser():$/;"	f
get_parser	utils/json2trn.py	/^def get_parser():$/;"	f
get_parser	utils/json2trn_mt.py	/^def get_parser():$/;"	f
get_parser	utils/json2trn_wo_dict.py	/^def get_parser():$/;"	f
get_parser	utils/merge_scp2json.py	/^def get_parser():$/;"	f
get_parser	utils/mergejson.py	/^def get_parser():$/;"	f
get_parser	utils/mix-mono-wav-scp.py	/^def get_parser():$/;"	f
get_parser	utils/result2json.py	/^def get_parser():$/;"	f
get_parser	utils/scp2json.py	/^def get_parser():$/;"	f
get_parser	utils/splitjson.py	/^def get_parser():$/;"	f
get_parser	utils/text2token.py	/^def get_parser():$/;"	f
get_parser	utils/text2vocabulary.py	/^def get_parser():$/;"	f
get_parser	utils/trim_silence.py	/^def get_parser():$/;"	f
get_parser	utils/trn2ctm.py	/^def get_parser():$/;"	f
get_parser	utils/trn2stm.py	/^def get_parser():$/;"	f
get_partial_asr_mt_state_dict	espnet/asr/pytorch_backend/asr_init.py	/^def get_partial_asr_mt_state_dict(model_state_dict, modules):$/;"	f
get_partial_lm_state_dict	espnet/asr/pytorch_backend/asr_init.py	/^def get_partial_lm_state_dict(model_state_dict, modules):$/;"	f
get_power_spectral_density_matrix	espnet/nets/pytorch_backend/frontends/beamformer.py	/^def get_power_spectral_density_matrix(xs: ComplexTensor, mask: torch.Tensor,$/;"	f
get_power_spectral_density_matrix	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^    import get_power_spectral_density_matrix$/;"	i
get_results	utils/eval_perm_free_error.py	/^def get_results(result_file, result_key):$/;"	f
get_std_opt	espnet/asr/pytorch_backend/asr.py	/^        from espnet.nets.pytorch_backend.transformer.optimizer import get_std_opt$/;"	i
get_std_opt	espnet/asr/pytorch_backend/asr_mix.py	/^        from espnet.nets.pytorch_backend.transformer.optimizer import get_std_opt$/;"	i
get_std_opt	espnet/mt/pytorch_backend/mt.py	/^        from espnet.nets.pytorch_backend.transformer.optimizer import get_std_opt$/;"	i
get_std_opt	espnet/nets/pytorch_backend/transformer/optimizer.py	/^def get_std_opt(model, d_model, warmup, factor):$/;"	f
get_std_opt	espnet/st/pytorch_backend/st.py	/^        from espnet.nets.pytorch_backend.transformer.optimizer import get_std_opt$/;"	i
get_std_opt	espnet/tts/pytorch_backend/tts.py	/^        from espnet.nets.pytorch_backend.transformer.optimizer import get_std_opt$/;"	i
get_trained_model_state_dict	espnet/asr/pytorch_backend/asr_init.py	/^def get_trained_model_state_dict(model_path):$/;"	f
get_utt_permutation	utils/eval_perm_free_error.py	/^def get_utt_permutation(old_dic, num_spkrs=2):$/;"	f
get_uttid	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^def get_uttid(wav):$/;"	f
get_vgg2l_odim	espnet/nets/chainer_backend/rnn/encoders.py	/^from espnet.nets.e2e_asr_common import get_vgg2l_odim$/;"	i
get_vgg2l_odim	espnet/nets/e2e_asr_common.py	/^def get_vgg2l_odim(idim, in_channel=3, out_channel=128):$/;"	f
get_vgg2l_odim	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.e2e_asr_common import get_vgg2l_odim$/;"	i
get_vgg2l_odim	espnet/nets/pytorch_backend/rnn/encoders.py	/^from espnet.nets.e2e_asr_common import get_vgg2l_odim$/;"	i
get_vp	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^def get_vp(in_lab_file):$/;"	f
github_doc_root	doc/conf.py	/^github_doc_root = 'https:\/\/github.com\/rtfd\/recommonmark\/tree\/master\/doc\/'$/;"	v
glob	doc/module2rst.py	/^from glob import glob$/;"	i
grad_noise	test/test_beam_search.py	/^    grad_noise=False,$/;"	v
griffin_lim	utils/convert_fbank_to_wav.py	/^def griffin_lim(spc, n_fft, n_shift, win_length, window='hann', n_iters=100):$/;"	f
groupby	espnet/nets/e2e_asr_common.py	/^from itertools import groupby$/;"	i
groupby	espnet/nets/pytorch_backend/e2e_asr.py	/^from itertools import groupby$/;"	i
groupby	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from itertools import groupby$/;"	i
groupby	espnet/nets/pytorch_backend/e2e_st.py	/^from itertools import groupby$/;"	i
grouper	espnet/asr/pytorch_backend/asr.py	/^        def grouper(n, iterable, fillvalue=None):$/;"	f	function:recog
grouper	espnet/asr/pytorch_backend/asr.py	/^    def grouper(n, iterable, fillvalue=None):$/;"	f	function:enhance
grouper	espnet/asr/pytorch_backend/asr_mix.py	/^        def grouper(n, iterable, fillvalue=None):$/;"	f	function:recog
grouper	espnet/mt/pytorch_backend/mt.py	/^        def grouper(n, iterable, fillvalue=None):$/;"	f	function:trans
grouper	espnet/st/pytorch_backend/st.py	/^        def grouper(n, iterable, fillvalue=None):$/;"	f	function:trans
h	egs/iwslt18/asr1/local/json2trn_reorder.py	/^    h = codecs.open(args.hyp, 'w', encoding="utf-8")$/;"	v
h	egs/iwslt18/mt1/local/json2trn_reorder.py	/^    h = codecs.open(args.hyp, 'w', encoding="utf-8")$/;"	v
h	egs/iwslt18/st1/local/json2trn_reorder.py	/^    h = codecs.open(args.hyp, 'w', encoding="utf-8")$/;"	v
h	utils/json2text.py	/^    h = codecs.open(args.hyp, 'w', encoding="utf-8")$/;"	v
h5py	espnet/lm/lm_utils.py	/^import h5py$/;"	i
h5py	espnet/transform/cmvn.py	/^import h5py$/;"	i
h5py	espnet/utils/cli_readers.py	/^import h5py$/;"	i
h5py	espnet/utils/cli_writers.py	/^import h5py$/;"	i
h5py	espnet/utils/io_utils.py	/^import h5py$/;"	i
h5py	test/test_utils.py	/^import h5py$/;"	i
h5py	utils/generate_wav_from_fbank.py	/^import h5py$/;"	i
help	doc/make.bat	/^:help$/;"	l
help	doc/module2rst.py	/^                    help='destination path to generate RSTs')$/;"	v
help	doc/module2rst.py	/^                    help='exclude module name')$/;"	v
help	doc/module2rst.py	/^                    help='root module to generate docs recursively')$/;"	v
help	egs/chime5/asr1/local/json2text.py	/^                        help='Type of microphones')$/;"	v
help	egs/commonvoice/asr1/local/filter_text.py	/^                        help='filter list')$/;"	v
help	egs/csj/asr1/local/csj_rm_tag.py	/^                        help='input text')$/;"	v
help	egs/csj/asr1/local/csj_rm_tag.py	/^                        help='skip first n columns')$/;"	v
help	egs/iwslt18/asr1/local/json2trn_reorder.py	/^                        help='text file which describes the order of audio files')$/;"	v
help	egs/iwslt18/asr1/local/reorder_text.py	/^                        help='text file which describes the order of audio files')$/;"	v
help	egs/iwslt18/mt1/local/json2trn_reorder.py	/^                        help='text file which describes the order of audio files')$/;"	v
help	egs/iwslt18/mt1/local/reorder_text.py	/^                        help='text file which describes the order of audio files')$/;"	v
help	egs/iwslt18/st1/local/json2trn_reorder.py	/^                        help='text file which describes the order of audio files')$/;"	v
help	egs/iwslt18/st1/local/reorder_text.py	/^                        help='text file which describes the order of audio files')$/;"	v
help	egs/jnas/asr1/local/clean_text.py	/^                        help="Input transcription type")$/;"	v
help	egs/jnas/asr1/local/filter_text.py	/^                        help='filter list')$/;"	v
help	egs/jnas/tts1/local/clean_text.py	/^                        help="Input transcription type")$/;"	v
help	egs/jnas/tts1/local/filter_text.py	/^                        help='filter list')$/;"	v
help	egs/jsut/tts1/local/clean_text.py	/^                        help="Input transcription type")$/;"	v
help	egs/jvs/tts1/local/clean_text.py	/^                        help="Input transcription type")$/;"	v
help	egs/libri_trans/asr1/local/concat_json_multiref.py	/^                        help='json files')$/;"	v
help	egs/libri_trans/mt1/local/concat_json_multiref.py	/^                        help='json files')$/;"	v
help	egs/libri_trans/st1/local/concat_json_multiref.py	/^                        help='json files')$/;"	v
help	egs/ljspeech/tts1/local/clean_text.py	/^                        help="Input transcription type")$/;"	v
help	egs/ljspeech/tts2/local/clean_text.py	/^                        help="Input transcription type")$/;"	v
help	egs/reverb/asr1/local/filterjson.py	/^                        help='Verbose option')$/;"	v
help	egs/reverb/asr1/local/filterjson.py	/^                        help='json files')$/;"	v
help	egs/reverb/asr1/local/filterjson.py	/^                        help='utterance ID filter')$/;"	v
help	egs/reverb/asr1_multich/local/filterjson.py	/^                        help='Verbose option')$/;"	v
help	egs/reverb/asr1_multich/local/filterjson.py	/^                        help='json files')$/;"	v
help	egs/reverb/asr1_multich/local/filterjson.py	/^                        help='utterance ID filter')$/;"	v
help	egs/voxforge/asr1/local/filter_text.py	/^                        help='filter list')$/;"	v
help	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                        help='The json files except for the input and outputs')$/;"	v
help	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                        help='The output filename. '$/;"	v
help	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                        help='Verbose option')$/;"	v
help	egs/wsj_mix/asr1/local/mergejson.py	/^                        help='Verbose option')$/;"	v
help	egs/wsj_mix/asr1/local/mergejson.py	/^                        help='json files')$/;"	v
help	egs/wsj_mix/asr1/local/mergejson.py	/^                        help='output json file')$/;"	v
hms_to_seconds	egs/chime5/asr1/local/json2text.py	/^def hms_to_seconds(hms):$/;"	f
html_sidebars	doc/conf.py	/^html_sidebars = {$/;"	v
html_theme	doc/conf.py	/^html_theme = 'sphinx_rtd_theme'$/;"	v
html_theme_path	doc/conf.py	/^html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]$/;"	v
htmlhelp_basename	doc/conf.py	/^htmlhelp_basename = 'ESPnetdoc'$/;"	v
hts	egs/jsut/tts1/local/prep_segments.py	/^from nnmnkwii.io import hts$/;"	i
hyps	egs/iwslt18/asr1/local/json2trn_reorder.py	/^    hyps = {}$/;"	v
hyps	egs/iwslt18/mt1/local/json2trn_reorder.py	/^    hyps = {}$/;"	v
hyps	egs/iwslt18/st1/local/json2trn_reorder.py	/^    hyps = {}$/;"	v
i	egs/iwslt18/asr1/local/join_suffix.py	/^            i = i + 1$/;"	v
i	egs/iwslt18/asr1/local/join_suffix.py	/^        i = i + 1$/;"	v
i	egs/iwslt18/asr1/local/join_suffix.py	/^    i = 1$/;"	v
i	egs/iwslt18/mt1/local/join_suffix.py	/^            i = i + 1$/;"	v
i	egs/iwslt18/mt1/local/join_suffix.py	/^        i = i + 1$/;"	v
i	egs/iwslt18/mt1/local/join_suffix.py	/^    i = 1$/;"	v
i	egs/iwslt18/st1/local/join_suffix.py	/^            i = i + 1$/;"	v
i	egs/iwslt18/st1/local/join_suffix.py	/^        i = i + 1$/;"	v
i	egs/iwslt18/st1/local/join_suffix.py	/^    i = 1$/;"	v
i	egs/iwslt19/asr1/local/join_suffix.py	/^            i = i + 1$/;"	v
i	egs/iwslt19/asr1/local/join_suffix.py	/^        i = i + 1$/;"	v
i	egs/iwslt19/asr1/local/join_suffix.py	/^    i = 0$/;"	v
i	egs/iwslt19/st1/local/join_suffix.py	/^            i = i + 1$/;"	v
i	egs/iwslt19/st1/local/join_suffix.py	/^        i = i + 1$/;"	v
i	egs/iwslt19/st1/local/join_suffix.py	/^    i = 0$/;"	v
i	egs/tedlium2/asr1/local/join_suffix.py	/^            i = i + 1$/;"	v
i	egs/tedlium2/asr1/local/join_suffix.py	/^        i = i + 1$/;"	v
i	egs/tedlium2/asr1/local/join_suffix.py	/^    i = 0$/;"	v
i	egs/tedlium3/asr1/local/join_suffix.py	/^            i = i + 1$/;"	v
i	egs/tedlium3/asr1/local/join_suffix.py	/^        i = i + 1$/;"	v
i	egs/tedlium3/asr1/local/join_suffix.py	/^    i = 0$/;"	v
id	egs/arctic/tts1/local/clean_text.py	/^            id = line[0]$/;"	v
id	egs/jnas/asr1/local/clean_text.py	/^            id = line.split(" ")[0]$/;"	v
id	egs/jnas/tts1/local/clean_text.py	/^            id = line.split(" ")[0]$/;"	v
id	egs/tweb/tts1/local/clean_text.py	/^            id = line[0]$/;"	v
id_prefix	egs/jnas/asr1/local/make_eval_trans.py	/^id_prefix = sys.argv[2:]$/;"	v
id_prefix	egs/jnas/asr1/local/make_train_trans.py	/^id_prefix = sys.argv[2]$/;"	v
id_prefix	egs/jnas/tts1/local/make_eval_trans.py	/^id_prefix = sys.argv[2:]$/;"	v
id_prefix	egs/jnas/tts1/local/make_train_trans.py	/^id_prefix = sys.argv[2]$/;"	v
id_prefix	egs/voxforge/asr1/local/make_trans.py	/^id_prefix = sys.argv[2]$/;"	v
identity	espnet/transform/transformation.py	/^    identity='espnet.transform.transform_interface:Identity',$/;"	v
idir	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^idir = sys.argv[1]$/;"	v
ignore_label	espnet/nets/chainer_backend/deterministic_embed_id.py	/^    ignore_label = None$/;"	v	class:EmbedID
ignore_sil	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^def ignore_sil(voice_part_ana, sec=0.1):$/;"	f
imm	doc/argparse2rst.py	/^import importlib.machinery as imm$/;"	i
import	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/asr/pytorch_backend/asr_init.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/bin/asr_train.py	/^    from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/bin/mt_train.py	/^    from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/bin/st_train.py	/^    from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/bin/tts_train.py	/^    from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/nets/asr_interface.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/nets/lm_interface.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/nets/st_interface.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/st/pytorch_backend/st.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/transform/transformation.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
import	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.dynamic_import import dynamic_import$/;"	i
import_alias	espnet/transform/transformation.py	/^import_alias = dict($/;"	v
importlib	doc/argparse2rst.py	/^import importlib.machinery as imm$/;"	i
importlib	doc/module2rst.py	/^import importlib$/;"	i
importlib	espnet/utils/dynamic_import.py	/^import importlib$/;"	i
importlib	test/test_asr_init.py	/^import importlib$/;"	i
importlib	test/test_e2e_asr.py	/^import importlib$/;"	i
importlib	test/test_e2e_asr_mulenc.py	/^import importlib$/;"	i
importlib	test/test_e2e_asr_transducer.py	/^import importlib$/;"	i
importlib	test/test_e2e_asr_transformer.py	/^import importlib$/;"	i
importlib	test/test_e2e_compatibility.py	/^import importlib$/;"	i
importlib	test/test_e2e_mt.py	/^import importlib$/;"	i
importlib	test/test_e2e_st.py	/^import importlib$/;"	i
importlib	test/test_e2e_st_transformer.py	/^import importlib$/;"	i
importlib	test/test_multi_spkrs.py	/^import importlib$/;"	i
importlib	test/test_recog.py	/^import importlib$/;"	i
importlib	tools/check_install.py	/^import importlib$/;"	i
in_add_dic	utils/addjson.py	/^            in_add_dic = {}$/;"	v
in_dic	egs/wsj_mix/asr1/local/mergejson.py	/^        in_dic = {}$/;"	v
indent	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        indent = '    ' * 2$/;"	v
indent	utils/merge_scp2json.py	/^        indent = '    ' * 2$/;"	v
indent	utils/splitjson.py	/^                                indent=4,$/;"	v
index_select_state	espnet/nets/ctc_prefix_score.py	/^    def index_select_state(self, state, best_ids):$/;"	m	class:CTCPrefixScoreTH
inference	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^    def inference(self, x, inference_args, spemb=None, *args, **kwargs):$/;"	m	class:FeedForwardTransformer
inference	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^    def inference(self, x, inference_args, spemb=None, *args, **kwargs):$/;"	m	class:Tacotron2
inference	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def inference(self, x, inference_args, spemb=None, *args, **kwargs):$/;"	m	class:Transformer
inference	espnet/nets/pytorch_backend/fastspeech/duration_predictor.py	/^    def inference(self, xs, x_masks=None):$/;"	m	class:DurationPredictor
inference	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^    def inference(self, x):$/;"	m	class:CBHG
inference	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^    def inference(self, h, threshold=0.5, minlenratio=0.0, maxlenratio=10.0):$/;"	m	class:Decoder
inference	espnet/nets/pytorch_backend/tacotron2/encoder.py	/^    def inference(self, x):$/;"	m	class:Encoder
inference	espnet/nets/tts_interface.py	/^    def inference(self, *args, **kwargs):$/;"	m	class:TTSInterface
inflect	egs/arctic/tts1/local/text/numbers.py	/^import inflect$/;"	i
inflect	egs/ljspeech/tts1/local/text/numbers.py	/^import inflect$/;"	i
inflect	egs/ljspeech/tts2/local/text/numbers.py	/^import inflect$/;"	i
inflect	egs/tweb/tts1/local/text/numbers.py	/^import inflect$/;"	i
infos	egs/wsj_mix/asr1/local/merge_scp2json.py	/^    infos = []$/;"	v
infos	utils/merge_scp2json.py	/^    infos = []$/;"	v
init_chainer_weight_const	test/test_e2e_asr.py	/^def init_chainer_weight_const(m, val):$/;"	f
init_chainer_weight_const	test/test_e2e_st.py	/^def init_chainer_weight_const(m, val):$/;"	f
init_chainer_weight_const	test/test_multi_spkrs.py	/^def init_chainer_weight_const(m, val):$/;"	f
init_chainer_weight_const	test/test_recog.py	/^def init_chainer_weight_const(m, val):$/;"	f
init_hyp	espnet/nets/beam_search.py	/^    def init_hyp(self, x: torch.Tensor) -> Hypothesis:$/;"	m	class:BeamSearch
init_like_chainer	espnet/nets/pytorch_backend/e2e_asr.py	/^    def init_like_chainer(self):$/;"	m	class:E2E
init_like_chainer	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def init_like_chainer(self):$/;"	m	class:E2E
init_like_chainer	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def init_like_chainer(self):$/;"	m	class:E2E
init_like_chainer	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^    def init_like_chainer(self):$/;"	m	class:E2E
init_like_chainer	espnet/nets/pytorch_backend/e2e_st.py	/^    def init_like_chainer(self):$/;"	m	class:E2E
init_like_fairseq	espnet/nets/pytorch_backend/e2e_mt.py	/^    def init_like_fairseq(self):$/;"	m	class:E2E
init_state	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^    def init_state(self, x):$/;"	m	class:SequentialRNNLM
init_state	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def init_state(self, x):$/;"	m	class:Decoder
init_state	espnet/nets/pytorch_backend/transformer/decoder.py	/^    def init_state(self, x=None):$/;"	m	class:Decoder
init_state	espnet/nets/scorer_interface.py	/^    def init_state(self, x: torch.Tensor) -> Any:$/;"	m	class:ScorerInterface
init_state	espnet/nets/scorers/ctc.py	/^    def init_state(self, x: torch.Tensor):$/;"	m	class:CTCPrefixScorer
init_torch_weight_const	test/test_e2e_asr.py	/^def init_torch_weight_const(m, val):$/;"	f
init_torch_weight_const	test/test_e2e_asr_mulenc.py	/^def init_torch_weight_const(m, val):$/;"	f
init_torch_weight_const	test/test_e2e_mt.py	/^def init_torch_weight_const(m, val):$/;"	f
init_torch_weight_const	test/test_e2e_st.py	/^def init_torch_weight_const(m, val):$/;"	f
init_torch_weight_const	test/test_multi_spkrs.py	/^def init_torch_weight_const(m, val):$/;"	f
init_torch_weight_const	test/test_recog.py	/^def init_torch_weight_const(m, val):$/;"	f
init_torch_weight_random	test/test_recog.py	/^def init_torch_weight_random(m, rand_range):$/;"	f
initial_att	espnet/nets/pytorch_backend/rnn/attentions.py	/^def initial_att(atype, eprojs, dunits, aheads, adim, awin, aconv_chans, aconv_filts, han_mode=False):$/;"	f
initial_state	espnet/nets/ctc_prefix_score.py	/^    def initial_state(self):$/;"	m	class:CTCPrefixScore
initialize	espnet/nets/chainer_backend/transformer/training.py	/^    def initialize(self, trainer):$/;"	m	class:VaswaniRule
initialize	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.transformer.initializer import initialize$/;"	i
initialize	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.transformer.initializer import initialize$/;"	i
initialize	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.transformer.initializer import initialize$/;"	i
initialize	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.transformer.initializer import initialize$/;"	i
initialize	espnet/nets/pytorch_backend/transformer/initializer.py	/^def initialize(model, init_type="pytorch"):$/;"	f
initialize	espnet/nets/pytorch_backend/wavenet.py	/^def initialize(m):$/;"	f
input_files	egs/reverb/asr1/local/run_wpe.py	/^input_files = args.files[:len(args.files)\/\/2]$/;"	v
input_files	egs/reverb/asr1_multich/local/run_wpe.py	/^input_files = args.files[:len(args.files)\/\/2]$/;"	v
input_fscps	egs/wsj_mix/asr1/local/merge_scp2json.py	/^    input_fscps = [[open(i[1], 'r', encoding='utf-8')$/;"	v
input_fscps	utils/merge_scp2json.py	/^    input_fscps = [[open(i[1], 'r', encoding='utf-8')$/;"	v
input_infos	egs/wsj_mix/asr1/local/merge_scp2json.py	/^    input_infos = []$/;"	v
input_infos	utils/merge_scp2json.py	/^    input_infos = []$/;"	v
input_lines	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        input_lines = [[f.readline() for f in fl] for fl in input_fscps]$/;"	v
input_lines	utils/merge_scp2json.py	/^        input_lines = [[f.readline() for f in fl] for fl in input_fscps]$/;"	v
input_list	utils/addjson.py	/^            input_list = orgdic['input']$/;"	v
inspect	espnet/transform/functional.py	/^import inspect$/;"	i
inspect	espnet/utils/check_kwargs.py	/^import inspect$/;"	i
install_requires	setup.py	/^      install_requires=install_requires,$/;"	v
install_requires	setup.py	/^install_requires = requirements['install']$/;"	v
interpolate_bilinear	espnet/utils/spec_augment.py	/^def interpolate_bilinear(grid,$/;"	f
interpolate_spline	espnet/utils/spec_augment.py	/^def interpolate_spline(train_points, train_values, query_points, order, regularization_weight=0.0,):$/;"	f
intersec_add_dic	utils/addjson.py	/^    intersec_add_dic = dict()$/;"	v
intersec_ks	egs/wsj_mix/asr1/local/mergejson.py	/^            intersec_ks = intersec_ks.intersection(set(ks))$/;"	v
intersec_ks	egs/wsj_mix/asr1/local/mergejson.py	/^            intersec_ks = set(ks)$/;"	v
intersec_ks	egs/wsj_mix/asr1/local/mergejson.py	/^    intersec_ks = []$/;"	v
intersec_ks	utils/addjson.py	/^            intersec_ks = intersec_ks.intersection(set(ks))$/;"	v
intersec_ks	utils/addjson.py	/^            intersec_ks = set(ks)$/;"	v
intersec_ks	utils/addjson.py	/^    intersec_ks = []$/;"	v
intersec_ks	utils/mergejson.py	/^                        intersec_ks = intersec_ks.intersection(set(ks))$/;"	v
intersec_ks	utils/mergejson.py	/^                        intersec_ks = set(ks)$/;"	v
intersec_ks	utils/mergejson.py	/^    intersec_ks = None  # Set[str]$/;"	v
intersec_org_dic	utils/addjson.py	/^    intersec_org_dic = dict()$/;"	v
invocab_count	utils/text2vocabulary.py	/^    invocab_count = 0$/;"	v
io	espnet/transform/cmvn.py	/^import io$/;"	i
io	espnet/transform/transformation.py	/^import io$/;"	i
io	espnet/utils/cli_readers.py	/^import io$/;"	i
io	espnet/utils/io_utils.py	/^import io$/;"	i
io	utils/mix-mono-wav-scp.py	/^import io$/;"	i
is_scipy_wav_style	espnet/utils/cli_utils.py	/^def is_scipy_wav_style(value):$/;"	f
is_scipy_wav_style	utils/apply-cmvn.py	/^from espnet.utils.cli_utils import is_scipy_wav_style$/;"	i
is_scipy_wav_style	utils/compute-cmvn-stats.py	/^from espnet.utils.cli_utils import is_scipy_wav_style$/;"	i
is_scipy_wav_style	utils/copy-feats.py	/^from espnet.utils.cli_utils import is_scipy_wav_style$/;"	i
is_scipy_wav_style	utils/feat-to-shape.py	/^from espnet.utils.cli_utils import is_scipy_wav_style$/;"	i
is_torch_1_2_plus	espnet/bin/asr_train.py	/^is_torch_1_2_plus = LooseVersion(torch.__version__) >= LooseVersion('1.2')$/;"	v
is_torch_1_2_plus	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^is_torch_1_2_plus = LooseVersion(torch.__version__) >= LooseVersion('1.2')$/;"	v
is_torch_1_2_plus	espnet/nets/pytorch_backend/transformer/mask.py	/^is_torch_1_2_plus = LooseVersion(torch.__version__) >= LooseVersion('1.2.0')$/;"	v
istft	egs/reverb/asr1/local/run_wpe.py	/^from nara_wpe.utils import stft, istft $/;"	i
istft	egs/reverb/asr1_multich/local/run_wpe.py	/^from nara_wpe.utils import stft, istft $/;"	i
istft	espnet/transform/spectrogram.py	/^def istft(x, n_shift, win_length=None, window='hann', center=True):$/;"	f
istft	espnet/transform/transformation.py	/^    istft='espnet.transform.spectrogram:IStft',$/;"	v
items	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^    items = lex.split()$/;"	v
items	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^    items = single_letter_lex.split()$/;"	v
items	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^    items = line.split()$/;"	v
items	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^    items = pair.split('\\t')$/;"	v
items	egs/iwslt18/asr1/local/join_suffix.py	/^    items = line.split()$/;"	v
items	egs/iwslt18/mt1/local/join_suffix.py	/^    items = line.split()$/;"	v
items	egs/iwslt18/st1/local/join_suffix.py	/^    items = line.split()$/;"	v
items	egs/iwslt19/asr1/local/join_suffix.py	/^    items = line.split()$/;"	v
items	egs/iwslt19/st1/local/join_suffix.py	/^    items = line.split()$/;"	v
items	egs/swbd/asr1/local/format_acronyms_dict.py	/^    items = lex.split()$/;"	v
items	egs/swbd/asr1/local/format_acronyms_dict.py	/^    items = single_letter_lex.split()$/;"	v
items	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^    items = line.split()$/;"	v
items	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^    items = pair.split('\\t')$/;"	v
items	egs/tedlium2/asr1/local/join_suffix.py	/^    items = line.split()$/;"	v
items	egs/tedlium3/asr1/local/join_suffix.py	/^    items = line.split()$/;"	v
items	espnet/utils/io_utils.py	/^    def items(self):$/;"	m	class:SoundHDF5File
iterations	egs/reverb/asr1/local/run_wpe.py	/^iterations = 5$/;"	v
iterations	egs/reverb/asr1_multich/local/run_wpe.py	/^iterations = 5$/;"	v
itertools	espnet/utils/training/batchfy.py	/^import itertools$/;"	i
itertools	utils/eval-source-separation.py	/^import itertools$/;"	i
j	egs/chime5/asr1/local/json2text.py	/^        j = json.load(f)$/;"	v
j	egs/iwslt18/asr1/local/json2trn_reorder.py	/^        j = json.load(f)$/;"	v
j	egs/iwslt18/mt1/local/json2trn_reorder.py	/^        j = json.load(f)$/;"	v
j	egs/iwslt18/st1/local/json2trn_reorder.py	/^        j = json.load(f)$/;"	v
j	egs/libri_trans/asr1/local/concat_json_multiref.py	/^            j = json.load(f)$/;"	v
j	egs/libri_trans/mt1/local/concat_json_multiref.py	/^            j = json.load(f)$/;"	v
j	egs/libri_trans/st1/local/concat_json_multiref.py	/^            j = json.load(f)$/;"	v
j	egs/reverb/asr1/local/filterjson.py	/^            j = json.load(f)$/;"	v
j	egs/reverb/asr1_multich/local/filterjson.py	/^            j = json.load(f)$/;"	v
j	egs/wsj_mix/asr1/local/mergejson.py	/^            j = json.load(f)$/;"	v
j	utils/addjson.py	/^            j = json.load(f)$/;"	v
j	utils/concatjson.py	/^            j = json.load(f)$/;"	v
j	utils/json2text.py	/^        j = json.load(f)$/;"	v
j	utils/mergejson.py	/^                        j = json.load(f)$/;"	v
j	utils/splitjson.py	/^    j = json.load(codecs.open(args.json, 'r', encoding="utf-8"))$/;"	v
jaconv	egs/jnas/asr1/local/clean_text.py	/^import jaconv$/;"	i
jaconv	egs/jnas/tts1/local/clean_text.py	/^import jaconv$/;"	i
jaconv	egs/jsut/tts1/local/clean_text.py	/^import jaconv$/;"	i
jaconv	egs/jvs/tts1/local/clean_text.py	/^import jaconv$/;"	i
join	test/test_e2e_compatibility.py	/^from os.path import join$/;"	i
join	utils/feats2npy.py	/^from os.path import join$/;"	i
joint	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def joint(self, h_enc, h_dec):$/;"	m	class:DecoderRNNT
joint	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def joint(self, h_enc, h_dec):$/;"	m	class:DecoderRNNTAtt
js	egs/libri_trans/asr1/local/concat_json_multiref.py	/^            js = j['utts']$/;"	v
js	egs/libri_trans/asr1/local/concat_json_multiref.py	/^    js = {}$/;"	v
js	egs/libri_trans/mt1/local/concat_json_multiref.py	/^            js = j['utts']$/;"	v
js	egs/libri_trans/mt1/local/concat_json_multiref.py	/^    js = {}$/;"	v
js	egs/libri_trans/st1/local/concat_json_multiref.py	/^            js = j['utts']$/;"	v
js	egs/libri_trans/st1/local/concat_json_multiref.py	/^    js = {}$/;"	v
js	egs/wsj_mix/asr1/local/mergejson.py	/^    js = []$/;"	v
js	utils/addjson.py	/^    js = []$/;"	v
js	utils/concatjson.py	/^    js = {}$/;"	v
js	utils/mergejson.py	/^            js = []$/;"	v
js_dict	utils/mergejson.py	/^    js_dict = {}  # Dict[str, List[List[Dict[str, Dict[str, dict]]]]]$/;"	v
json	egs/chime5/asr1/local/json2text.py	/^import json$/;"	i
json	egs/iwslt18/asr1/local/json2trn_reorder.py	/^import json$/;"	i
json	egs/iwslt18/mt1/local/json2trn_reorder.py	/^import json$/;"	i
json	egs/iwslt18/st1/local/json2trn_reorder.py	/^import json$/;"	i
json	egs/libri_trans/asr1/local/concat_json_multiref.py	/^import json$/;"	i
json	egs/libri_trans/mt1/local/concat_json_multiref.py	/^import json$/;"	i
json	egs/libri_trans/st1/local/concat_json_multiref.py	/^import json$/;"	i
json	egs/m_ailabs/tts1/local/parse_text.py	/^import json$/;"	i
json	egs/reverb/asr1/local/filterjson.py	/^import json$/;"	i
json	egs/reverb/asr1_multich/local/filterjson.py	/^import json$/;"	i
json	egs/wsj_mix/asr1/local/merge_scp2json.py	/^import json$/;"	i
json	egs/wsj_mix/asr1/local/mergejson.py	/^import json$/;"	i
json	espnet/asr/asr_utils.py	/^import json$/;"	i
json	espnet/asr/chainer_backend/asr.py	/^import json$/;"	i
json	espnet/asr/pytorch_backend/asr.py	/^import json$/;"	i
json	espnet/asr/pytorch_backend/asr_mix.py	/^import json$/;"	i
json	espnet/asr/pytorch_backend/recog.py	/^import json$/;"	i
json	espnet/lm/chainer_backend/lm.py	/^import json$/;"	i
json	espnet/lm/pytorch_backend/lm.py	/^import json$/;"	i
json	espnet/mt/pytorch_backend/mt.py	/^import json$/;"	i
json	espnet/nets/e2e_asr_common.py	/^import json$/;"	i
json	espnet/st/pytorch_backend/st.py	/^import json$/;"	i
json	espnet/tts/pytorch_backend/tts.py	/^import json$/;"	i
json	test/test_asr_init.py	/^import json$/;"	i
json	test/test_e2e_tts_fastspeech.py	/^import json$/;"	i
json	utils/addjson.py	/^import json$/;"	i
json	utils/average_checkpoints.py	/^import json$/;"	i
json	utils/concatjson.py	/^import json$/;"	i
json	utils/eval_perm_free_error.py	/^import json$/;"	i
json	utils/json2text.py	/^import json$/;"	i
json	utils/json2trn.py	/^import json$/;"	i
json	utils/json2trn_mt.py	/^import json$/;"	i
json	utils/json2trn_wo_dict.py	/^import json$/;"	i
json	utils/merge_scp2json.py	/^import json$/;"	i
json	utils/mergejson.py	/^import json$/;"	i
json	utils/result2json.py	/^import json$/;"	i
json	utils/scp2json.py	/^import json$/;"	i
json	utils/splitjson.py	/^import json$/;"	i
json2trn	utils/json2sctm.py	/^    from utils import json2trn$/;"	i
jsonstring	egs/libri_trans/asr1/local/concat_json_multiref.py	/^    jsonstring = json.dumps({'utts': js}, indent=4, sort_keys=True,$/;"	v
jsonstring	egs/libri_trans/mt1/local/concat_json_multiref.py	/^    jsonstring = json.dumps({'utts': js}, indent=4, sort_keys=True,$/;"	v
jsonstring	egs/libri_trans/st1/local/concat_json_multiref.py	/^    jsonstring = json.dumps({'utts': js}, indent=4, sort_keys=True,$/;"	v
jsonstring	egs/reverb/asr1/local/filterjson.py	/^    jsonstring = json.dumps({'utts': new_dic}, indent=4, ensure_ascii=False, sort_keys=True)$/;"	v
jsonstring	egs/reverb/asr1_multich/local/filterjson.py	/^    jsonstring = json.dumps({'utts': new_dic}, indent=4, ensure_ascii=False, sort_keys=True)$/;"	v
jsonstring	utils/addjson.py	/^    jsonstring = json.dumps({'utts': new_dic}, indent=4, ensure_ascii=False,$/;"	v
jsonstring	utils/concatjson.py	/^    jsonstring = json.dumps({'utts': js}, indent=4, sort_keys=True,$/;"	v
jsonstring	utils/result2json.py	/^    jsonstring = json.dumps(all_l, indent=4, ensure_ascii=False, sort_keys=True, separators=(',', ': '))$/;"	v
jsonstring	utils/scp2json.py	/^    jsonstring = json.dumps(all_l, indent=4, ensure_ascii=False, sort_keys=True, separators=(',', ': '))$/;"	v
jsonstring	utils/splitjson.py	/^        jsonstring = json.dumps({'utts': new_dic},$/;"	v
kaldi_io	test/test_io_voxforge.py	/^    import kaldi_io$/;"	i
kaldiio	espnet/transform/cmvn.py	/^import kaldiio$/;"	i
kaldiio	espnet/tts/pytorch_backend/tts.py	/^import kaldiio$/;"	i
kaldiio	espnet/utils/cli_readers.py	/^import kaldiio$/;"	i
kaldiio	espnet/utils/cli_writers.py	/^import kaldiio$/;"	i
kaldiio	espnet/utils/io_utils.py	/^import kaldiio$/;"	i
kaldiio	test/test_io_voxforge.py	/^    import kaldiio$/;"	i
kaldiio	test/test_transform.py	/^import kaldiio$/;"	i
kaldiio	test/test_utils.py	/^import kaldiio$/;"	i
kaldiio	utils/apply-cmvn.py	/^import kaldiio$/;"	i
kaldiio	utils/compute-cmvn-stats.py	/^import kaldiio$/;"	i
kaldiio	utils/compute-fbank-feats.py	/^import kaldiio$/;"	i
kaldiio	utils/compute-stft-feats.py	/^import kaldiio$/;"	i
kaldiio	utils/dump-pcm.py	/^import kaldiio$/;"	i
kaldiio	utils/trim_silence.py	/^import kaldiio$/;"	i
kanaseq2phoneseq	egs/csj/asr1/local/csj_make_trans/vocab2dic.pl	/^sub kanaseq2phoneseq($) {$/;"	s
key	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                    key = info[0]$/;"	v
key	utils/merge_scp2json.py	/^                    key = info[0]$/;"	v
key	utils/result2json.py	/^    key = re.findall(r"r\\d+h\\d+", args.key)[0]$/;"	v
keys	espnet/utils/io_utils.py	/^    def keys(self):$/;"	m	class:SoundHDF5File
ks	egs/libri_trans/asr1/local/concat_json_multiref.py	/^        ks = j['utts'].keys()$/;"	v
ks	egs/libri_trans/mt1/local/concat_json_multiref.py	/^        ks = j['utts'].keys()$/;"	v
ks	egs/libri_trans/st1/local/concat_json_multiref.py	/^        ks = j['utts'].keys()$/;"	v
ks	egs/reverb/asr1/local/filterjson.py	/^        ks = j['utts'].keys()$/;"	v
ks	egs/reverb/asr1_multich/local/filterjson.py	/^        ks = j['utts'].keys()$/;"	v
ks	egs/wsj_mix/asr1/local/mergejson.py	/^        ks = j['utts'].keys()$/;"	v
ks	utils/addjson.py	/^        ks = j['utts'].keys()$/;"	v
ks	utils/concatjson.py	/^        ks = j['utts'].keys()$/;"	v
ks	utils/mergejson.py	/^                    ks = list(j['utts'].keys())$/;"	v
lab_path	egs/jsut/tts1/local/prep_segments.py	/^            lab_path = path.replace("wav\/", "lab\/").replace(".wav", ".lab")$/;"	v
label_smoothing_dist	espnet/nets/chainer_backend/e2e_asr.py	/^from espnet.nets.e2e_asr_common import label_smoothing_dist$/;"	i
label_smoothing_dist	espnet/nets/e2e_asr_common.py	/^def label_smoothing_dist(odim, lsm_type, transcript=None, blank=0):$/;"	f
label_smoothing_dist	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.e2e_asr_common import label_smoothing_dist$/;"	i
label_smoothing_dist	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.e2e_asr_common import label_smoothing_dist$/;"	i
label_smoothing_dist	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.nets.e2e_asr_common import label_smoothing_dist$/;"	i
label_smoothing_dist	espnet/nets/pytorch_backend/e2e_mt.py	/^from espnet.nets.e2e_asr_common import label_smoothing_dist$/;"	i
label_smoothing_dist	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.e2e_asr_common import label_smoothing_dist$/;"	i
labels	egs/jsut/tts1/local/prep_segments.py	/^            labels = hts.load(lab_path)$/;"	v
language	doc/conf.py	/^language = None$/;"	v
latex_documents	doc/conf.py	/^latex_documents = [$/;"	v
latex_elements	doc/conf.py	/^latex_elements = {$/;"	v
lecun_normal_init_parameters	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.pytorch_backend.initialization import lecun_normal_init_parameters$/;"	i
lecun_normal_init_parameters	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^        def lecun_normal_init_parameters(module):$/;"	f	function:E2E.init_like_chainer
lecun_normal_init_parameters	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^        def lecun_normal_init_parameters(module):$/;"	f	function:E2E.init_like_chainer
lecun_normal_init_parameters	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^        def lecun_normal_init_parameters(module):$/;"	f	function:E2E.init_like_chainer
lecun_normal_init_parameters	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.pytorch_backend.initialization import lecun_normal_init_parameters$/;"	i
lecun_normal_init_parameters	espnet/nets/pytorch_backend/initialization.py	/^def lecun_normal_init_parameters(module):$/;"	f
lexicon	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^    lexicon = lex[len(items[0])+1:].strip()$/;"	v
lexicon	egs/swbd/asr1/local/format_acronyms_dict.py	/^    lexicon = lex[len(items[0])+1:].strip()$/;"	v
librosa	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^import librosa$/;"	i
librosa	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^import librosa$/;"	i
librosa	espnet/transform/perturb.py	/^import librosa$/;"	i
librosa	espnet/transform/spectrogram.py	/^import librosa$/;"	i
librosa	utils/convert_fbank_to_wav.py	/^import librosa$/;"	i
librosa	utils/trim_silence.py	/^import librosa$/;"	i
license	setup.py	/^      license='Apache Software License',$/;"	v
line	egs/an4/asr1/local/data_prep.py	/^            line = line.strip()$/;"	v
line	egs/an4/tts1/local/data_prep.py	/^            line = line.strip()$/;"	v
line	egs/arctic/tts1/local/clean_text.py	/^            line = line.split(" ")$/;"	v
line	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^    line = line.strip()$/;"	v
line	egs/mini_an4/asr1/local/data_prep.py	/^            line = line.strip()$/;"	v
line	egs/mini_an4/asr_mix1/local/data_prep.py	/^            line = line.strip()$/;"	v
line	egs/mini_an4/tts1/local/data_prep.py	/^            line = line.strip()$/;"	v
line	egs/tweb/tts1/local/clean_text.py	/^            line = line.split(" ")$/;"	v
line	utils/result2json.py	/^        line = sys.stdin.readline()$/;"	v
line	utils/result2json.py	/^    line = sys.stdin.readline()$/;"	v
line	utils/scp2json.py	/^        line = sys.stdin.readline()$/;"	v
line	utils/scp2json.py	/^    line = sys.stdin.readline()$/;"	v
linear_shift	egs/dirha_wsj/asr1/local/tools/linear_shift.m	/^function [ x_shift ] = linear_shift(x,p)$/;"	f
linear_units	test/test_transformer_decode.py	/^        linear_units=3,$/;"	v
lines	egs/an4/asr1/local/data_prep.py	/^        lines = sorted(transcript_f.readlines(), key=lambda s: s.split(' ')[0])$/;"	v
lines	egs/an4/tts1/local/data_prep.py	/^        lines = sorted(transcript_f.readlines(), key=lambda s: s.split(' ')[0])$/;"	v
lines	egs/mini_an4/asr1/local/data_prep.py	/^        lines = sorted(transcript_f.readlines(), key=lambda s: s.split(' ')[0])$/;"	v
lines	egs/mini_an4/asr_mix1/local/data_prep.py	/^        lines = sorted(transcript_f.readlines(), key=lambda s: s.split(' ')[0])$/;"	v
lines	egs/mini_an4/tts1/local/data_prep.py	/^        lines = sorted(transcript_f.readlines(), key=lambda s: s.split(' ')[0])$/;"	v
lines	egs/vais1000/tts1/local/clean_text.py	/^    lines = {}$/;"	v
lines	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        lines = [[f.readline() for f in fl] for fl in fscps]$/;"	v
lines	utils/merge_scp2json.py	/^        lines = [[f.readline() for f in fl] for fl in fscps]$/;"	v
link	espnet/lm/chainer_backend/lm.py	/^from chainer import link$/;"	i
link	espnet/nets/chainer_backend/deterministic_embed_id.py	/^from chainer import link$/;"	i
lis	egs/wsj_mix/asr1/local/merge_scp2json.py	/^            lis = []$/;"	v
lis	utils/merge_scp2json.py	/^            lis = []$/;"	v
lm	espnet/asr/chainer_backend/asr.py	/^import espnet.lm.chainer_backend.extlm as extlm_chainer$/;"	i
lm	espnet/asr/chainer_backend/asr.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
lm	espnet/asr/pytorch_backend/asr.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
lm	espnet/asr/pytorch_backend/asr.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
lm	espnet/asr/pytorch_backend/asr_mix.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
lm	espnet/asr/pytorch_backend/asr_mix.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
lm	espnet/mt/pytorch_backend/mt.py	/^import espnet.lm.pytorch_backend.lm as lm_pytorch$/;"	i
lm	espnet/st/pytorch_backend/st.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
lm	test/test_lm.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
lm	test/test_lm.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
lm	test/test_recog.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
lm	test/test_recog.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
lm	test/test_recog.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
lm_chainer	espnet/asr/chainer_backend/asr.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
lm_chainer	test/test_lm.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
lm_chainer	test/test_recog.py	/^import espnet.lm.chainer_backend.lm as lm_chainer$/;"	i
lm_pytorch	espnet/asr/pytorch_backend/asr.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
lm_pytorch	espnet/asr/pytorch_backend/asr_mix.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
lm_pytorch	espnet/mt/pytorch_backend/mt.py	/^import espnet.lm.pytorch_backend.lm as lm_pytorch$/;"	i
lm_pytorch	espnet/st/pytorch_backend/st.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
lm_pytorch	test/test_lm.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
lm_pytorch	test/test_recog.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
lm_weight	test/test_beam_search.py	/^    lm_weight=0.0,$/;"	v
load_dataset	espnet/lm/lm_utils.py	/^def load_dataset(path, label_dict, outdir=None):$/;"	f
load_dataset	espnet/lm/pytorch_backend/lm.py	/^from espnet.lm.lm_utils import load_dataset$/;"	i
load_pretrained_model	espnet/nets/tts_interface.py	/^    def load_pretrained_model(self, model_path):$/;"	m	class:TTSInterface
load_state_dict	espnet/nets/pytorch_backend/lm/default.py	/^    def load_state_dict(self, d):$/;"	m	class:DefaultRNNLM
load_state_dict	espnet/nets/pytorch_backend/transformer/optimizer.py	/^    def load_state_dict(self, state_dict):$/;"	m	class:NoamOpt
load_trained_model	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.pytorch_backend.asr_init import load_trained_model$/;"	i
load_trained_model	espnet/asr/pytorch_backend/asr_init.py	/^def load_trained_model(model_path):$/;"	f
load_trained_model	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.pytorch_backend.asr import load_trained_model$/;"	i
load_trained_model	espnet/asr/pytorch_backend/recog.py	/^from espnet.asr.pytorch_backend.asr import load_trained_model$/;"	i
load_trained_model	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.pytorch_backend.asr import load_trained_model$/;"	i
load_trained_model	espnet/st/pytorch_backend/st.py	/^from espnet.asr.pytorch_backend.asr_init import load_trained_model$/;"	i
load_trained_modules	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.pytorch_backend.asr_init import load_trained_modules$/;"	i
load_trained_modules	espnet/asr/pytorch_backend/asr_init.py	/^def load_trained_modules(idim, odim, args, interface=ASRInterface):$/;"	f
load_trained_modules	espnet/st/pytorch_backend/st.py	/^from espnet.asr.pytorch_backend.asr_init import load_trained_modules$/;"	i
location	egs/chime5/asr1/local/json2text.py	/^                location = 'NOLOCATION'$/;"	v
location	egs/chime5/asr1/local/json2text.py	/^                location = x['location'].upper()$/;"	v
log_attentions	espnet/asr/asr_mix_utils.py	/^    def log_attentions(self, logger, step):$/;"	m	class:PlotAttentionReport
log_attentions	espnet/asr/asr_utils.py	/^    def log_attentions(self, logger, step):$/;"	m	class:PlotAttentionReport
log_attentions	espnet/nets/chainer_backend/transformer/plot.py	/^    def log_attentions(self, logger, step):$/;"	m	class:PlotAttentionReport
log_attentions	espnet/nets/pytorch_backend/transformer/plot.py	/^    def log_attentions(self, logger, step):$/;"	m	class:PlotAttentionReport
log_fig	espnet/nets/chainer_backend/transformer/plot.py	/^        def log_fig(plot, filename):$/;"	f	function:PlotAttentionReport.log_attentions
log_fig	espnet/nets/pytorch_backend/transformer/plot.py	/^        def log_fig(plot, filename):$/;"	f	function:PlotAttentionReport.log_attentions
log_format	egs/chime5/asr1/local/json2text.py	/^    log_format = "%(asctime)s (%(module)s:%(lineno)d) %(levelname)s:%(message)s"$/;"	v
log_softmax	espnet/nets/chainer_backend/ctc.py	/^    def log_softmax(self, hs):$/;"	m	class:CTC
log_softmax	espnet/nets/chainer_backend/ctc.py	/^    def log_softmax(self, hs):$/;"	m	class:WarpCTC
log_softmax	espnet/nets/chainer_backend/transformer/ctc.py	/^    def log_softmax(self, hs):$/;"	m	class:CTC
log_softmax	espnet/nets/chainer_backend/transformer/ctc.py	/^    def log_softmax(self, hs):$/;"	m	class:WarpCTC
log_softmax	espnet/nets/pytorch_backend/ctc.py	/^    def log_softmax(self, hs_pad):$/;"	m	class:CTC
logfmt	egs/libri_trans/asr1/local/concat_json_multiref.py	/^    logfmt = '%(asctime)s (%(module)s:%(lineno)d) %(levelname)s: %(message)s'$/;"	v
logfmt	egs/libri_trans/mt1/local/concat_json_multiref.py	/^    logfmt = '%(asctime)s (%(module)s:%(lineno)d) %(levelname)s: %(message)s'$/;"	v
logfmt	egs/libri_trans/st1/local/concat_json_multiref.py	/^    logfmt = '%(asctime)s (%(module)s:%(lineno)d) %(levelname)s: %(message)s'$/;"	v
logfmt	egs/wsj_mix/asr1/local/merge_scp2json.py	/^    logfmt = "%(asctime)s (%(module)s:%(lineno)d) %(levelname)s: %(message)s"$/;"	v
logfmt	utils/addjson.py	/^    logfmt = '%(asctime)s (%(module)s:%(lineno)d) %(levelname)s: %(message)s'$/;"	v
logfmt	utils/concatjson.py	/^    logfmt = '%(asctime)s (%(module)s:%(lineno)d) %(levelname)s: %(message)s'$/;"	v
logfmt	utils/json2text.py	/^    logfmt = "%(asctime)s (%(module)s:%(lineno)d) %(levelname)s: %(message)s"$/;"	v
logfmt	utils/merge_scp2json.py	/^    logfmt = "%(asctime)s (%(module)s:%(lineno)d) %(levelname)s: %(message)s"$/;"	v
logfmt	utils/mergejson.py	/^    logfmt = "%(asctime)s (%(module)s:%(lineno)d) %(levelname)s: %(message)s"$/;"	v
logging	doc/argparse2rst.py	/^import logging$/;"	i
logging	egs/chime5/asr1/local/json2text.py	/^import logging$/;"	i
logging	egs/iwslt18/asr1/local/json2trn_reorder.py	/^import logging$/;"	i
logging	egs/iwslt18/asr1/local/reorder_text.py	/^import logging$/;"	i
logging	egs/iwslt18/mt1/local/json2trn_reorder.py	/^import logging$/;"	i
logging	egs/iwslt18/mt1/local/reorder_text.py	/^import logging$/;"	i
logging	egs/iwslt18/st1/local/json2trn_reorder.py	/^import logging$/;"	i
logging	egs/iwslt18/st1/local/reorder_text.py	/^import logging$/;"	i
logging	egs/libri_trans/asr1/local/concat_json_multiref.py	/^import logging$/;"	i
logging	egs/libri_trans/mt1/local/concat_json_multiref.py	/^import logging$/;"	i
logging	egs/libri_trans/st1/local/concat_json_multiref.py	/^import logging$/;"	i
logging	egs/reverb/asr1/local/filterjson.py	/^import logging$/;"	i
logging	egs/reverb/asr1_multich/local/filterjson.py	/^import logging$/;"	i
logging	egs/wsj_mix/asr1/local/merge_scp2json.py	/^import logging$/;"	i
logging	egs/wsj_mix/asr1/local/mergejson.py	/^import logging$/;"	i
logging	espnet/asr/asr_mix_utils.py	/^import logging$/;"	i
logging	espnet/asr/asr_utils.py	/^import logging$/;"	i
logging	espnet/asr/chainer_backend/asr.py	/^import logging$/;"	i
logging	espnet/asr/pytorch_backend/asr.py	/^import logging$/;"	i
logging	espnet/asr/pytorch_backend/asr_init.py	/^import logging$/;"	i
logging	espnet/asr/pytorch_backend/asr_mix.py	/^import logging$/;"	i
logging	espnet/asr/pytorch_backend/recog.py	/^import logging$/;"	i
logging	espnet/bin/asr_enhance.py	/^import logging$/;"	i
logging	espnet/bin/asr_recog.py	/^import logging$/;"	i
logging	espnet/bin/asr_train.py	/^import logging$/;"	i
logging	espnet/bin/lm_train.py	/^import logging$/;"	i
logging	espnet/bin/mt_train.py	/^import logging$/;"	i
logging	espnet/bin/mt_trans.py	/^import logging$/;"	i
logging	espnet/bin/st_train.py	/^import logging$/;"	i
logging	espnet/bin/st_trans.py	/^import logging$/;"	i
logging	espnet/bin/tts_decode.py	/^import logging$/;"	i
logging	espnet/bin/tts_train.py	/^import logging$/;"	i
logging	espnet/lm/chainer_backend/lm.py	/^import logging$/;"	i
logging	espnet/lm/lm_utils.py	/^import logging$/;"	i
logging	espnet/lm/pytorch_backend/lm.py	/^import logging$/;"	i
logging	espnet/mt/mt_utils.py	/^import logging$/;"	i
logging	espnet/mt/pytorch_backend/mt.py	/^import logging$/;"	i
logging	espnet/nets/beam_search.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/ctc.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/e2e_asr.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/rnn/decoders.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/rnn/encoders.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/rnn/training.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/transformer/ctc.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/transformer/encoder.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/transformer/label_smoothing_loss.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/transformer/plot.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/transformer/subsampling.py	/^import logging$/;"	i
logging	espnet/nets/chainer_backend/transformer/training.py	/^import logging$/;"	i
logging	espnet/nets/e2e_asr_common.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/ctc.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_asr.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_mt.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_st.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/fastspeech/length_regulator.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/rnn/decoders.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/rnn/encoders.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/transformer/plot.py	/^import logging$/;"	i
logging	espnet/nets/pytorch_backend/wavenet.py	/^import logging$/;"	i
logging	espnet/st/pytorch_backend/st.py	/^import logging$/;"	i
logging	espnet/transform/transformation.py	/^import logging$/;"	i
logging	espnet/tts/pytorch_backend/tts.py	/^import logging$/;"	i
logging	espnet/utils/cli_readers.py	/^import logging$/;"	i
logging	espnet/utils/deterministic_utils.py	/^import logging$/;"	i
logging	espnet/utils/fill_missing_args.py	/^import logging$/;"	i
logging	espnet/utils/io_utils.py	/^import logging$/;"	i
logging	espnet/utils/training/batchfy.py	/^import logging$/;"	i
logging	espnet/utils/training/iterators.py	/^import logging$/;"	i
logging	espnet/utils/training/train_utils.py	/^import logging$/;"	i
logging	test/test_e2e_asr_transformer.py	/^import logging$/;"	i
logging	test/test_e2e_st_transformer.py	/^import logging$/;"	i
logging	tools/check_install.py	/^import logging$/;"	i
logging	utils/addjson.py	/^import logging$/;"	i
logging	utils/apply-cmvn.py	/^import logging$/;"	i
logging	utils/compute-cmvn-stats.py	/^import logging$/;"	i
logging	utils/compute-fbank-feats.py	/^import logging$/;"	i
logging	utils/compute-stft-feats.py	/^import logging$/;"	i
logging	utils/concatjson.py	/^import logging$/;"	i
logging	utils/convert_fbank_to_wav.py	/^import logging$/;"	i
logging	utils/copy-feats.py	/^import logging$/;"	i
logging	utils/dump-pcm.py	/^import logging$/;"	i
logging	utils/eval-source-separation.py	/^import logging$/;"	i
logging	utils/eval_perm_free_error.py	/^import logging$/;"	i
logging	utils/feat-to-shape.py	/^import logging$/;"	i
logging	utils/generate_wav_from_fbank.py	/^import logging$/;"	i
logging	utils/json2text.py	/^import logging$/;"	i
logging	utils/json2trn.py	/^import logging$/;"	i
logging	utils/json2trn_mt.py	/^import logging$/;"	i
logging	utils/json2trn_wo_dict.py	/^import logging$/;"	i
logging	utils/merge_scp2json.py	/^import logging$/;"	i
logging	utils/mergejson.py	/^import logging$/;"	i
logging	utils/splitjson.py	/^import logging$/;"	i
logging	utils/text2vocabulary.py	/^import logging$/;"	i
logging	utils/trim_silence.py	/^import logging$/;"	i
logmelspc_to_linearspc	utils/convert_fbank_to_wav.py	/^def logmelspc_to_linearspc(lmspc, fs, n_mels, n_fft, fmin=None, fmax=None):$/;"	f
logmelspectrogram	espnet/transform/spectrogram.py	/^def logmelspectrogram(x, fs, n_mels, n_fft, n_shift,$/;"	f
logmelspectrogram	test/test_transform.py	/^from espnet.transform.spectrogram import logmelspectrogram$/;"	i
logmelspectrogram	utils/compute-fbank-feats.py	/^from espnet.transform.spectrogram import logmelspectrogram$/;"	i
logzero	espnet/lm/chainer_backend/extlm.py	/^    logzero = -10000000000.0$/;"	v	class:LookAheadWordLM
logzero	espnet/lm/chainer_backend/extlm.py	/^    logzero = -10000000000.0$/;"	v	class:MultiLevelLM
logzero	espnet/lm/pytorch_backend/extlm.py	/^    logzero = -10000000000.0$/;"	v	class:LookAheadWordLM
logzero	espnet/lm/pytorch_backend/extlm.py	/^    logzero = -10000000000.0$/;"	v	class:MultiLevelLM
long_description	setup.py	/^      long_description=open(os.path.join(dirname, 'README.md'),$/;"	v
lookup	egs/arctic/tts1/local/text/cmudict.py	/^  def lookup(self, word):$/;"	m	class:CMUDict
lookup	egs/ljspeech/tts1/local/text/cmudict.py	/^  def lookup(self, word):$/;"	m	class:CMUDict
lookup	egs/ljspeech/tts2/local/text/cmudict.py	/^  def lookup(self, word):$/;"	m	class:CMUDict
lookup	egs/tweb/tts1/local/text/cmudict.py	/^  def lookup(self, word):$/;"	m	class:CMUDict
loss_fn	espnet/nets/pytorch_backend/ctc.py	/^    def loss_fn(self, th_pred, th_target, th_ilen, th_olen):$/;"	m	class:CTC
lowercase	egs/arctic/tts1/local/text/cleaners.py	/^def lowercase(text):$/;"	f
lowercase	egs/ljspeech/tts1/local/text/cleaners.py	/^def lowercase(text):$/;"	f
lowercase	egs/ljspeech/tts2/local/text/cleaners.py	/^def lowercase(text):$/;"	f
lowercase	egs/tweb/tts1/local/text/cleaners.py	/^def lowercase(text):$/;"	f
lsm_type	test/test_beam_search.py	/^    lsm_type="",$/;"	v
lsm_type	test/test_initialization.py	/^    lsm_type="",$/;"	v
lsm_weight	test/test_beam_search.py	/^    lsm_weight=0.0,$/;"	v
lsm_weight	test/test_beam_search.py	/^    lsm_weight=0.001,$/;"	v
lsm_weight	test/test_initialization.py	/^    lsm_weight=0.0,$/;"	v
m	egs/aurora4/asr1/local/find_transcripts.pl	/^    m:\\S+\/(\\w{6})00.dot: || die "Bad line in dot file list: $_";$/;"	l
m	egs/aurora4/asr1/local/flist2scp.pl	/^    m:^\\S+\/(\\w+)\\.[wW][vV]1$: || die "Bad line $_";$/;"	l
m	egs/aurora4/asr1/local/flist2scp_12.pl	/^    m:^\\S+\/(\\w+)\\.[wW][vV][12]$: || die "Bad line $_";$/;"	l
m	egs/chime4/asr1/local/find_noisy_transcripts.pl	/^    m:\\S+\/(\\w{6})00.dot: || die "Bad line in dot file list: $_";$/;"	l
m	egs/chime4/asr1/local/find_transcripts.pl	/^    m:\\S+\/(\\w{6})00.dot: || die "Bad line in dot file list: $_";$/;"	l
m	egs/chime4/asr1/local/flist2scp.pl	/^    m:^\\S+\/(\\w+)\\.[wW][vV]1$: || die "Bad line $_";$/;"	l
m	egs/chime4/asr1_multich/local/find_noisy_transcripts.pl	/^    m:\\S+\/(\\w{6})00.dot: || die "Bad line in dot file list: $_";$/;"	l
m	egs/chime4/asr1_multich/local/find_transcripts.pl	/^    m:\\S+\/(\\w{6})00.dot: || die "Bad line in dot file list: $_";$/;"	l
m	egs/chime4/asr1_multich/local/flist2scp.pl	/^    m:^\\S+\/(\\w+)\\.[wW][vV]1$: || die "Bad line $_";$/;"	l
m	egs/dirha_wsj/asr1/local/find_transcripts.pl	/^    m:\\S+\/(\\w{6})00.dot: || die "Bad line in dot file list: $_";$/;"	l
m	egs/dirha_wsj/asr1/local/flist2scp.pl	/^    m:^\\S+\/(\\w+)\\.[wW][aA][vV]$: || die "Bad line $_";$/;"	l
m	egs/fisher_callhome_spanish/asr1/local/callhome_make_trans.pl	/^  m:([^\/]+)\\.txt: || die "Bad filename $_";$/;"	l
m	egs/fisher_callhome_spanish/asr1/local/fsp_make_trans.pl	/^  m:([^\/]+)\\.tdf: || die "Bad filename $_";$/;"	l
m	egs/fisher_callhome_spanish/mt1/local/callhome_make_trans.pl	/^  m:([^\/]+)\\.txt: || die "Bad filename $_";$/;"	l
m	egs/fisher_callhome_spanish/mt1/local/fsp_make_trans.pl	/^  m:([^\/]+)\\.tdf: || die "Bad filename $_";$/;"	l
m	egs/fisher_callhome_spanish/st1/local/callhome_make_trans.pl	/^  m:([^\/]+)\\.txt: || die "Bad filename $_";$/;"	l
m	egs/fisher_callhome_spanish/st1/local/fsp_make_trans.pl	/^  m:([^\/]+)\\.tdf: || die "Bad filename $_";$/;"	l
m	egs/reverb/asr1/local/find_transcripts.pl	/^    m:\\S+\/(\\w{6})00.dot: || die "Bad line in dot file list: $_";$/;"	l
m	egs/reverb/asr1/local/flist2scp.pl	/^    m:^\\S+\/(\\w+)\\.[wW][vV]1$: || die "Bad line $_";$/;"	l
m	egs/reverb/asr1_multich/local/find_transcripts.pl	/^    m:\\S+\/(\\w{6})00.dot: || die "Bad line in dot file list: $_";$/;"	l
m	egs/reverb/asr1_multich/local/flist2scp.pl	/^    m:^\\S+\/(\\w+)\\.[wW][vV]1$: || die "Bad line $_";$/;"	l
m	egs/timit/asr1/local/timit_norm_trans.pl	/^  m:^(\\S+)\\s+(\\S+)\\s+(\\S+)$: or die "Bad line: $_";$/;"	l
m	egs/wsj/asr1/local/find_transcripts.pl	/^    m:\\S+\/(\\w{6})00.dot: || die "Bad line in dot file list: $_";$/;"	l
m	egs/wsj/asr1/local/flist2scp.pl	/^    m:^\\S+\/(\\w+)\\.[wW][vV]1$: || die "Bad line $_";$/;"	l
m	egs/wsj_mix/asr1/local/find_transcripts.pl	/^    m:\\S+\/(\\w{6})00.dot: || die "Bad line in dot file list: $_";$/;"	l
m	egs/wsj_mix/asr1/local/flist2scp.pl	/^    m:^\\S+\/(\\w+)\\.[wW][vV]1$: || die "Bad line $_";$/;"	l
m	test/test_e2e_asr.py	/^        import espnet.nets.chainer_backend.e2e_asr as m$/;"	i
m	test/test_e2e_asr.py	/^        import espnet.nets.pytorch_backend.e2e_asr as m$/;"	i
m	test/test_e2e_asr_mulenc.py	/^    import espnet.nets.pytorch_backend.e2e_asr_mulenc as m$/;"	i
m	test/test_e2e_mt.py	/^        import espnet.nets.chainer_backend.e2e_mt as m$/;"	i
m	test/test_e2e_mt.py	/^        import espnet.nets.pytorch_backend.e2e_mt as m$/;"	i
m	test/test_e2e_st.py	/^        import espnet.nets.pytorch_backend.e2e_st as m$/;"	i
m	test/test_initialization.py	/^    import espnet.nets.chainer_backend.e2e_asr as m$/;"	i
m	test/test_initialization.py	/^    import espnet.nets.pytorch_backend.e2e_asr as m$/;"	i
m	test/test_transformer_decode.py	/^            m = mask[:, :i + 1, :i + 1]$/;"	v
main	egs/blizzard17/tts1/local/make_lab_w_punc.py	/^def main():$/;"	f
main	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^def main():$/;"	f
main	egs/fisher_callhome_spanish/mt1/local/concat_short_utt.py	/^def main():$/;"	f
main	egs/fisher_callhome_spanish/st1/local/concat_short_utt.py	/^def main():$/;"	f
main	egs/iwslt18/asr1/local/ctm2segments.py	/^def main():$/;"	f
main	egs/iwslt18/asr1/local/parse_xml.py	/^def main():$/;"	f
main	egs/iwslt18/mt1/local/ctm2segments.py	/^def main():$/;"	f
main	egs/iwslt18/mt1/local/parse_xml.py	/^def main():$/;"	f
main	egs/iwslt18/st1/local/ctm2segments.py	/^def main():$/;"	f
main	egs/iwslt18/st1/local/parse_xml.py	/^def main():$/;"	f
main	egs/m_ailabs/tts1/local/parse_text.py	/^def main():$/;"	f
main	espnet/bin/asr_enhance.py	/^def main(args):$/;"	f
main	espnet/bin/asr_recog.py	/^def main(args):$/;"	f
main	espnet/bin/asr_train.py	/^def main(cmd_args):$/;"	f
main	espnet/bin/lm_train.py	/^def main(cmd_args):$/;"	f
main	espnet/bin/mt_train.py	/^def main(cmd_args):$/;"	f
main	espnet/bin/mt_trans.py	/^def main(args):$/;"	f
main	espnet/bin/st_train.py	/^def main(cmd_args):$/;"	f
main	espnet/bin/st_trans.py	/^def main(args):$/;"	f
main	espnet/bin/tts_decode.py	/^def main(args):$/;"	f
main	espnet/bin/tts_train.py	/^def main(cmd_args):$/;"	f
main	tools/check_install.py	/^def main(args):$/;"	f
main	utils/apply-cmvn.py	/^def main():$/;"	f
main	utils/average_checkpoints.py	/^def main():$/;"	f
main	utils/change_yaml.py	/^def main():$/;"	f
main	utils/compute-cmvn-stats.py	/^def main():$/;"	f
main	utils/compute-fbank-feats.py	/^def main():$/;"	f
main	utils/compute-stft-feats.py	/^def main():$/;"	f
main	utils/convert_fbank_to_wav.py	/^def main():$/;"	f
main	utils/copy-feats.py	/^def main():$/;"	f
main	utils/dump-pcm.py	/^def main():$/;"	f
main	utils/eval-source-separation.py	/^def main():$/;"	f
main	utils/eval_perm_free_error.py	/^def main():$/;"	f
main	utils/feat-to-shape.py	/^def main():$/;"	f
main	utils/filt.py	/^def main(args):$/;"	f
main	utils/generate_wav_from_fbank.py	/^def main():$/;"	f
main	utils/get_yaml.py	/^def main():$/;"	f
main	utils/json2sctm.py	/^def main(args):$/;"	f
main	utils/json2trn.py	/^def main(args):$/;"	f
main	utils/json2trn_mt.py	/^def main(args):$/;"	f
main	utils/json2trn_wo_dict.py	/^def main(args):$/;"	f
main	utils/mix-mono-wav-scp.py	/^def main():$/;"	f
main	utils/spm_decode	/^def main():$/;"	f
main	utils/spm_encode	/^def main():$/;"	f
main	utils/text2token.py	/^def main():$/;"	f
main	utils/trim_silence.py	/^def main():$/;"	f
main	utils/trn2ctm.py	/^def main(args):$/;"	f
main	utils/trn2stm.py	/^def main(args):$/;"	f
main_beam	espnet/nets/beam_search.py	/^    def main_beam(self, weighted_scores: torch.Tensor, ids: torch.Tensor) -> Tuple[torch.Tensor, torch.Tensor]:$/;"	m	class:BeamSearch
make_arg	test/test_asr_init.py	/^def make_arg(**kwargs):$/;"	f
make_arg	test/test_e2e_asr.py	/^def make_arg(**kwargs):$/;"	f
make_arg	test/test_e2e_asr_mulenc.py	/^def make_arg(num_encs, **kwargs):$/;"	f
make_arg	test/test_e2e_asr_transformer.py	/^def make_arg(**kwargs):$/;"	f
make_arg	test/test_e2e_mt.py	/^def make_arg(**kwargs):$/;"	f
make_arg	test/test_e2e_st.py	/^def make_arg(**kwargs):$/;"	f
make_arg	test/test_e2e_st_transformer.py	/^def make_arg(**kwargs):$/;"	f
make_arg	test/test_multi_spkrs.py	/^def make_arg(**kwargs):$/;"	f
make_arg	test/test_recog.py	/^def make_arg(**kwargs):$/;"	f
make_attention_mask	espnet/nets/chainer_backend/transformer/decoder.py	/^    def make_attention_mask(self, source_block, target_block):$/;"	m	class:Decoder
make_batchset	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	espnet/st/pytorch_backend/st.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	espnet/utils/training/batchfy.py	/^def make_batchset(data, batch_size=0, max_length_in=float("inf"), max_length_out=float("inf"),$/;"	f
make_batchset	espnet/utils/training/iterators.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	test/test_e2e_asr.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	test/test_e2e_asr_mulenc.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	test/test_e2e_mt.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	test/test_e2e_st.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_batchset	test/test_utils.py	/^from espnet.utils.training.batchfy import make_batchset$/;"	i
make_dummy_json	test/test_e2e_asr.py	/^from test.utils_test import make_dummy_json$/;"	i
make_dummy_json	test/test_e2e_asr_mulenc.py	/^from test.utils_test import make_dummy_json$/;"	i
make_dummy_json	test/test_utils.py	/^from test.utils_test import make_dummy_json$/;"	i
make_dummy_json	test/utils_test.py	/^def make_dummy_json(n_utts=10, ilen_range=(100, 300), olen_range=(10, 300), idim=83, odim=52, num_inputs=1):$/;"	f
make_dummy_json_mt	test/test_e2e_mt.py	/^from test.utils_test import make_dummy_json_mt$/;"	i
make_dummy_json_mt	test/utils_test.py	/^def make_dummy_json_mt(n_utts=10, ilen_range=(100, 300), olen_range=(10, 300), idim=83, odim=52):$/;"	f
make_dummy_json_st	test/test_e2e_st.py	/^from test.utils_test import make_dummy_json_st$/;"	i
make_dummy_json_st	test/utils_test.py	/^def make_dummy_json_st(n_utts=10, ilen_range=(100, 300), olen_range=(10, 300),$/;"	f
make_feedforward_transformer_args	test/test_e2e_tts_fastspeech.py	/^def make_feedforward_transformer_args(**kwargs):$/;"	f
make_history_mask	espnet/nets/chainer_backend/transformer/decoder.py	/^from espnet.nets.chainer_backend.transformer.mask import make_history_mask$/;"	i
make_history_mask	espnet/nets/chainer_backend/transformer/encoder.py	/^from espnet.nets.chainer_backend.transformer.mask import make_history_mask$/;"	i
make_history_mask	espnet/nets/chainer_backend/transformer/mask.py	/^def make_history_mask(xp, block):$/;"	f
make_inference_args	test/test_e2e_tts_tacotron2.py	/^def make_inference_args(**kwargs):$/;"	f
make_inference_args	test/test_e2e_tts_transformer.py	/^def make_inference_args(**kwargs):$/;"	f
make_lexical_tree	espnet/lm/chainer_backend/extlm.py	/^from espnet.lm.lm_utils import make_lexical_tree$/;"	i
make_lexical_tree	espnet/lm/lm_utils.py	/^def make_lexical_tree(word_dict, subword_dict, word_unk):$/;"	f
make_lexical_tree	espnet/lm/pytorch_backend/extlm.py	/^from espnet.lm.lm_utils import make_lexical_tree$/;"	i
make_non_pad_mask	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.nets_utils import make_non_pad_mask$/;"	i
make_non_pad_mask	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from espnet.nets.pytorch_backend.nets_utils import make_non_pad_mask$/;"	i
make_non_pad_mask	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.nets_utils import make_non_pad_mask$/;"	i
make_non_pad_mask	espnet/nets/pytorch_backend/nets_utils.py	/^def make_non_pad_mask(lengths, xs=None, length_dim=-1):$/;"	f
make_non_pad_mask	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^from espnet.nets.pytorch_backend.nets_utils import make_non_pad_mask$/;"	i
make_pad_mask	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.nets_utils import make_pad_mask$/;"	i
make_pad_mask	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.nets_utils import make_pad_mask$/;"	i
make_pad_mask	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.nets_utils import make_pad_mask$/;"	i
make_pad_mask	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.nets_utils import make_pad_mask$/;"	i
make_pad_mask	espnet/nets/pytorch_backend/frontends/dnn_wpe.py	/^from espnet.nets.pytorch_backend.nets_utils import make_pad_mask$/;"	i
make_pad_mask	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^from espnet.nets.pytorch_backend.nets_utils import make_pad_mask$/;"	i
make_pad_mask	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^from espnet.nets.pytorch_backend.nets_utils import make_pad_mask$/;"	i
make_pad_mask	espnet/nets/pytorch_backend/nets_utils.py	/^def make_pad_mask(lengths, xs=None, length_dim=-1):$/;"	f
make_pad_mask	espnet/nets/pytorch_backend/rnn/attentions.py	/^from espnet.nets.pytorch_backend.nets_utils import make_pad_mask$/;"	i
make_pad_mask	espnet/nets/pytorch_backend/rnn/encoders.py	/^from espnet.nets.pytorch_backend.nets_utils import make_pad_mask$/;"	i
make_taco2_args	test/test_e2e_tts_tacotron2.py	/^def make_taco2_args(**kwargs):$/;"	f
make_transformer_args	test/test_e2e_tts_fastspeech.py	/^def make_transformer_args(**kwargs):$/;"	f
make_transformer_args	test/test_e2e_tts_transformer.py	/^def make_transformer_args(**kwargs):$/;"	f
man_pages	doc/conf.py	/^man_pages = [$/;"	v
mask	test/test_transformer_decode.py	/^    mask = subsequent_mask(xlen).unsqueeze(0)$/;"	v
mask_by_length	espnet/nets/pytorch_backend/nets_utils.py	/^def mask_by_length(xs, lengths, fill=0):$/;"	f
mask_by_length	espnet/nets/pytorch_backend/rnn/decoders.py	/^from espnet.nets.pytorch_backend.nets_utils import mask_by_length$/;"	i
master_doc	doc/conf.py	/^master_doc = 'index'$/;"	v
math	espnet/asr/pytorch_backend/asr.py	/^import math$/;"	i
math	espnet/lm/chainer_backend/extlm.py	/^import math$/;"	i
math	espnet/lm/pytorch_backend/extlm.py	/^import math$/;"	i
math	espnet/nets/chainer_backend/e2e_asr.py	/^import math$/;"	i
math	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^import math$/;"	i
math	espnet/nets/chainer_backend/rnn/training.py	/^import math$/;"	i
math	espnet/nets/chainer_backend/transformer/training.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/e2e_asr.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/e2e_mt.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/e2e_st.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/initialization.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/rnn/attentions.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/rnn/decoders.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/transformer/attention.py	/^import math$/;"	i
math	espnet/nets/pytorch_backend/transformer/embedding.py	/^import math$/;"	i
math	espnet/tts/pytorch_backend/tts.py	/^import math$/;"	i
math	test/test_positional_encoding.py	/^        import math$/;"	i
math	utils/trn2ctm.py	/^import math$/;"	i
matplotlib	espnet/asr/asr_mix_utils.py	/^        import matplotlib.pyplot as plt$/;"	i
matplotlib	espnet/asr/asr_mix_utils.py	/^import matplotlib$/;"	i
matplotlib	espnet/asr/asr_utils.py	/^        import matplotlib.pyplot as plt$/;"	i
matplotlib	espnet/asr/asr_utils.py	/^import matplotlib$/;"	i
matplotlib	espnet/asr/chainer_backend/asr.py	/^import matplotlib$/;"	i
matplotlib	espnet/asr/pytorch_backend/asr.py	/^                import matplotlib.pyplot as plt$/;"	i
matplotlib	espnet/asr/pytorch_backend/asr.py	/^import matplotlib$/;"	i
matplotlib	espnet/asr/pytorch_backend/asr_mix.py	/^import matplotlib$/;"	i
matplotlib	espnet/mt/pytorch_backend/mt.py	/^import matplotlib$/;"	i
matplotlib	espnet/nets/chainer_backend/transformer/plot.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^        import matplotlib.pyplot as plt$/;"	i
matplotlib	espnet/nets/pytorch_backend/transformer/plot.py	/^import matplotlib.pyplot as plt$/;"	i
matplotlib	espnet/st/pytorch_backend/st.py	/^import matplotlib$/;"	i
matplotlib	espnet/tts/pytorch_backend/tts.py	/^        import matplotlib.pyplot as plt$/;"	i
matplotlib	espnet/tts/pytorch_backend/tts.py	/^import matplotlib$/;"	i
matplotlib	test/test_transformer_decode.py	/^    import matplotlib.pyplot as plt$/;"	i
matplotlib	utils/trim_silence.py	/^import matplotlib.pyplot as plt$/;"	i
maxlenratio	test/test_beam_search.py	/^    maxlenratio=1.0,$/;"	v
maxlenratio	test/test_initialization.py	/^    maxlenratio=1.0,$/;"	v
memory	test/test_transformer_decode.py	/^    memory = torch.randn(2, 500, adim)$/;"	v
merge_hashes	egs/ami/asr1/local/ami_split_segments.pl	/^sub merge_hashes {$/;"	s
merge_results	utils/eval_perm_free_error.py	/^def merge_results(results):$/;"	f
merge_scores	espnet/nets/beam_search.py	/^    def merge_scores(hyp: Hypothesis, scores: Dict[str, torch.Tensor], idx: int,$/;"	m	class:BeamSearch
merge_states	espnet/nets/beam_search.py	/^    def merge_states(self, states: Any, part_states: Any, part_idx: int) -> Any:$/;"	m	class:BeamSearch
meta	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^        meta = csv.reader(metafile)$/;"	v
mictype	egs/chime5/asr1/local/json2text.py	/^                mictype = 'original'$/;"	v
mictype	egs/chime5/asr1/local/json2text.py	/^                mictype = args.mictype.upper() # convert from u01 to U01$/;"	v
mictype	egs/chime5/asr1/local/json2text.py	/^                mictype = x['ref']$/;"	v
min_pit_sample	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def min_pit_sample(self, loss):$/;"	m	class:PIT
minlenratio	test/test_beam_search.py	/^    minlenratio=0.0,$/;"	v
minlenratio	test/test_initialization.py	/^    minlenratio=0.0,$/;"	v
model	espnet/asr/chainer_backend/asr.py	/^    logging.info('import model module: ' + args.model_module)$/;"	i
modinfo	doc/argparse2rst.py	/^modinfo = []$/;"	v
module	espnet/asr/chainer_backend/asr.py	/^    logging.info('import model module: ' + args.model_module)$/;"	i
mtlalpha	test/test_initialization.py	/^    mtlalpha=0.5,$/;"	v
museval	utils/eval-source-separation.py	/^import museval$/;"	i
n_avg	test/test_transformer_decode.py	/^    n_avg = 10$/;"	v
nbest	test/test_beam_search.py	/^    nbest=5,$/;"	v
nbsphinx_execute	doc/conf.py	/^nbsphinx_execute = 'never'$/;"	v
nccl	espnet/nets/chainer_backend/rnn/training.py	/^        from cupy.cuda import nccl$/;"	i
nccl	espnet/nets/chainer_backend/transformer/training.py	/^        from cupy.cuda import nccl$/;"	i
nccl	tools/check_install.py	/^        from cupy.cuda import nccl  # NOQA$/;"	i
nets	espnet/asr/pytorch_backend/asr.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
nets	espnet/asr/pytorch_backend/asr_mix.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
nets	espnet/lm/chainer_backend/lm.py	/^import espnet.nets.chainer_backend.deterministic_embed_id as DL$/;"	i
nets	espnet/nets/chainer_backend/rnn/decoders.py	/^import espnet.nets.chainer_backend.deterministic_embed_id as DL$/;"	i
nets	espnet/st/pytorch_backend/st.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
nets	test/test_e2e_asr.py	/^        import espnet.nets.chainer_backend.e2e_asr as m$/;"	i
nets	test/test_e2e_asr.py	/^        import espnet.nets.pytorch_backend.e2e_asr as m$/;"	i
nets	test/test_e2e_asr_mulenc.py	/^    import espnet.nets.pytorch_backend.e2e_asr_mulenc as m$/;"	i
nets	test/test_e2e_mt.py	/^        import espnet.nets.chainer_backend.e2e_mt as m$/;"	i
nets	test/test_e2e_mt.py	/^        import espnet.nets.pytorch_backend.e2e_mt as m$/;"	i
nets	test/test_e2e_st.py	/^        import espnet.nets.pytorch_backend.e2e_st as m$/;"	i
nets	test/test_initialization.py	/^    import espnet.nets.chainer_backend.e2e_asr as m$/;"	i
nets	test/test_initialization.py	/^    import espnet.nets.pytorch_backend.e2e_asr as m$/;"	i
nets	test/test_lm.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
nets	test/test_recog.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
new_dic	egs/reverb/asr1/local/filterjson.py	/^    new_dic = dict()$/;"	v
new_dic	egs/reverb/asr1_multich/local/filterjson.py	/^    new_dic = dict()$/;"	v
new_dic	egs/wsj_mix/asr1/local/mergejson.py	/^    new_dic = dict()$/;"	v
new_dic	utils/addjson.py	/^    new_dic = dict()$/;"	v
new_dic	utils/mergejson.py	/^    new_dic = {}$/;"	v
new_dic	utils/splitjson.py	/^        new_dic = dict()$/;"	v
new_items	egs/iwslt18/asr1/local/join_suffix.py	/^    new_items = []$/;"	v
new_items	egs/iwslt18/mt1/local/join_suffix.py	/^    new_items = []$/;"	v
new_items	egs/iwslt18/st1/local/join_suffix.py	/^    new_items = []$/;"	v
new_items	egs/iwslt19/asr1/local/join_suffix.py	/^    new_items = []$/;"	v
new_items	egs/iwslt19/st1/local/join_suffix.py	/^    new_items = []$/;"	v
new_items	egs/tedlium2/asr1/local/join_suffix.py	/^    new_items = []$/;"	v
new_items	egs/tedlium3/asr1/local/join_suffix.py	/^    new_items = []$/;"	v
new_line	utils/scp2json.py	/^    new_line = {}$/;"	v
next	espnet/utils/dataset.py	/^    def next(self):$/;"	m	class:ChainerDataLoader
nltk	egs/ljspeech/tts1/local/clean_text.py	/^import nltk$/;"	i
nltk	egs/ljspeech/tts2/local/clean_text.py	/^import nltk$/;"	i
nltk	espnet/nets/pytorch_backend/e2e_mt.py	/^import nltk$/;"	i
nltk	espnet/nets/pytorch_backend/e2e_st.py	/^import nltk$/;"	i
nn	espnet/lm/pytorch_backend/extlm.py	/^import torch.nn as nn$/;"	i
nn	espnet/lm/pytorch_backend/extlm.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/lm/pytorch_backend/lm.py	/^import torch.nn as nn$/;"	i
nn	espnet/nets/pytorch_backend/ctc.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/frontends/frontend.py	/^import torch.nn as nn$/;"	i
nn	espnet/nets/pytorch_backend/lm/default.py	/^import torch.nn as nn$/;"	i
nn	espnet/nets/pytorch_backend/lm/default.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^import torch.nn as nn$/;"	i
nn	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/lm/transformer.py	/^import torch.nn as nn$/;"	i
nn	espnet/nets/pytorch_backend/lm/transformer.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/rnn/attentions.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/rnn/decoders.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/rnn/encoders.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^import torch.nn.functional as F$/;"	i
nn	espnet/nets/pytorch_backend/transformer/attention.py	/^from torch import nn$/;"	i
nn	espnet/nets/pytorch_backend/transformer/decoder_layer.py	/^from torch import nn$/;"	i
nn	espnet/nets/pytorch_backend/transformer/encoder_layer.py	/^from torch import nn$/;"	i
nn	espnet/nets/pytorch_backend/transformer/label_smoothing_loss.py	/^from torch import nn$/;"	i
nn	espnet/nets/pytorch_backend/wavenet.py	/^from torch import nn$/;"	i
nn	espnet/nets/pytorch_backend/wavenet.py	/^import torch.nn.functional as F$/;"	i
noise_injection	espnet/transform/transformation.py	/^    noise_injection='espnet.transform.perturb:NoiseInjection',$/;"	v
non_word	egs/vais1000/tts1/local/text/regex_tokenize.py	/^non_word = r"[^\\w\\s]"$/;"	v
normal	espnet/nets/chainer_backend/deterministic_embed_id.py	/^from chainer.initializers import normal$/;"	i
normalise_transcripts	egs/ami/asr1/local/ami_split_segments.pl	/^sub normalise_transcripts {$/;"	s
normalize_numbers	egs/arctic/tts1/local/text/cleaners.py	/^from text.numbers import normalize_numbers$/;"	i
normalize_numbers	egs/arctic/tts1/local/text/numbers.py	/^def normalize_numbers(text):$/;"	f
normalize_numbers	egs/ljspeech/tts1/local/text/cleaners.py	/^from text.numbers import normalize_numbers$/;"	i
normalize_numbers	egs/ljspeech/tts1/local/text/numbers.py	/^def normalize_numbers(text):$/;"	f
normalize_numbers	egs/ljspeech/tts2/local/text/cleaners.py	/^from text.numbers import normalize_numbers$/;"	i
normalize_numbers	egs/ljspeech/tts2/local/text/numbers.py	/^def normalize_numbers(text):$/;"	f
normalize_numbers	egs/tweb/tts1/local/text/cleaners.py	/^from text.numbers import normalize_numbers$/;"	i
normalize_numbers	egs/tweb/tts1/local/text/numbers.py	/^def normalize_numbers(text):$/;"	f
np	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^import numpy as np$/;"	i
np	egs/reverb/asr1/local/run_wpe.py	/^import numpy as np$/;"	i
np	egs/reverb/asr1_multich/local/run_wpe.py	/^import numpy as np$/;"	i
np	espnet/asr/asr_utils.py	/^import numpy as np$/;"	i
np	espnet/asr/pytorch_backend/asr.py	/^import numpy as np$/;"	i
np	espnet/asr/pytorch_backend/asr_mix.py	/^import numpy as np$/;"	i
np	espnet/bin/asr_enhance.py	/^import numpy as np$/;"	i
np	espnet/bin/asr_recog.py	/^import numpy as np$/;"	i
np	espnet/bin/asr_train.py	/^import numpy as np$/;"	i
np	espnet/bin/lm_train.py	/^import numpy as np$/;"	i
np	espnet/bin/mt_train.py	/^import numpy as np$/;"	i
np	espnet/bin/mt_trans.py	/^import numpy as np$/;"	i
np	espnet/bin/st_train.py	/^import numpy as np$/;"	i
np	espnet/bin/st_trans.py	/^import numpy as np$/;"	i
np	espnet/bin/tts_train.py	/^import numpy as np$/;"	i
np	espnet/lm/chainer_backend/lm.py	/^import numpy as np$/;"	i
np	espnet/lm/lm_utils.py	/^import numpy as np$/;"	i
np	espnet/lm/pytorch_backend/lm.py	/^import numpy as np$/;"	i
np	espnet/mt/pytorch_backend/mt.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/ctc.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/e2e_asr.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/rnn/attentions.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/rnn/decoders.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/rnn/encoders.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/rnn/training.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/transformer/attention.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/transformer/ctc.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/transformer/decoder.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/transformer/embedding.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/transformer/encoder.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/transformer/positionwise_feed_forward.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/transformer/subsampling.py	/^import numpy as np$/;"	i
np	espnet/nets/chainer_backend/transformer/training.py	/^import numpy as np$/;"	i
np	espnet/nets/ctc_prefix_score.py	/^import numpy as np$/;"	i
np	espnet/nets/e2e_asr_common.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/ctc.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/e2e_asr.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/e2e_mt.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/e2e_st.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/nets_utils.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/rnn/decoders.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/rnn/encoders.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/streaming/segment.py	/^import numpy as np$/;"	i
np	espnet/nets/pytorch_backend/wavenet.py	/^import numpy as np$/;"	i
np	espnet/nets/scorers/ctc.py	/^import numpy as np$/;"	i
np	espnet/st/pytorch_backend/st.py	/^import numpy as np$/;"	i
np	espnet/transform/add_deltas.py	/^import numpy as np$/;"	i
np	espnet/transform/cmvn.py	/^import numpy as np$/;"	i
np	espnet/transform/spectrogram.py	/^import numpy as np$/;"	i
np	espnet/tts/pytorch_backend/tts.py	/^import numpy as np$/;"	i
np	espnet/utils/io_utils.py	/^import numpy as np$/;"	i
np	espnet/utils/training/batchfy.py	/^import numpy as np$/;"	i
np	espnet/utils/training/iterators.py	/^import numpy as np$/;"	i
np	test/test_asr_init.py	/^import numpy as np$/;"	i
np	test/test_cli.py	/^import numpy as np$/;"	i
np	test/test_e2e_asr.py	/^import numpy as np$/;"	i
np	test/test_e2e_asr_mulenc.py	/^import numpy as np$/;"	i
np	test/test_e2e_asr_transducer.py	/^import numpy as np$/;"	i
np	test/test_e2e_compatibility.py	/^import numpy as np$/;"	i
np	test/test_e2e_mt.py	/^import numpy as np$/;"	i
np	test/test_e2e_st.py	/^import numpy as np$/;"	i
np	test/test_e2e_tts_fastspeech.py	/^import numpy as np$/;"	i
np	test/test_e2e_tts_tacotron2.py	/^import numpy as np$/;"	i
np	test/test_e2e_tts_transformer.py	/^import numpy as np$/;"	i
np	test/test_transform.py	/^import numpy as np$/;"	i
np	test/test_utils.py	/^import numpy as np$/;"	i
np	test/utils_test.py	/^import numpy as np$/;"	i
np	utils/average_checkpoints.py	/^import numpy as np$/;"	i
np	utils/compute-cmvn-stats.py	/^import numpy as np$/;"	i
np	utils/convert_fbank_to_wav.py	/^import numpy as np$/;"	i
np	utils/eval-source-separation.py	/^import numpy as np$/;"	i
np	utils/eval_perm_free_error.py	/^import numpy as np$/;"	i
np	utils/feats2npy.py	/^import numpy as np$/;"	i
np	utils/generate_wav_from_fbank.py	/^import numpy as np$/;"	i
np	utils/splitjson.py	/^import numpy as np$/;"	i
num_blocks	test/test_transformer_decode.py	/^        num_blocks=2,$/;"	v
num_keys	egs/libri_trans/asr1/local/concat_json_multiref.py	/^    num_keys = 0$/;"	v
num_keys	egs/libri_trans/mt1/local/concat_json_multiref.py	/^    num_keys = 0$/;"	v
num_keys	egs/libri_trans/st1/local/concat_json_multiref.py	/^    num_keys = 0$/;"	v
numpy	espnet/nets/chainer_backend/deterministic_embed_id.py	/^import numpy$/;"	i
numpy	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^            import numpy$/;"	i
numpy	espnet/nets/pytorch_backend/frontends/frontend.py	/^import numpy$/;"	i
numpy	espnet/nets/pytorch_backend/transformer/attention.py	/^import numpy$/;"	i
numpy	espnet/nets/pytorch_backend/transformer/plot.py	/^import numpy$/;"	i
numpy	espnet/transform/channel_selector.py	/^import numpy$/;"	i
numpy	espnet/transform/perturb.py	/^import numpy$/;"	i
numpy	espnet/transform/spec_augment.py	/^import numpy$/;"	i
numpy	espnet/utils/cli_utils.py	/^import numpy$/;"	i
numpy	espnet/utils/cli_writers.py	/^import numpy$/;"	i
numpy	test/test_beam_search.py	/^import numpy$/;"	i
numpy	test/test_e2e_asr_transformer.py	/^import numpy$/;"	i
numpy	test/test_e2e_st_transformer.py	/^import numpy$/;"	i
numpy	test/test_initialization.py	/^import numpy$/;"	i
numpy	test/test_io_voxforge.py	/^import numpy$/;"	i
numpy	test/test_lm.py	/^import numpy$/;"	i
numpy	test/test_loss.py	/^import numpy$/;"	i
numpy	test/test_multi_spkrs.py	/^import numpy$/;"	i
numpy	test/test_optimizer.py	/^import numpy$/;"	i
numpy	test/test_recog.py	/^import numpy$/;"	i
numpy	test/test_tensorboard.py	/^import numpy$/;"	i
numpy	test/test_torch.py	/^    import numpy$/;"	i
numpy	test/test_transformer_decode.py	/^import numpy$/;"	i
numpy	utils/apply-cmvn.py	/^import numpy$/;"	i
numpy	utils/compute-fbank-feats.py	/^import numpy$/;"	i
numpy	utils/compute-stft-feats.py	/^import numpy$/;"	i
numpy	utils/dump-pcm.py	/^import numpy$/;"	i
numpy	utils/trim_silence.py	/^import numpy$/;"	i
nutt	egs/wsj_mix/asr1/local/merge_scp2json.py	/^    nutt = 0$/;"	v
nutt	utils/merge_scp2json.py	/^    nutt = 0$/;"	v
odim	test/test_transformer_decode.py	/^        odim=odim,$/;"	v
odim	test/test_transformer_decode.py	/^    odim = 5$/;"	v
odir	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^    odir = 'data\/' + subset$/;"	v
old_dic	egs/wsj_mix/asr1/local/mergejson.py	/^    old_dic = dict()$/;"	v
open	egs/commonvoice/asr1/local/filter_text.py	/^from io import open$/;"	i
open	egs/csj/asr1/local/csj_rm_tag.py	/^from io import open$/;"	i
open	egs/iwslt19/asr1/local/join_suffix.py	/^from codecs import open$/;"	i
open	egs/iwslt19/st1/local/join_suffix.py	/^from codecs import open$/;"	i
open	egs/jnas/asr1/local/filter_text.py	/^from io import open$/;"	i
open	egs/jnas/tts1/local/filter_text.py	/^from io import open$/;"	i
open	egs/reverb/asr1/local/filterjson.py	/^from io import open$/;"	i
open	egs/reverb/asr1_multich/local/filterjson.py	/^from io import open$/;"	i
open	egs/tedlium2/asr1/local/join_suffix.py	/^from codecs import open$/;"	i
open	egs/tedlium3/asr1/local/join_suffix.py	/^from codecs import open$/;"	i
open	egs/voxforge/asr1/local/filter_text.py	/^from io import open$/;"	i
open	egs/wsj_mix/asr1/local/merge_scp2json.py	/^from io import open$/;"	i
open	utils/merge_scp2json.py	/^from io import open$/;"	i
orch	tools/Makefile	/^	. venv\/bin\/activate; pip install torch==$(TH_VERSION)$/;"	m
orgdic	utils/addjson.py	/^        orgdic = intersec_org_dic[key_id]$/;"	v
os	doc/conf.py	/^import os$/;"	i
os	doc/module2rst.py	/^import os$/;"	i
os	egs/an4/asr1/local/data_prep.py	/^import os$/;"	i
os	egs/an4/tts1/local/data_prep.py	/^import os$/;"	i
os	egs/blizzard17/tts1/local/make_lab_w_punc.py	/^import os$/;"	i
os	egs/fisher_callhome_spanish/asr1/local/callhome_make_spk2gender.py	/^import os$/;"	i
os	egs/fisher_callhome_spanish/asr1/local/fsp_make_spk2gender.py	/^import os$/;"	i
os	egs/fisher_callhome_spanish/mt1/local/concat_short_utt.py	/^import os$/;"	i
os	egs/fisher_callhome_spanish/st1/local/concat_short_utt.py	/^import os$/;"	i
os	egs/iwslt18/asr1/local/parse_xml.py	/^import os$/;"	i
os	egs/iwslt18/mt1/local/parse_xml.py	/^import os$/;"	i
os	egs/iwslt18/st1/local/parse_xml.py	/^import os$/;"	i
os	egs/jsut/tts1/local/prep_segments.py	/^import os$/;"	i
os	egs/m_ailabs/tts1/local/parse_text.py	/^import os$/;"	i
os	egs/mini_an4/asr1/local/data_prep.py	/^import os$/;"	i
os	egs/mini_an4/asr_mix1/local/data_prep.py	/^import os$/;"	i
os	egs/mini_an4/tts1/local/data_prep.py	/^import os$/;"	i
os	egs/reverb/asr1/local/run_wpe.py	/^import os, errno$/;"	i
os	egs/reverb/asr1_multich/local/run_wpe.py	/^import os, errno$/;"	i
os	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^import os$/;"	i
os	egs/vais1000/tts1/local/clean_text.py	/^import os$/;"	i
os	espnet/asr/asr_mix_utils.py	/^import os$/;"	i
os	espnet/asr/asr_utils.py	/^import os$/;"	i
os	espnet/asr/chainer_backend/asr.py	/^import os$/;"	i
os	espnet/asr/pytorch_backend/asr.py	/^import os$/;"	i
os	espnet/asr/pytorch_backend/asr_init.py	/^import os$/;"	i
os	espnet/asr/pytorch_backend/asr_mix.py	/^import os$/;"	i
os	espnet/bin/asr_enhance.py	/^import os$/;"	i
os	espnet/bin/asr_recog.py	/^import os$/;"	i
os	espnet/bin/asr_train.py	/^import os$/;"	i
os	espnet/bin/lm_train.py	/^import os$/;"	i
os	espnet/bin/mt_train.py	/^import os$/;"	i
os	espnet/bin/mt_trans.py	/^import os$/;"	i
os	espnet/bin/st_train.py	/^import os$/;"	i
os	espnet/bin/st_trans.py	/^import os$/;"	i
os	espnet/bin/tts_decode.py	/^import os$/;"	i
os	espnet/bin/tts_train.py	/^import os$/;"	i
os	espnet/lm/lm_utils.py	/^import os$/;"	i
os	espnet/mt/pytorch_backend/mt.py	/^import os$/;"	i
os	espnet/nets/chainer_backend/transformer/plot.py	/^    import os$/;"	i
os	espnet/nets/pytorch_backend/e2e_asr.py	/^import os$/;"	i
os	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^import os$/;"	i
os	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^import os$/;"	i
os	espnet/nets/pytorch_backend/e2e_mt.py	/^import os$/;"	i
os	espnet/nets/pytorch_backend/e2e_st.py	/^import os$/;"	i
os	espnet/nets/pytorch_backend/transformer/plot.py	/^    import os$/;"	i
os	espnet/st/pytorch_backend/st.py	/^import os$/;"	i
os	espnet/tts/pytorch_backend/tts.py	/^import os$/;"	i
os	espnet/utils/deterministic_utils.py	/^import os$/;"	i
os	espnet/utils/io_utils.py	/^import os$/;"	i
os	setup.py	/^import os$/;"	i
os	test/test_asr_init.py	/^import os$/;"	i
os	test/test_e2e_asr.py	/^import os$/;"	i
os	test/test_e2e_asr_mulenc.py	/^import os$/;"	i
os	test/test_e2e_compatibility.py	/^import os$/;"	i
os	test/test_e2e_mt.py	/^import os$/;"	i
os	test/test_e2e_st.py	/^import os$/;"	i
os	test/test_e2e_tts_fastspeech.py	/^import os$/;"	i
os	test/test_initialization.py	/^import os$/;"	i
os	test/test_io_voxforge.py	/^import os$/;"	i
os	test/test_sentencepiece.py	/^import os$/;"	i
os	utils/average_checkpoints.py	/^import os$/;"	i
os	utils/convert_fbank_to_wav.py	/^import os$/;"	i
os	utils/eval-source-separation.py	/^import os$/;"	i
os	utils/feats2npy.py	/^import os$/;"	i
os	utils/generate_wav_from_fbank.py	/^import os$/;"	i
os	utils/json2sctm.py	/^import os$/;"	i
os	utils/mergejson.py	/^import os$/;"	i
os	utils/splitjson.py	/^import os$/;"	i
os	utils/trim_silence.py	/^import os$/;"	i
out	utils/merge_scp2json.py	/^        out = open(args.out, 'w', encoding='utf-8')$/;"	v
out	utils/merge_scp2json.py	/^        out = sys.stdout$/;"	v
out_add_dic	utils/addjson.py	/^            out_add_dic = {}$/;"	v
out_dic	egs/wsj_mix/asr1/local/mergejson.py	/^            out_dic = {}$/;"	v
out_dir	egs/reverb/asr1/local/run_wpe.py	/^out_dir = os.path.dirname(output_files[0])$/;"	v
out_dir	egs/reverb/asr1_multich/local/run_wpe.py	/^out_dir = os.path.dirname(output_files[0])$/;"	v
out_idx	egs/wsj_mix/asr1/local/mergejson.py	/^        out_idx  = 1$/;"	v
out_line	egs/hkust/asr1/local/hkust_segment.py	/^  out_line = blks[0]$/;"	v
out_list	egs/wsj_mix/asr1/local/mergejson.py	/^        out_list = []$/;"	v
out_path	utils/feats2npy.py	/^            out_path = join(args.out_dir, f"{utt_id}-feats.npy")$/;"	v
outdir	test/test_beam_search.py	/^    outdir=None,$/;"	v
outdir	test/test_initialization.py	/^    outdir=None,$/;"	v
output_files	egs/reverb/asr1/local/run_wpe.py	/^output_files = args.files[len(args.files)\/\/2:]$/;"	v
output_files	egs/reverb/asr1_multich/local/run_wpe.py	/^output_files = args.files[len(args.files)\/\/2:]$/;"	v
output_fscps	egs/wsj_mix/asr1/local/merge_scp2json.py	/^    output_fscps = [[open(i[1], 'r', encoding='utf-8') for i in il]$/;"	v
output_fscps	utils/merge_scp2json.py	/^    output_fscps = [[open(i[1], 'r', encoding='utf-8') for i in il]$/;"	v
output_infos	egs/wsj_mix/asr1/local/merge_scp2json.py	/^    output_infos = []$/;"	v
output_infos	utils/merge_scp2json.py	/^    output_infos = []$/;"	v
output_lines	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        output_lines = [[f.readline() for f in fl] for fl in output_fscps]$/;"	v
output_lines	utils/merge_scp2json.py	/^        output_lines = [[f.readline() for f in fl] for fl in output_fscps]$/;"	v
output_list	utils/addjson.py	/^            output_list = orgdic['output']$/;"	v
pack_padded_sequence	espnet/nets/pytorch_backend/rnn/encoders.py	/^from torch.nn.utils.rnn import pack_padded_sequence$/;"	i
pack_padded_sequence	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^from torch.nn.utils.rnn import pack_padded_sequence$/;"	i
pack_padded_sequence	espnet/nets/pytorch_backend/tacotron2/encoder.py	/^from torch.nn.utils.rnn import pack_padded_sequence$/;"	i
packages	setup.py	/^      packages=find_packages(include=['espnet*']),$/;"	v
pad	egs/reverb/asr1/local/run_wpe.py	/^    pad=True,$/;"	v
pad	egs/reverb/asr1_multich/local/run_wpe.py	/^    pad=True,$/;"	v
pad_list	espnet/asr/pytorch_backend/asr.py	/^from espnet.nets.pytorch_backend.e2e_asr import pad_list$/;"	i
pad_list	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.nets.pytorch_backend.e2e_asr_mix import pad_list$/;"	i
pad_list	espnet/mt/pytorch_backend/mt.py	/^from espnet.nets.pytorch_backend.e2e_asr import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/e2e_mt.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/fastspeech/duration_calculator.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/fastspeech/length_regulator.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/nets_utils.py	/^def pad_list(xs, pad_value):$/;"	f
pad_list	espnet/nets/pytorch_backend/rnn/decoders.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/nets/pytorch_backend/transformer/add_sos_eos.py	/^    from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	espnet/st/pytorch_backend/st.py	/^from espnet.nets.pytorch_backend.e2e_asr import pad_list$/;"	i
pad_list	espnet/tts/pytorch_backend/tts.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	test/test_asr_init.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	test/test_e2e_asr.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	test/test_e2e_asr_mulenc.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	test/test_e2e_asr_transducer.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	test/test_e2e_mt.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	test/test_e2e_st.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	test/test_e2e_tts_fastspeech.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	test/test_e2e_tts_tacotron2.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	test/test_e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list$/;"	i
pad_list	test/test_loss.py	/^from espnet.nets.pytorch_backend.e2e_asr import pad_list$/;"	i
pad_list	test/test_torch.py	/^from espnet.nets.pytorch_backend.nets_utils import pad_list  # NOQA$/;"	i
pad_packed_sequence	espnet/nets/pytorch_backend/rnn/encoders.py	/^from torch.nn.utils.rnn import pad_packed_sequence$/;"	i
pad_packed_sequence	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^from torch.nn.utils.rnn import pad_packed_sequence$/;"	i
pad_packed_sequence	espnet/nets/pytorch_backend/tacotron2/encoder.py	/^from torch.nn.utils.rnn import pad_packed_sequence$/;"	i
param_groups	espnet/nets/pytorch_backend/transformer/optimizer.py	/^    def param_groups(self):$/;"	m	class:NoamOpt
parse_hypothesis	espnet/asr/asr_mix_utils.py	/^from espnet.asr.asr_utils import parse_hypothesis$/;"	i
parse_hypothesis	espnet/asr/asr_utils.py	/^def parse_hypothesis(hyp, char_list):$/;"	f
parse_hypothesis	espnet/mt/mt_utils.py	/^def parse_hypothesis(hyp, char_list):$/;"	f
parse_sgml_tag	egs/hub4_spanish/asr1/local/parse_sgm.pl	/^sub parse_sgml_tag {$/;"	s
parse_wspecifier	espnet/utils/cli_writers.py	/^def parse_wspecifier(wspecifier: str) -> Dict[str, str]:$/;"	f
parser	doc/module2rst.py	/^parser = configargparse.ArgumentParser($/;"	v
parser	egs/arctic/tts1/local/clean_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/chime5/asr1/local/json2text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/commonvoice/asr1/local/filter_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/csj/asr1/local/csj_rm_tag.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^parser = argparse.ArgumentParser(description='format acronyms to a._b._c.')$/;"	v
parser	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^parser = argparse.ArgumentParser(description='format acronyms to a._b._c.')$/;"	v
parser	egs/iwslt18/asr1/local/json2trn_reorder.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/iwslt18/asr1/local/reorder_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/iwslt18/mt1/local/json2trn_reorder.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/iwslt18/mt1/local/reorder_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/iwslt18/st1/local/json2trn_reorder.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/iwslt18/st1/local/reorder_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/jnas/asr1/local/clean_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/jnas/asr1/local/filter_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/jnas/tts1/local/clean_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/jnas/tts1/local/filter_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/jsut/tts1/local/clean_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/jvs/tts1/local/clean_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/libri_trans/asr1/local/concat_json_multiref.py	/^    parser = argparse.ArgumentParser($/;"	v
parser	egs/libri_trans/mt1/local/concat_json_multiref.py	/^    parser = argparse.ArgumentParser($/;"	v
parser	egs/libri_trans/st1/local/concat_json_multiref.py	/^    parser = argparse.ArgumentParser($/;"	v
parser	egs/ljspeech/tts1/local/clean_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/ljspeech/tts2/local/clean_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/reverb/asr1/local/filterjson.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/reverb/asr1/local/run_wpe.py	/^parser = argparse.ArgumentParser()$/;"	v
parser	egs/reverb/asr1_multich/local/filterjson.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/reverb/asr1_multich/local/run_wpe.py	/^parser = argparse.ArgumentParser()$/;"	v
parser	egs/swbd/asr1/local/format_acronyms_dict.py	/^parser = argparse.ArgumentParser(description='format acronyms to a._b._c.')$/;"	v
parser	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^parser = argparse.ArgumentParser(description='format acronyms to a._b._c.')$/;"	v
parser	egs/tweb/tts1/local/clean_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/vais1000/tts1/local/clean_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/voxforge/asr1/local/filter_text.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	egs/wsj_mix/asr1/local/merge_scp2json.py	/^    parser = argparse.ArgumentParser($/;"	v
parser	egs/wsj_mix/asr1/local/mergejson.py	/^    parser = argparse.ArgumentParser()$/;"	v
parser	utils/addjson.py	/^    parser = get_parser()$/;"	v
parser	utils/merge_scp2json.py	/^    parser = get_parser()$/;"	v
parser	utils/mergejson.py	/^    parser = get_parser()$/;"	v
parser	utils/result2json.py	/^    parser = get_parser()$/;"	v
parser	utils/scp2json.py	/^    parser = get_parser()$/;"	v
parser	utils/text2vocabulary.py	/^    parser = get_parser()$/;"	v
pathlib	doc/argparse2rst.py	/^import pathlib$/;"	i
patterns	egs/vais1000/tts1/local/text/regex_tokenize.py	/^    patterns = patterns.decode('utf-8')$/;"	v
patterns	egs/vais1000/tts1/local/text/regex_tokenize.py	/^patterns = "(" + "|".join(patterns) + ")"$/;"	v
patterns	egs/vais1000/tts1/local/text/regex_tokenize.py	/^patterns = []$/;"	v
patterns	egs/vais1000/tts1/local/text/regex_tokenize.py	/^patterns = re.compile(patterns, re.VERBOSE | re.UNICODE)$/;"	v
penalty	test/test_beam_search.py	/^    penalty=0.5,$/;"	v
penalty	test/test_initialization.py	/^    penalty=0.5,$/;"	v
permutationDFS	utils/eval_perm_free_error.py	/^def permutationDFS(source, start, res):$/;"	f
permutation_schemes	utils/eval_perm_free_error.py	/^def permutation_schemes(num_spkrs):$/;"	f
perturb_sampling_shuffle	espnet/utils/dataset.py	/^    def perturb_sampling_shuffle(self, dataset):$/;"	m	class:ChainerDataLoader
phi	espnet/utils/spec_augment.py	/^def phi(r, order):$/;"	f
pip	setup.py	/^import pip$/;"	i
pit_process	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def pit_process(self, losses):$/;"	m	class:PIT
pkg_resources	espnet/__init__.py	/^import pkg_resources$/;"	i
pkg_resources	tools/check_install.py	/^                import pkg_resources$/;"	i
platform	espnet/bin/tts_decode.py	/^import platform$/;"	i
plot	test/test_e2e_asr_transformer.py	/^        from espnet.nets.pytorch_backend.transformer import plot$/;"	i
plot	test/test_e2e_st_transformer.py	/^        from espnet.nets.pytorch_backend.transformer import plot$/;"	i
plot_multi_head_attention	espnet/nets/chainer_backend/transformer/plot.py	/^def plot_multi_head_attention(data, attn_dict, outdir, suffix="png", savefn=savefig):$/;"	f
plot_multi_head_attention	espnet/nets/pytorch_backend/transformer/plot.py	/^def plot_multi_head_attention(data, attn_dict, outdir, suffix="png", savefn=savefig, srcatt_mode=False):$/;"	f
plot_spectrogram	espnet/asr/asr_utils.py	/^def plot_spectrogram(plt, spec, mode='db', fs=None, frame_shift=None,$/;"	f
plot_spectrogram	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import plot_spectrogram$/;"	i
plotfn	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^    def plotfn(self, data, attn_dict, outdir, suffix="png", savefn=None):$/;"	m	class:TTSPlot
plotfn	espnet/nets/pytorch_backend/transformer/plot.py	/^    def plotfn(self, *args, **kwargs):$/;"	m	class:PlotAttentionReport
plt	espnet/asr/asr_mix_utils.py	/^        import matplotlib.pyplot as plt$/;"	i
plt	espnet/asr/asr_utils.py	/^        import matplotlib.pyplot as plt$/;"	i
plt	espnet/asr/pytorch_backend/asr.py	/^                import matplotlib.pyplot as plt$/;"	i
plt	espnet/nets/chainer_backend/transformer/plot.py	/^import matplotlib.pyplot as plt$/;"	i
plt	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^        import matplotlib.pyplot as plt$/;"	i
plt	espnet/nets/pytorch_backend/transformer/plot.py	/^import matplotlib.pyplot as plt$/;"	i
plt	espnet/tts/pytorch_backend/tts.py	/^        import matplotlib.pyplot as plt$/;"	i
plt	test/test_transformer_decode.py	/^    import matplotlib.pyplot as plt$/;"	i
plt	utils/trim_silence.py	/^import matplotlib.pyplot as plt$/;"	i
post_process	espnet/nets/beam_search.py	/^    def post_process(self, i: int, maxlen: int, maxlenratio: float,$/;"	m	class:BeamSearch
pre_beam	espnet/nets/beam_search.py	/^    def pre_beam(self, scores: Dict[str, torch.Tensor], device: torch.device) -> torch.Tensor:$/;"	m	class:BeamSearch
pre_match	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^    pre_match = re.match(r'^[A-Za-z]+$|^[A-Za-z]+\\'s$|^[A-Za-z]+s$',word)$/;"	v
pre_match	egs/swbd/asr1/local/format_acronyms_dict.py	/^    pre_match = re.match(r'^[A-Za-z]+$|^[A-Za-z]+\\'s$|^[A-Za-z]+s$',word)$/;"	v
predefined_asr	espnet/nets/asr_interface.py	/^predefined_asr = {$/;"	v
predefined_lms	espnet/nets/lm_interface.py	/^predefined_lms = {$/;"	v
predefined_st	espnet/nets/st_interface.py	/^predefined_st = {$/;"	v
predict	espnet/lm/chainer_backend/lm.py	/^    def predict(self, state, x):$/;"	m	class:ClassifierWithState
predict	espnet/nets/pytorch_backend/lm/default.py	/^    def predict(self, state, x):$/;"	m	class:ClassifierWithState
prepare	test/test_beam_search.py	/^def prepare(E2E, args, mtlalpha=0.0):$/;"	f
prepare	test/test_e2e_asr_transformer.py	/^def prepare(backend, args):$/;"	f
prepare	test/test_e2e_st_transformer.py	/^def prepare(backend, args):$/;"	f
prepare	test/test_lm.py	/^from test.test_beam_search import prepare$/;"	i
prepare_copy_task	test/test_e2e_asr_transformer.py	/^def prepare_copy_task(d_model, d_ff=64, n=1):$/;"	f
prepare_inputs	test/test_e2e_asr.py	/^def prepare_inputs(mode, ilens=[20, 15], olens=[4, 3], is_cuda=False):$/;"	f
prepare_inputs	test/test_e2e_asr_mulenc.py	/^def prepare_inputs(mode, num_encs=2, is_cuda=False):$/;"	f
prepare_inputs	test/test_e2e_asr_transducer.py	/^def prepare_inputs(backend, idim, odim, ilens, olens, is_cuda=False):$/;"	f
prepare_inputs	test/test_e2e_mt.py	/^def prepare_inputs(mode, ilens=[20, 10], olens=[4, 3], is_cuda=False):$/;"	f
prepare_inputs	test/test_e2e_st.py	/^def prepare_inputs(mode, ilens=[20, 15], olens_tgt=[4, 3], olens_src=[3, 2], is_cuda=False):$/;"	f
prepare_inputs	test/test_e2e_tts_fastspeech.py	/^def prepare_inputs(idim, odim, ilens, olens, spk_embed_dim=None,$/;"	f
prepare_inputs	test/test_e2e_tts_tacotron2.py	/^def prepare_inputs(bs, idim, odim, maxin_len, maxout_len,$/;"	f
prepare_inputs	test/test_e2e_tts_transformer.py	/^def prepare_inputs(idim, odim, ilens, olens, spk_embed_dim=None,$/;"	f
prev_line	egs/iwslt19/asr1/local/join_suffix.py	/^    prev_line = line$/;"	v
prev_line	egs/iwslt19/asr1/local/join_suffix.py	/^prev_line = ''$/;"	v
prev_line	egs/iwslt19/st1/local/join_suffix.py	/^    prev_line = line$/;"	v
prev_line	egs/iwslt19/st1/local/join_suffix.py	/^prev_line = ''$/;"	v
prev_line	egs/tedlium2/asr1/local/join_suffix.py	/^    prev_line = line$/;"	v
prev_line	egs/tedlium2/asr1/local/join_suffix.py	/^prev_line = ''$/;"	v
prev_line	egs/tedlium3/asr1/local/join_suffix.py	/^    prev_line = line$/;"	v
prev_line	egs/tedlium3/asr1/local/join_suffix.py	/^prev_line = ''$/;"	v
previous_epoch_detail	espnet/lm/lm_utils.py	/^    def previous_epoch_detail(self):$/;"	m	class:ParallelSentenceIterator
print_function	egs/an4/asr1/local/data_prep.py	/^from __future__ import print_function$/;"	i
print_function	egs/an4/tts1/local/data_prep.py	/^from __future__ import print_function$/;"	i
print_function	egs/csj/asr1/local/csj_rm_tag.py	/^from __future__ import print_function$/;"	i
print_function	egs/hkust/asr1/local/hkust_segment.py	/^from __future__ import print_function$/;"	i
print_function	egs/iwslt19/asr1/local/join_suffix.py	/^from __future__ import print_function$/;"	i
print_function	egs/iwslt19/st1/local/join_suffix.py	/^from __future__ import print_function$/;"	i
print_function	egs/jnas/asr1/local/filter_text.py	/^from __future__ import print_function$/;"	i
print_function	egs/jnas/asr1/local/make_eval_trans.py	/^from __future__ import print_function$/;"	i
print_function	egs/jnas/asr1/local/make_train_trans.py	/^from __future__ import print_function$/;"	i
print_function	egs/jnas/tts1/local/filter_text.py	/^from __future__ import print_function$/;"	i
print_function	egs/jnas/tts1/local/make_eval_trans.py	/^from __future__ import print_function$/;"	i
print_function	egs/jnas/tts1/local/make_train_trans.py	/^from __future__ import print_function$/;"	i
print_function	egs/libri_trans/asr1/local/concat_json_multiref.py	/^from __future__ import print_function$/;"	i
print_function	egs/libri_trans/mt1/local/concat_json_multiref.py	/^from __future__ import print_function$/;"	i
print_function	egs/libri_trans/st1/local/concat_json_multiref.py	/^from __future__ import print_function$/;"	i
print_function	egs/mini_an4/asr1/local/data_prep.py	/^from __future__ import print_function$/;"	i
print_function	egs/mini_an4/asr_mix1/local/data_prep.py	/^from __future__ import print_function$/;"	i
print_function	egs/mini_an4/tts1/local/data_prep.py	/^from __future__ import print_function$/;"	i
print_function	egs/reverb/asr1/local/filterjson.py	/^from __future__ import print_function$/;"	i
print_function	egs/reverb/asr1_multich/local/filterjson.py	/^from __future__ import print_function$/;"	i
print_function	egs/tedlium2/asr1/local/join_suffix.py	/^from __future__ import print_function$/;"	i
print_function	egs/tedlium3/asr1/local/join_suffix.py	/^from __future__ import print_function$/;"	i
print_function	egs/voxforge/asr1/local/filter_text.py	/^from __future__ import print_function$/;"	i
print_function	egs/voxforge/asr1/local/make_trans.py	/^from __future__ import print_function$/;"	i
print_function	egs/wsj_mix/asr1/local/merge_scp2json.py	/^from __future__ import print_function$/;"	i
print_function	espnet/lm/chainer_backend/extlm.py	/^from __future__ import print_function$/;"	i
print_function	espnet/lm/chainer_backend/lm.py	/^from __future__ import print_function$/;"	i
print_function	espnet/lm/pytorch_backend/extlm.py	/^from __future__ import print_function$/;"	i
print_function	test/test_e2e_compatibility.py	/^from __future__ import print_function$/;"	i
print_function	test/test_e2e_tts_tacotron2.py	/^from __future__ import print_function$/;"	i
print_function	utils/addjson.py	/^from __future__ import print_function$/;"	i
print_function	utils/concatjson.py	/^from __future__ import print_function$/;"	i
print_function	utils/filt.py	/^from __future__ import print_function$/;"	i
print_function	utils/merge_scp2json.py	/^from __future__ import print_function$/;"	i
print_function	utils/mergejson.py	/^from __future__ import print_function$/;"	i
print_function	utils/result2json.py	/^from __future__ import print_function$/;"	i
print_function	utils/scp2json.py	/^from __future__ import print_function$/;"	i
print_function	utils/splitjson.py	/^from __future__ import print_function$/;"	i
print_function	utils/spm_decode	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
print_function	utils/spm_encode	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
print_function	utils/text2token.py	/^from __future__ import print_function$/;"	i
print_hash	egs/ami/asr1/local/ami_split_segments.pl	/^sub print_hash {$/;"	s
print_usage	utils/queue-freegpu.pl	/^sub print_usage() {$/;"	s
project	doc/conf.py	/^project = u'ESPnet'$/;"	v
project_root	egs/reverb/asr1/local/run_wpe.py	/^from nara_wpe import project_root$/;"	i
project_root	egs/reverb/asr1_multich/local/run_wpe.py	/^from nara_wpe import project_root$/;"	i
push	docker/build.sh	/^push(){$/;"	f
pygments_style	doc/conf.py	/^pygments_style = 'sphinx'$/;"	v
pyopenjtalk	egs/jnas/asr1/local/clean_text.py	/^import pyopenjtalk$/;"	i
pyopenjtalk	egs/jnas/tts1/local/clean_text.py	/^import pyopenjtalk$/;"	i
pyopenjtalk	egs/jsut/tts1/local/clean_text.py	/^import pyopenjtalk$/;"	i
pyopenjtalk	egs/jvs/tts1/local/clean_text.py	/^import pyopenjtalk$/;"	i
pysptk	utils/generate_wav_from_fbank.py	/^import pysptk$/;"	i
pytest	test/test_asr_init.py	/^import pytest$/;"	i
pytest	test/test_asr_interface.py	/^import pytest$/;"	i
pytest	test/test_beam_search.py	/^import pytest$/;"	i
pytest	test/test_cli.py	/^import pytest$/;"	i
pytest	test/test_e2e_asr.py	/^import pytest$/;"	i
pytest	test/test_e2e_asr_mulenc.py	/^import pytest$/;"	i
pytest	test/test_e2e_asr_transducer.py	/^import pytest$/;"	i
pytest	test/test_e2e_asr_transformer.py	/^import pytest$/;"	i
pytest	test/test_e2e_compatibility.py	/^import pytest$/;"	i
pytest	test/test_e2e_mt.py	/^import pytest$/;"	i
pytest	test/test_e2e_st.py	/^import pytest$/;"	i
pytest	test/test_e2e_st_transformer.py	/^import pytest$/;"	i
pytest	test/test_e2e_tts_fastspeech.py	/^import pytest$/;"	i
pytest	test/test_e2e_tts_tacotron2.py	/^import pytest$/;"	i
pytest	test/test_e2e_tts_transformer.py	/^import pytest$/;"	i
pytest	test/test_initialization.py	/^import pytest$/;"	i
pytest	test/test_io_voxforge.py	/^import pytest$/;"	i
pytest	test/test_lm.py	/^import pytest$/;"	i
pytest	test/test_loss.py	/^import pytest$/;"	i
pytest	test/test_multi_spkrs.py	/^import pytest$/;"	i
pytest	test/test_optimizer.py	/^import pytest$/;"	i
pytest	test/test_positional_encoding.py	/^import pytest$/;"	i
pytest	test/test_recog.py	/^import pytest$/;"	i
pytest	test/test_torch.py	/^import pytest$/;"	i
pytest	test/test_train_dtype.py	/^import pytest$/;"	i
pytest	test/test_transformer_decode.py	/^import pytest$/;"	i
pytest	test/test_utils.py	/^import pytest$/;"	i
pytorch_backend	espnet/asr/pytorch_backend/asr.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
pytorch_backend	espnet/asr/pytorch_backend/asr.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
pytorch_backend	espnet/asr/pytorch_backend/asr_mix.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
pytorch_backend	espnet/asr/pytorch_backend/asr_mix.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
pytorch_backend	espnet/mt/pytorch_backend/mt.py	/^import espnet.lm.pytorch_backend.lm as lm_pytorch$/;"	i
pytorch_backend	espnet/st/pytorch_backend/st.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
pytorch_backend	test/test_e2e_asr.py	/^        import espnet.nets.pytorch_backend.e2e_asr as m$/;"	i
pytorch_backend	test/test_e2e_asr_mulenc.py	/^    import espnet.nets.pytorch_backend.e2e_asr_mulenc as m$/;"	i
pytorch_backend	test/test_e2e_mt.py	/^        import espnet.nets.pytorch_backend.e2e_mt as m$/;"	i
pytorch_backend	test/test_e2e_st.py	/^        import espnet.nets.pytorch_backend.e2e_st as m$/;"	i
pytorch_backend	test/test_initialization.py	/^    import espnet.nets.pytorch_backend.e2e_asr as m$/;"	i
pytorch_backend	test/test_lm.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
pytorch_backend	test/test_recog.py	/^import espnet.lm.pytorch_backend.extlm as extlm_pytorch$/;"	i
pytorch_backend	test/test_recog.py	/^import espnet.nets.pytorch_backend.lm.default as lm_pytorch$/;"	i
pytorch_prepare_inputs	test/test_asr_init.py	/^def pytorch_prepare_inputs(idim, odim, ilens, olens, is_cuda=False):$/;"	f
r	utils/json2text.py	/^    r = codecs.open(args.ref, 'w', encoding="utf-8")$/;"	v
raised	test/test_transform.py	/^        raised = True$/;"	v	class:test_func_trans.FooBar
random	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^import random$/;"	i
random	espnet/bin/asr_enhance.py	/^import random$/;"	i
random	espnet/bin/asr_recog.py	/^import random$/;"	i
random	espnet/bin/asr_train.py	/^import random$/;"	i
random	espnet/bin/lm_train.py	/^import random$/;"	i
random	espnet/bin/mt_train.py	/^import random$/;"	i
random	espnet/bin/mt_trans.py	/^import random$/;"	i
random	espnet/bin/st_train.py	/^import random$/;"	i
random	espnet/bin/st_trans.py	/^import random$/;"	i
random	espnet/bin/tts_train.py	/^import random$/;"	i
random	espnet/lm/lm_utils.py	/^import random$/;"	i
random	espnet/nets/chainer_backend/rnn/decoders.py	/^import random$/;"	i
random	espnet/nets/pytorch_backend/rnn/decoders.py	/^import random$/;"	i
random	espnet/transform/spec_augment.py	/^import random$/;"	i
random	espnet/utils/spec_augment.py	/^import random$/;"	i
random	espnet/utils/training/batchfy.py	/^    import random$/;"	i
random	espnet/utils/training/batchfy.py	/^import random$/;"	i
random	test/test_initialization.py	/^import random$/;"	i
rate	espnet/nets/pytorch_backend/transformer/optimizer.py	/^    def rate(self, step=None):$/;"	m	class:NoamOpt
re	doc/argparse2rst.py	/^import re$/;"	i
re	egs/an4/asr1/local/data_prep.py	/^import re$/;"	i
re	egs/an4/tts1/local/data_prep.py	/^import re$/;"	i
re	egs/arctic/tts1/local/text/__init__.py	/^import re$/;"	i
re	egs/arctic/tts1/local/text/cleaners.py	/^import re$/;"	i
re	egs/arctic/tts1/local/text/cmudict.py	/^import re$/;"	i
re	egs/arctic/tts1/local/text/numbers.py	/^import re$/;"	i
re	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^import argparse,re$/;"	i
re	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^import argparse,re$/;"	i
re	egs/iwslt18/asr1/local/ctm2segments.py	/^import re$/;"	i
re	egs/iwslt18/asr1/local/parse_xml.py	/^import re$/;"	i
re	egs/iwslt18/mt1/local/ctm2segments.py	/^import re$/;"	i
re	egs/iwslt18/mt1/local/parse_xml.py	/^import re$/;"	i
re	egs/iwslt18/st1/local/ctm2segments.py	/^import re$/;"	i
re	egs/iwslt18/st1/local/parse_xml.py	/^import re$/;"	i
re	egs/ljspeech/tts1/local/text/__init__.py	/^import re$/;"	i
re	egs/ljspeech/tts1/local/text/cleaners.py	/^import re$/;"	i
re	egs/ljspeech/tts1/local/text/cmudict.py	/^import re$/;"	i
re	egs/ljspeech/tts1/local/text/numbers.py	/^import re$/;"	i
re	egs/ljspeech/tts2/local/text/__init__.py	/^import re$/;"	i
re	egs/ljspeech/tts2/local/text/cleaners.py	/^import re$/;"	i
re	egs/ljspeech/tts2/local/text/cmudict.py	/^import re$/;"	i
re	egs/ljspeech/tts2/local/text/numbers.py	/^import re$/;"	i
re	egs/mini_an4/asr1/local/data_prep.py	/^import re$/;"	i
re	egs/mini_an4/asr_mix1/local/data_prep.py	/^import re$/;"	i
re	egs/mini_an4/tts1/local/data_prep.py	/^import re$/;"	i
re	egs/reverb/asr1/local/filterjson.py	/^import re$/;"	i
re	egs/reverb/asr1_multich/local/filterjson.py	/^import re$/;"	i
re	egs/swbd/asr1/local/format_acronyms_dict.py	/^import argparse,re$/;"	i
re	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^import argparse,re$/;"	i
re	egs/tweb/tts1/local/text/__init__.py	/^import re$/;"	i
re	egs/tweb/tts1/local/text/cleaners.py	/^import re$/;"	i
re	egs/tweb/tts1/local/text/cmudict.py	/^import re$/;"	i
re	egs/tweb/tts1/local/text/numbers.py	/^import re$/;"	i
re	egs/vais1000/tts1/local/text/regex_tokenize.py	/^import re$/;"	i
re	test/test_e2e_compatibility.py	/^import re$/;"	i
re	utils/eval_perm_free_error.py	/^import re$/;"	i
re	utils/result2json.py	/^import re$/;"	i
re	utils/text2token.py	/^import re$/;"	i
re	utils/trn2ctm.py	/^import re$/;"	i
re	utils/trn2stm.py	/^import re$/;"	i
re_id	utils/result2json.py	/^    re_id = r'^id: '$/;"	v
re_id	utils/result2json.py	/^    re_id = re.compile(re_id)$/;"	v
re_patterns	utils/result2json.py	/^    re_patterns = {}$/;"	v
re_strings	utils/result2json.py	/^    re_strings = {'Speaker': r'^Speaker sentences',$/;"	v
read_sphere	egs/dirha_wsj/asr1/local/tools/read_sphere.m	/^function [y]=read_sphere(path_reader,x)$/;"	f
read_tokens	espnet/lm/chainer_backend/lm.py	/^from espnet.lm.lm_utils import read_tokens$/;"	i
read_tokens	espnet/lm/lm_utils.py	/^def read_tokens(filename, label_dict):$/;"	f
read_tokens	espnet/lm/pytorch_backend/lm.py	/^from espnet.lm.lm_utils import read_tokens$/;"	i
readsph	egs/dirha_wsj/asr1/local/tools/readsph.m	/^function [y,fs,wrd,phn,ffx]=readsph(filename,mode,nmax,nskip)$/;"	f
recog	espnet/asr/chainer_backend/asr.py	/^def recog(args):$/;"	f
recog	espnet/asr/pytorch_backend/asr.py	/^def recog(args):$/;"	f
recog	espnet/asr/pytorch_backend/asr_mix.py	/^def recog(args):$/;"	f
recog	espnet/bin/asr_recog.py	/^                    from espnet.asr.pytorch_backend.asr import recog$/;"	i
recog	espnet/bin/asr_recog.py	/^            from espnet.asr.chainer_backend.asr import recog$/;"	i
recog	espnet/bin/asr_recog.py	/^            from espnet.asr.pytorch_backend.asr_mix import recog$/;"	i
recog_v2	espnet/asr/pytorch_backend/recog.py	/^def recog_v2(args):$/;"	f
recog_v2	espnet/bin/asr_recog.py	/^                    from espnet.asr.pytorch_backend.recog import recog_v2$/;"	i
recognize	espnet/nets/asr_interface.py	/^    def recognize(self, x, recog_args, char_list=None, rnnlm=None):$/;"	m	class:ASRInterface
recognize	espnet/nets/chainer_backend/e2e_asr.py	/^    def recognize(self, x, recog_args, char_list, rnnlm=None):$/;"	m	class:E2E
recognize	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def recognize(self, x_block, recog_args, char_list=None, rnnlm=None):$/;"	m	class:E2E
recognize	espnet/nets/chainer_backend/transformer/decoder.py	/^    def recognize(self, e, yy_mask, source):$/;"	m	class:Decoder
recognize	espnet/nets/pytorch_backend/e2e_asr.py	/^    def recognize(self, x, recog_args, char_list, rnnlm=None):$/;"	m	class:E2E
recognize	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def recognize(self, x, recog_args, char_list, rnnlm=None):$/;"	m	class:E2E
recognize	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def recognize(self, x_list, recog_args, char_list, rnnlm=None):$/;"	m	class:E2E
recognize	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^    def recognize(self, x, recog_args, char_list, rnnlm=None):$/;"	m	class:E2E
recognize	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def recognize(self, x, recog_args, char_list=None, rnnlm=None, use_jit=False):$/;"	m	class:E2E
recognize	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def recognize(self, h, recog_args):$/;"	m	class:DecoderRNNT
recognize	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def recognize(self, h, recog_args):$/;"	m	class:DecoderRNNTAtt
recognize_batch	espnet/nets/asr_interface.py	/^    def recognize_batch(self, x, recog_args, char_list=None, rnnlm=None):$/;"	m	class:ASRInterface
recognize_batch	espnet/nets/pytorch_backend/e2e_asr.py	/^    def recognize_batch(self, xs, recog_args, char_list, rnnlm=None):$/;"	m	class:E2E
recognize_batch	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def recognize_batch(self, xs, recog_args, char_list, rnnlm=None):$/;"	m	class:E2E
recognize_batch	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def recognize_batch(self, xs_list, recog_args, char_list, rnnlm=None):$/;"	m	class:E2E
recognize_beam	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def recognize_beam(self, h, lpz, recog_args, char_list=None, rnnlm=None):$/;"	m	class:E2E
recognize_beam	espnet/nets/chainer_backend/rnn/decoders.py	/^    def recognize_beam(self, h, lpz, recog_args, char_list, rnnlm=None):$/;"	m	class:Decoder
recognize_beam	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def recognize_beam(self, h, lpz, recog_args, char_list, rnnlm=None, strm_idx=0):$/;"	m	class:Decoder
recognize_beam	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def recognize_beam(self, h, recog_args, rnnlm=None):$/;"	m	class:DecoderRNNT
recognize_beam	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def recognize_beam(self, h, recog_args, rnnlm=None):$/;"	m	class:DecoderRNNTAtt
recognize_beam_batch	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def recognize_beam_batch(self, h, hlens, lpz, recog_args, char_list, rnnlm=None,$/;"	m	class:Decoder
recognize_ctc_greedy	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def recognize_ctc_greedy(self, x, recog_args):$/;"	m	class:E2E
recognize_jca	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def recognize_jca(self, x, recog_args, char_list=None, rnnlm=None, use_jit=False):$/;"	m	class:E2E
ref	egs/iwslt18/asr1/local/reorder_text.py	/^        ref = ' '.join(line.split()[1:])$/;"	v
ref	egs/iwslt18/mt1/local/reorder_text.py	/^        ref = ' '.join(line.split()[1:])$/;"	v
ref	egs/iwslt18/st1/local/reorder_text.py	/^        ref = ' '.join(line.split()[1:])$/;"	v
refs	egs/iwslt18/asr1/local/reorder_text.py	/^        refs = f.readlines()$/;"	v
refs	egs/iwslt18/mt1/local/reorder_text.py	/^        refs = f.readlines()$/;"	v
refs	egs/iwslt18/st1/local/reorder_text.py	/^        refs = f.readlines()$/;"	v
release	doc/conf.py	/^release = espnet.__version__$/;"	v
remove_unnecessary_symbols	egs/arctic/tts1/local/text/cleaners.py	/^def remove_unnecessary_symbols(text):$/;"	f
remove_unnecessary_symbols	egs/ljspeech/tts1/local/text/cleaners.py	/^def remove_unnecessary_symbols(text):$/;"	f
remove_unnecessary_symbols	egs/ljspeech/tts2/local/text/cleaners.py	/^def remove_unnecessary_symbols(text):$/;"	f
remove_unnecessary_symbols	egs/tweb/tts1/local/text/cleaners.py	/^def remove_unnecessary_symbols(text):$/;"	f
repeat	espnet/nets/pytorch_backend/transformer/decoder.py	/^from espnet.nets.pytorch_backend.transformer.repeat import repeat$/;"	i
repeat	espnet/nets/pytorch_backend/transformer/encoder.py	/^from espnet.nets.pytorch_backend.transformer.repeat import repeat$/;"	i
repeat	espnet/nets/pytorch_backend/transformer/repeat.py	/^def repeat(N, fn):$/;"	f
replace_sos	test/test_beam_search.py	/^    replace_sos=False,$/;"	v
replace_sos	test/test_initialization.py	/^    replace_sos=False,$/;"	v
report	espnet/lm/pytorch_backend/lm.py	/^    def report(self, loss):$/;"	m	class:Reporter
report	espnet/nets/pytorch_backend/e2e_asr.py	/^    def report(self, loss_ctc, loss_att, acc, cer_ctc, cer, wer, mtl_loss):$/;"	m	class:Reporter
report	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^    def report(self, loss_ctc, loss_att, acc, cer, wer, mtl_loss):$/;"	m	class:Reporter
report	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def report(self, loss_ctc_list, loss_att, acc, cer_ctc_list, cer, wer, mtl_loss):$/;"	m	class:Reporter
report	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^    def report(self, loss, cer, wer):$/;"	m	class:Reporter
report	espnet/nets/pytorch_backend/e2e_mt.py	/^    def report(self, loss, acc, ppl, bleu):$/;"	m	class:Reporter
report	espnet/nets/pytorch_backend/e2e_st.py	/^    def report(self, loss_asr, loss_mt, loss_st, acc_asr, acc_mt, acc,$/;"	m	class:Reporter
report	espnet/nets/tts_interface.py	/^    def report(self, dicts):$/;"	m	class:Reporter
report_cer	test/test_beam_search.py	/^    report_cer=False,$/;"	v
report_cer	test/test_initialization.py	/^    report_cer=False,$/;"	v
report_wer	test/test_beam_search.py	/^    report_wer=False,$/;"	v
report_wer	test/test_initialization.py	/^    report_wer=False,$/;"	v
reporter	espnet/lm/chainer_backend/lm.py	/^from chainer import reporter$/;"	i
reporter	espnet/lm/pytorch_backend/lm.py	/^from chainer import reporter$/;"	i
reporter	espnet/nets/chainer_backend/e2e_asr.py	/^from chainer import reporter$/;"	i
reporter	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from chainer import reporter$/;"	i
reporter	espnet/nets/pytorch_backend/e2e_asr.py	/^from chainer import reporter$/;"	i
reporter	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from chainer import reporter$/;"	i
reporter	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from chainer import reporter$/;"	i
reporter	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^from chainer import reporter$/;"	i
reporter	espnet/nets/pytorch_backend/e2e_mt.py	/^from chainer import reporter$/;"	i
reporter	espnet/nets/pytorch_backend/e2e_st.py	/^from chainer import reporter$/;"	i
reporter_module	espnet/asr/pytorch_backend/asr.py	/^from chainer import reporter as reporter_module$/;"	i
requirements	setup.py	/^requirements = {$/;"	v
reset	espnet/nets/chainer_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttDot
reset	espnet/nets/chainer_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttLoc
reset	espnet/nets/chainer_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:NoAtt
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttAdd
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttCov
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttCovLoc
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttDot
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttForward
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttForwardTA
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttLoc
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttLoc2D
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttLocRec
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttMultiHeadAdd
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttMultiHeadDot
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttMultiHeadLoc
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:AttMultiHeadMultiResLoc
reset	espnet/nets/pytorch_backend/rnn/attentions.py	/^    def reset(self):$/;"	m	class:NoAtt
reset_backward_rnn_state	espnet/nets/pytorch_backend/rnn/encoders.py	/^def reset_backward_rnn_state(states):$/;"	f
reset_parameters	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^    def reset_parameters(self, args):$/;"	m	class:E2E
reset_parameters	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def reset_parameters(self, args):$/;"	m	class:E2E
reset_parameters	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^    def reset_parameters(self, args):$/;"	m	class:E2E
reset_parameters	espnet/nets/pytorch_backend/transformer/embedding.py	/^    def reset_parameters(self):$/;"	m	class:ScaledPositionalEncoding
restore_snapshot	espnet/asr/asr_utils.py	/^    def restore_snapshot(trainer):$/;"	f	function:restore_snapshot
restore_snapshot	espnet/asr/asr_utils.py	/^def restore_snapshot(model, snapshot, load_fn=chainer.serializers.load_npz):$/;"	f
restore_snapshot	espnet/asr/chainer_backend/asr.py	/^from espnet.asr.asr_utils import restore_snapshot$/;"	i
restore_snapshot	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import restore_snapshot$/;"	i
restore_snapshot	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.asr_utils import restore_snapshot$/;"	i
restore_snapshot	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.asr_utils import restore_snapshot$/;"	i
restore_snapshot	espnet/st/pytorch_backend/st.py	/^from espnet.asr.asr_utils import restore_snapshot$/;"	i
result	test/test_transformer_decode.py	/^    result = {"cached": [], "baseline": []}$/;"	v
ret	utils/result2json.py	/^    ret = {}$/;"	v
rir_convolve	espnet/transform/transformation.py	/^    rir_convolve='espnet.transform.perturb:RIRConvolve',$/;"	v
rnn_args	test/test_beam_search.py	/^rnn_args = Namespace($/;"	v
rnn_args	test/test_lm.py	/^from test.test_beam_search import rnn_args$/;"	i
rnn_forward	espnet/nets/chainer_backend/rnn/decoders.py	/^    def rnn_forward(self, ey, z_list, c_list, z_prev, c_prev):$/;"	m	class:Decoder
rnn_forward	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def rnn_forward(self, ey, z_list, c_list, z_prev, c_prev):$/;"	m	class:Decoder
rnn_forward	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def rnn_forward(self, ey, dstate):$/;"	m	class:DecoderRNNT
rnn_forward	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def rnn_forward(self, ey, dstate):$/;"	m	class:DecoderRNNTAtt
rnnlm	test/test_beam_search.py	/^    rnnlm=None,$/;"	v
root	test/test_sentencepiece.py	/^root = os.path.dirname(os.path.abspath(__file__))$/;"	v
run_transformer_copy	test/test_e2e_asr_transformer.py	/^def run_transformer_copy():$/;"	f
run_transformer_copy	test/test_e2e_st_transformer.py	/^from test.test_e2e_asr_transformer import run_transformer_copy$/;"	i
sampling_probability	test/test_beam_search.py	/^    sampling_probability=0.0,$/;"	v
sampling_probability	test/test_initialization.py	/^    sampling_probability=0.0,$/;"	v
sampling_rate	egs/reverb/asr1/local/run_wpe.py	/^sampling_rate = 16000$/;"	v
sampling_rate	egs/reverb/asr1_multich/local/run_wpe.py	/^sampling_rate = 16000$/;"	v
savefig	espnet/nets/chainer_backend/transformer/plot.py	/^def savefig(plot, filename):$/;"	f
savefig	espnet/nets/pytorch_backend/transformer/plot.py	/^def savefig(plot, filename):$/;"	f
scatter_grads	espnet/nets/chainer_backend/rnn/training.py	/^from chainer.training.updaters.multiprocess_parallel_updater import scatter_grads$/;"	i
scatter_grads	espnet/nets/chainer_backend/transformer/training.py	/^from chainer.training.updaters.multiprocess_parallel_updater import scatter_grads$/;"	i
scipy	espnet/transform/perturb.py	/^import scipy$/;"	i
score	espnet/nets/beam_search.py	/^    def score(self, hyp: Hypothesis, x: torch.Tensor) -> Tuple[Dict[str, torch.Tensor], Dict[str, Any]]:$/;"	m	class:BeamSearch
score	espnet/nets/pytorch_backend/lm/default.py	/^    def score(self, y, state, x):$/;"	m	class:DefaultRNNLM
score	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^    def score(self, y, state, x):$/;"	m	class:SequentialRNNLM
score	espnet/nets/pytorch_backend/lm/transformer.py	/^    def score(self, y: torch.Tensor, state: Any, x: torch.Tensor) -> Tuple[torch.Tensor, Any]:$/;"	m	class:TransformerLM
score	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def score(self, yseq, state, x):$/;"	m	class:Decoder
score	espnet/nets/pytorch_backend/transformer/decoder.py	/^    def score(self, ys, state, x):$/;"	m	class:Decoder
score	espnet/nets/scorer_interface.py	/^    def score(self, y: torch.Tensor, state: Any, x: torch.Tensor) -> Tuple[torch.Tensor, Any]:$/;"	m	class:ScorerInterface
score	espnet/nets/scorers/length_bonus.py	/^    def score(self, y, state, x):$/;"	m	class:LengthBonus
score_RealData_scp	egs/reverb/asr1_multich/local/evaltools/score_RealData_scp.m	/^function score_RealData_scp(senhroot,scp_file)$/;"	f
score_STOI_scp	egs/reverb/asr1_multich/local/evaltools/score_STOI_scp.m	/^function score_STOI_scp(download_from_ldc,cln_scp_file,senhroot,scp_file,pesqdir,compute_pesq)$/;"	f
score_SimData_scp	egs/reverb/asr1_multich/local/evaltools/score_SimData_scp.m	/^function score_SimData_scp(download_from_ldc,cln_scp_file,senhroot,scp_file,pesqdir,compute_pesq)$/;"	f
score_partial	espnet/nets/beam_search.py	/^            -> Tuple[Dict[str, torch.Tensor], Dict[str, Any]]:$/;"	m	class:BeamSearch
score_partial	espnet/nets/scorer_interface.py	/^            -> Tuple[torch.Tensor, Any]:$/;"	m	class:PartialScorerInterface
score_partial	espnet/nets/scorers/ctc.py	/^    def score_partial(self, y, ids, state, x):$/;"	m	class:CTCPrefixScorer
score_real_scp	egs/reverb/asr1_multich/local/evaltools/prog/score_real_scp.m	/^function score_real_scp(name, resdir, tgtlist, tgtroot, srmrdir)$/;"	f
score_sim_scp	egs/reverb/asr1_multich/local/evaltools/prog/score_sim_scp.m	/^function score_sim_scp(name, resdir, tgtlist, reflist, tgtroot, srmrdir, pesqexe)$/;"	f
score_sum	utils/eval_perm_free_error.py	/^    score_sum = np.sum(scores, axis=0, dtype=int)$/;"	v
scorers	espnet/nets/asr_interface.py	/^    def scorers(self):$/;"	m	class:ASRInterface
scorers	espnet/nets/pytorch_backend/e2e_asr.py	/^    def scorers(self):$/;"	m	class:E2E
scorers	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^    def scorers(self):$/;"	m	class:E2E
scorers	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^    def scorers(self):$/;"	m	class:E2E
scorers	espnet/nets/pytorch_backend/e2e_st.py	/^    def scorers(self):$/;"	m	class:E2E
scorers	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^    def scorers(self):$/;"	m	class:E2E
seed	test/test_initialization.py	/^    seed=1,$/;"	v
seg_txt	egs/hkust/asr1/local/hkust_segment.py	/^from mmseg import seg_txt$/;"	i
segment_begin	egs/jsut/tts1/local/prep_segments.py	/^            segment_begin = "{:.3f}".format(labels[0][1] * 1e-7)$/;"	v
segment_end	egs/jsut/tts1/local/prep_segments.py	/^            segment_end = "{:.3f}".format(labels[-1][0] * 1e-7)$/;"	v
select_state	espnet/nets/scorer_interface.py	/^    def select_state(self, state: Any, i: int) -> Any:$/;"	m	class:PartialScorerInterface
select_state	espnet/nets/scorers/ctc.py	/^    def select_state(self, state, i):$/;"	m	class:CTCPrefixScorer
select_unprocessed_windows	espnet/nets/pytorch_backend/streaming/window.py	/^        def select_unprocessed_windows(window_tensors):$/;"	f	function:WindowStreamingE2E._input_window_for_decoder
sentence	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^    sentence = ' '.join(items[1:])$/;"	v
sentence	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^    sentence = ' '.join(items[1:])$/;"	v
sep	doc/argparse2rst.py	/^    sep = "~" * len(cmd)$/;"	v
separators	utils/splitjson.py	/^                                separators=(',', ': '))$/;"	v
separete_vp	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^def separete_vp(voice_part_old, voice_part_tmp):$/;"	f
seq	egs/iwslt18/asr1/local/json2trn_reorder.py	/^        seq = [char_list[int(i)] for i in j['utts'][x]['output'][0]['rec_tokenid'].split()]$/;"	v
seq	egs/iwslt18/mt1/local/json2trn_reorder.py	/^        seq = [char_list[int(i)] for i in j['utts'][x]['output'][0]['rec_tokenid'].split()]$/;"	v
seq	egs/iwslt18/st1/local/json2trn_reorder.py	/^        seq = [char_list[int(i)] for i in j['utts'][x]['output'][0]['rec_tokenid'].split()]$/;"	v
seq	utils/json2text.py	/^            seq = [char_list[int(i)] for i in j['utts'][x]['output'][0]['tokenid'].split()]$/;"	v
seq	utils/json2text.py	/^        seq = [char_list[int(i)] for i in j['utts'][x]['output'][0]['rec_tokenid'].split()]$/;"	v
sequence_to_text	egs/arctic/tts1/local/text/__init__.py	/^def sequence_to_text(sequence):$/;"	f
sequence_to_text	egs/ljspeech/tts1/local/text/__init__.py	/^def sequence_to_text(sequence):$/;"	f
sequence_to_text	egs/ljspeech/tts2/local/text/__init__.py	/^def sequence_to_text(sequence):$/;"	f
sequence_to_text	egs/tweb/tts1/local/text/__init__.py	/^def sequence_to_text(sequence):$/;"	f
serialize	espnet/lm/lm_utils.py	/^    def serialize(self, serializer):$/;"	m	class:MakeSymlinkToBestModel
serialize	espnet/lm/lm_utils.py	/^    def serialize(self, serializer):$/;"	m	class:ParallelSentenceIterator
serialize	espnet/nets/chainer_backend/transformer/training.py	/^    def serialize(self, serializer):$/;"	m	class:VaswaniRule
serialize	espnet/utils/dataset.py	/^    def serialize(self, serializer):$/;"	m	class:ChainerDataLoader
session_id	egs/chime5/asr1/local/json2text.py	/^            session_id = x['session_id']$/;"	v
set_deterministic_chainer	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.deterministic_utils import set_deterministic_chainer$/;"	i
set_deterministic_chainer	espnet/lm/chainer_backend/lm.py	/^from espnet.utils.deterministic_utils import set_deterministic_chainer$/;"	i
set_deterministic_chainer	espnet/utils/deterministic_utils.py	/^def set_deterministic_chainer(args):$/;"	f
set_deterministic_pytorch	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.deterministic_utils import set_deterministic_pytorch$/;"	i
set_deterministic_pytorch	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.utils.deterministic_utils import set_deterministic_pytorch$/;"	i
set_deterministic_pytorch	espnet/asr/pytorch_backend/recog.py	/^from espnet.utils.deterministic_utils import set_deterministic_pytorch$/;"	i
set_deterministic_pytorch	espnet/lm/pytorch_backend/lm.py	/^from espnet.utils.deterministic_utils import set_deterministic_pytorch$/;"	i
set_deterministic_pytorch	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.deterministic_utils import set_deterministic_pytorch$/;"	i
set_deterministic_pytorch	espnet/st/pytorch_backend/st.py	/^from espnet.utils.deterministic_utils import set_deterministic_pytorch$/;"	i
set_deterministic_pytorch	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.deterministic_utils import set_deterministic_pytorch$/;"	i
set_deterministic_pytorch	espnet/utils/deterministic_utils.py	/^def set_deterministic_pytorch(args):$/;"	f
set_early_stop	espnet/asr/chainer_backend/asr.py	/^from espnet.utils.training.train_utils import set_early_stop$/;"	i
set_early_stop	espnet/asr/pytorch_backend/asr.py	/^from espnet.utils.training.train_utils import set_early_stop$/;"	i
set_early_stop	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.utils.training.train_utils import set_early_stop$/;"	i
set_early_stop	espnet/lm/chainer_backend/lm.py	/^from espnet.utils.training.train_utils import set_early_stop$/;"	i
set_early_stop	espnet/lm/pytorch_backend/lm.py	/^from espnet.utils.training.train_utils import set_early_stop$/;"	i
set_early_stop	espnet/mt/pytorch_backend/mt.py	/^from espnet.utils.training.train_utils import set_early_stop$/;"	i
set_early_stop	espnet/st/pytorch_backend/st.py	/^from espnet.utils.training.train_utils import set_early_stop$/;"	i
set_early_stop	espnet/tts/pytorch_backend/tts.py	/^from espnet.utils.training.train_utils import set_early_stop$/;"	i
set_early_stop	espnet/utils/training/train_utils.py	/^def set_early_stop(trainer, args, is_lm=False):$/;"	f
set_forget_bias_to_one	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.pytorch_backend.initialization import set_forget_bias_to_one$/;"	i
set_forget_bias_to_one	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^        def set_forget_bias_to_one(bias):$/;"	f	function:E2E.init_like_chainer
set_forget_bias_to_one	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^        def set_forget_bias_to_one(bias):$/;"	f	function:E2E.init_like_chainer
set_forget_bias_to_one	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^        def set_forget_bias_to_one(bias):$/;"	f	function:E2E.init_like_chainer
set_forget_bias_to_one	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.pytorch_backend.initialization import set_forget_bias_to_one$/;"	i
set_forget_bias_to_one	espnet/nets/pytorch_backend/initialization.py	/^def set_forget_bias_to_one(bias):$/;"	f
setup	doc/conf.py	/^def setup(app):$/;"	f
setup	setup.py	/^from setuptools import setup$/;"	i
setup_requires	setup.py	/^      setup_requires=setup_requires,$/;"	v
setup_requires	setup.py	/^setup_requires = requirements['setup']$/;"	v
sf	egs/reverb/asr1/local/run_wpe.py	/^import soundfile as sf$/;"	i
sf	egs/reverb/asr1_multich/local/run_wpe.py	/^import soundfile as sf$/;"	i
shape	egs/wsj_mix/asr1/local/merge_scp2json.py	/^def shape(x):$/;"	f
shape	utils/merge_scp2json.py	/^def shape(x):$/;"	f
shift	egs/reverb/asr1/local/run_wpe.py	/^    shift=128,$/;"	v
shift	egs/reverb/asr1_multich/local/run_wpe.py	/^    shift=128,$/;"	v
shutil	espnet/asr/asr_utils.py	/^import shutil$/;"	i
shutil	test/test_e2e_compatibility.py	/^import shutil$/;"	i
shutil	test/test_e2e_tts_fastspeech.py	/^import shutil$/;"	i
shutil	utils/eval-source-separation.py	/^import shutil$/;"	i
signal_list	egs/reverb/asr1/local/run_wpe.py	/^signal_list = [$/;"	v
signal_list	egs/reverb/asr1_multich/local/run_wpe.py	/^signal_list = [$/;"	v
signature	espnet/transform/transformation.py	/^    from funcsigs import signature$/;"	i
signature	espnet/transform/transformation.py	/^    from inspect import signature$/;"	i
six	espnet/asr/chainer_backend/asr.py	/^import six$/;"	i
six	espnet/lm/chainer_backend/lm.py	/^import six$/;"	i
six	espnet/lm/lm_utils.py	/^import six$/;"	i
six	espnet/nets/chainer_backend/deterministic_embed_id.py	/^import six$/;"	i
six	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^import six$/;"	i
six	espnet/nets/chainer_backend/rnn/decoders.py	/^import six$/;"	i
six	espnet/nets/chainer_backend/rnn/encoders.py	/^import six$/;"	i
six	espnet/nets/chainer_backend/rnn/training.py	/^import six$/;"	i
six	espnet/nets/chainer_backend/transformer/training.py	/^import six$/;"	i
six	espnet/nets/ctc_prefix_score.py	/^import six$/;"	i
six	espnet/nets/e2e_asr_common.py	/^import six$/;"	i
six	espnet/nets/pytorch_backend/e2e_asr.py	/^import six$/;"	i
six	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^import six$/;"	i
six	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^import six$/;"	i
six	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^        import six$/;"	i
six	espnet/nets/pytorch_backend/e2e_st.py	/^import six$/;"	i
six	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^        import six$/;"	i
six	espnet/nets/pytorch_backend/rnn/attentions.py	/^import six$/;"	i
six	espnet/nets/pytorch_backend/rnn/decoders.py	/^import six$/;"	i
six	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^import six$/;"	i
six	espnet/nets/pytorch_backend/rnn/encoders.py	/^import six$/;"	i
six	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^import six$/;"	i
six	espnet/nets/pytorch_backend/tacotron2/encoder.py	/^import six$/;"	i
six	test/test_e2e_compatibility.py	/^import six$/;"	i
six	utils/eval_perm_free_error.py	/^import six$/;"	i
six	utils/text2vocabulary.py	/^import six$/;"	i
size	egs/reverb/asr1/local/run_wpe.py	/^    size=512,$/;"	v
size	egs/reverb/asr1_multich/local/run_wpe.py	/^    size=512,$/;"	v
snapshot_object	espnet/asr/asr_utils.py	/^    def snapshot_object(trainer):$/;"	f	function:snapshot_object
snapshot_object	espnet/asr/asr_utils.py	/^def snapshot_object(target, filename):$/;"	f
snapshot_object	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import snapshot_object$/;"	i
snapshot_object	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.asr_utils import snapshot_object$/;"	i
snapshot_object	espnet/lm/pytorch_backend/lm.py	/^from espnet.asr.asr_utils import snapshot_object$/;"	i
snapshot_object	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.asr_utils import snapshot_object$/;"	i
snapshot_object	espnet/st/pytorch_backend/st.py	/^from espnet.asr.asr_utils import snapshot_object$/;"	i
snapshot_object	espnet/tts/pytorch_backend/tts.py	/^from espnet.asr.asr_utils import snapshot_object$/;"	i
softmax_cross_entropy	espnet/lm/chainer_backend/lm.py	/^from chainer.functions.loss import softmax_cross_entropy$/;"	i
solve_interpolation	espnet/utils/spec_augment.py	/^def solve_interpolation(train_points, train_values, order, regularization_weight):$/;"	f
sort_keys	utils/splitjson.py	/^                                sort_keys=True,$/;"	v
sortagrad	test/test_beam_search.py	/^    sortagrad=0,$/;"	v
soundfile	espnet/transform/perturb.py	/^import soundfile$/;"	i
soundfile	espnet/utils/cli_readers.py	/^import soundfile$/;"	i
soundfile	espnet/utils/cli_writers.py	/^import soundfile$/;"	i
soundfile	espnet/utils/io_utils.py	/^import soundfile$/;"	i
soundfile	utils/eval-source-separation.py	/^import soundfile$/;"	i
source	egs/an4/asr1/local/data_prep.py	/^            source = re.search(r'\\((.*)\\)', line).group(1)$/;"	v
source	egs/an4/tts1/local/data_prep.py	/^            source = re.search(r'\\((.*)\\)', line).group(1)$/;"	v
source	egs/mini_an4/asr1/local/data_prep.py	/^            source = re.search(r'\\((.*)\\)', line).group(1)$/;"	v
source	egs/mini_an4/asr_mix1/local/data_prep.py	/^            source = re.search(r'\\((.*)\\)', line).group(1)$/;"	v
source	egs/mini_an4/tts1/local/data_prep.py	/^            source = re.search(r'\\((.*)\\)', line).group(1)$/;"	v
source_parsers	doc/conf.py	/^source_parsers = {$/;"	v
source_suffix	doc/conf.py	/^source_suffix = ['.rst', '.md']$/;"	v
sparse_image_warp	espnet/utils/spec_augment.py	/^def sparse_image_warp(img_tensor,$/;"	f
speaker_id	egs/chime5/asr1/local/json2text.py	/^            speaker_id = x['speaker']$/;"	v
speakers	egs/fisher_callhome_spanish/asr1/local/callhome_make_spk2gender.py	/^speakers = {}$/;"	v
speakers	egs/fisher_callhome_spanish/asr1/local/fsp_make_spk2gender.py	/^speakers = {}$/;"	v
speakers	egs/fisher_callhome_spanish/mt1/local/callhome_make_spk2gender.py	/^speakers = {}$/;"	v
speakers	egs/fisher_callhome_spanish/mt1/local/fsp_make_spk2gender.py	/^speakers = {}$/;"	v
speakers	egs/fisher_callhome_spanish/st1/local/callhome_make_spk2gender.py	/^speakers = {}$/;"	v
speakers	egs/fisher_callhome_spanish/st1/local/fsp_make_spk2gender.py	/^speakers = {}$/;"	v
spec_augment	espnet/transform/spec_augment.py	/^        from espnet.utils import spec_augment$/;"	i
spec_augment	espnet/transform/spec_augment.py	/^def spec_augment(x, resize_mode="PIL", max_time_warp=80,$/;"	f
spec_augment	espnet/transform/transformation.py	/^    spec_augment='espnet.transform.spec_augment:SpecAugment',$/;"	v
specaug	espnet/utils/spec_augment.py	/^def specaug(spec, W=5, F=30, T=40, num_freq_masks=2, num_time_masks=2, replace_with_zero=False):$/;"	f
spectrogram	espnet/transform/spectrogram.py	/^def spectrogram(x, n_fft, n_shift, win_length=None, window='hann'):$/;"	f
spectrogram	espnet/transform/transformation.py	/^    spectrogram='espnet.transform.spectrogram:Spectrogram',$/;"	v
spectrogram	utils/compute-stft-feats.py	/^from espnet.transform.spectrogram import spectrogram$/;"	i
speed_perturbation	espnet/transform/transformation.py	/^    speed_perturbation='espnet.transform.perturb:SpeedPerturbation',$/;"	v
sph2pipe	egs/an4/asr1/local/data_prep.py	/^sph2pipe = sys.argv[2]$/;"	v
sph2pipe	egs/an4/tts1/local/data_prep.py	/^sph2pipe = sys.argv[2]$/;"	v
sph2pipe	egs/mini_an4/asr1/local/data_prep.py	/^sph2pipe = sys.argv[2]$/;"	v
sph2pipe	egs/mini_an4/asr_mix1/local/data_prep.py	/^sph2pipe = sys.argv[2]$/;"	v
sph2pipe	egs/mini_an4/tts1/local/data_prep.py	/^sph2pipe = sys.argv[2]$/;"	v
sph_dir	egs/an4/asr1/local/data_prep.py	/^sph_dir = {$/;"	v
sph_dir	egs/an4/tts1/local/data_prep.py	/^sph_dir = {$/;"	v
sph_dir	egs/mini_an4/asr1/local/data_prep.py	/^sph_dir = {$/;"	v
sph_dir	egs/mini_an4/asr_mix1/local/data_prep.py	/^sph_dir = {$/;"	v
sph_dir	egs/mini_an4/tts1/local/data_prep.py	/^sph_dir = {$/;"	v
sphinx_rtd_theme	doc/conf.py	/^import sphinx_rtd_theme$/;"	i
split_on_comma	egs/ami/asr1/local/ami_split_segments.pl	/^sub split_on_comma {$/;"	s
split_transcripts	egs/ami/asr1/local/ami_split_segments.pl	/^sub split_transcripts {$/;"	s
spm	test/test_sentencepiece.py	/^import sentencepiece as spm$/;"	i
spm	utils/spm_decode	/^import sentencepiece as spm$/;"	i
spm	utils/spm_encode	/^import sentencepiece as spm$/;"	i
sps	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                    sps = line.split(None, 1)$/;"	v
sps	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                sps = key_scp.split(':')$/;"	v
sps	utils/merge_scp2json.py	/^                    sps = line.split(None, 1)$/;"	v
sps	utils/merge_scp2json.py	/^                sps = key_scp.split(':')$/;"	v
start	test/test_transformer_decode.py	/^            start = time()$/;"	v
start_shuffle	espnet/lm/lm_utils.py	/^    def start_shuffle(self):$/;"	m	class:ParallelSentenceIterator
start_shuffle	espnet/utils/dataset.py	/^    def start_shuffle(self):$/;"	m	class:ChainerDataLoader
start_shuffle	espnet/utils/training/iterators.py	/^    def start_shuffle(self):$/;"	m	class:ToggleableShufflingMultiprocessIterator
start_shuffle	espnet/utils/training/iterators.py	/^    def start_shuffle(self):$/;"	m	class:ToggleableShufflingSerialIterator
start_time	egs/chime5/asr1/local/json2text.py	/^            start_time = hms_to_seconds(start_time)$/;"	v
start_time	egs/chime5/asr1/local/json2text.py	/^            start_time = x['start_time'][mictype]$/;"	v
start_time	egs/iwslt18/asr1/local/json2trn_reorder.py	/^        start_time = int(x.split('_')[1])$/;"	v
start_time	egs/iwslt18/mt1/local/json2trn_reorder.py	/^        start_time = int(x.split('_')[1])$/;"	v
start_time	egs/iwslt18/st1/local/json2trn_reorder.py	/^        start_time = int(x.split('_')[1])$/;"	v
state_dict	espnet/nets/pytorch_backend/lm/default.py	/^    def state_dict(self):$/;"	m	class:DefaultRNNLM
state_dict	espnet/nets/pytorch_backend/transformer/optimizer.py	/^    def state_dict(self):$/;"	m	class:NoamOpt
step	espnet/nets/pytorch_backend/transformer/optimizer.py	/^    def step(self):$/;"	m	class:NoamOpt
stft	egs/reverb/asr1/local/run_wpe.py	/^from nara_wpe.utils import stft, istft $/;"	i
stft	egs/reverb/asr1_multich/local/run_wpe.py	/^from nara_wpe.utils import stft, istft $/;"	i
stft	espnet/transform/spectrogram.py	/^def stft(x, n_fft, n_shift, win_length=None, window='hann', center=True,$/;"	f
stft	espnet/transform/transformation.py	/^    stft='espnet.transform.spectrogram:Stft',$/;"	v
stft2fbank	espnet/transform/transformation.py	/^    stft2fbank='espnet.transform.spectrogram:Stft2LogMelSpectrogram',$/;"	v
stft2logmelspectrogram	espnet/transform/spectrogram.py	/^def stft2logmelspectrogram(x_stft, fs, n_mels, n_fft, fmin=None, fmax=None,$/;"	f
stft_options	egs/reverb/asr1/local/run_wpe.py	/^stft_options = dict($/;"	v
stft_options	egs/reverb/asr1_multich/local/run_wpe.py	/^stft_options = dict($/;"	v
stoi	utils/eval-source-separation.py	/^from pystoi.stoi import stoi$/;"	i
streaming_min_blank_dur	test/test_beam_search.py	/^    streaming_min_blank_dur=10,$/;"	v
streaming_offset_margin	test/test_beam_search.py	/^    streaming_offset_margin=2,$/;"	v
streaming_onset_margin	test/test_beam_search.py	/^    streaming_onset_margin=2,$/;"	v
strtobool	espnet/bin/asr_enhance.py	/^from distutils.util import strtobool$/;"	i
strtobool	espnet/bin/asr_recog.py	/^from espnet.utils.cli_utils import strtobool$/;"	i
strtobool	espnet/bin/asr_train.py	/^from espnet.utils.cli_utils import strtobool$/;"	i
strtobool	espnet/bin/mt_train.py	/^from espnet.utils.cli_utils import strtobool$/;"	i
strtobool	espnet/bin/st_train.py	/^from espnet.utils.cli_utils import strtobool$/;"	i
strtobool	espnet/bin/tts_train.py	/^from espnet.utils.cli_utils import strtobool$/;"	i
strtobool	espnet/nets/chainer_backend/e2e_asr_transformer.py	/^from distutils.util import strtobool$/;"	i
strtobool	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.utils.cli_utils import strtobool$/;"	i
strtobool	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^from espnet.utils.cli_utils import strtobool$/;"	i
strtobool	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from distutils.util import strtobool$/;"	i
strtobool	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from distutils.util import strtobool$/;"	i
strtobool	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.utils.cli_utils import strtobool$/;"	i
strtobool	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^from distutils.util import strtobool$/;"	i
strtobool	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.utils.cli_utils import strtobool$/;"	i
strtobool	espnet/utils/cli_utils.py	/^def strtobool(x):$/;"	f
strtobool	utils/addjson.py	/^from distutils.util import strtobool$/;"	i
strtobool	utils/apply-cmvn.py	/^from distutils.util import strtobool$/;"	i
strtobool	utils/compute-fbank-feats.py	/^from distutils.util import strtobool$/;"	i
strtobool	utils/compute-stft-feats.py	/^from distutils.util import strtobool$/;"	i
strtobool	utils/copy-feats.py	/^from distutils.util import strtobool$/;"	i
strtobool	utils/dump-pcm.py	/^from distutils.util import strtobool$/;"	i
strtobool	utils/eval-source-separation.py	/^from distutils.util import strtobool$/;"	i
strtobool	utils/merge_scp2json.py	/^from distutils.util import strtobool$/;"	i
subprocess	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^import subprocess$/;"	i
subprocess	espnet/bin/asr_train.py	/^import subprocess$/;"	i
subprocess	espnet/bin/lm_train.py	/^import subprocess$/;"	i
subprocess	espnet/bin/mt_train.py	/^import subprocess$/;"	i
subprocess	espnet/bin/st_train.py	/^import subprocess$/;"	i
subprocess	espnet/bin/tts_decode.py	/^import subprocess$/;"	i
subprocess	espnet/bin/tts_train.py	/^import subprocess$/;"	i
subprocess	test/test_e2e_compatibility.py	/^import subprocess$/;"	i
subprocess	utils/eval-source-separation.py	/^import subprocess$/;"	i
subprocess	utils/json2sctm.py	/^import subprocess$/;"	i
subsample	test/test_beam_search.py	/^    subsample="1_2_2_1_1",$/;"	v
subsample	test/test_initialization.py	/^    subsample="1_2_2_1_1",$/;"	v
subsample_frames	espnet/nets/pytorch_backend/e2e_asr.py	/^    def subsample_frames(self, x):$/;"	m	class:E2E
subsample_frames	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^    def subsample_frames(self, x):$/;"	m	class:E2E
subsample_frames	espnet/nets/pytorch_backend/e2e_st.py	/^    def subsample_frames(self, x):$/;"	m	class:E2E
subsequent_mask	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.transformer.mask import subsequent_mask$/;"	i
subsequent_mask	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.transformer.mask import subsequent_mask$/;"	i
subsequent_mask	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.e2e_asr_transformer import subsequent_mask$/;"	i
subsequent_mask	espnet/nets/pytorch_backend/lm/transformer.py	/^from espnet.nets.pytorch_backend.transformer.mask import subsequent_mask$/;"	i
subsequent_mask	espnet/nets/pytorch_backend/transformer/decoder.py	/^from espnet.nets.pytorch_backend.transformer.mask import subsequent_mask$/;"	i
subsequent_mask	espnet/nets/pytorch_backend/transformer/mask.py	/^def subsequent_mask(size, device="cpu", dtype=datatype):$/;"	f
subsequent_mask	test/test_e2e_asr_transformer.py	/^def subsequent_mask(size, backend='pytorch'):$/;"	f
subsequent_mask	test/test_e2e_st_transformer.py	/^from test.test_e2e_asr_transformer import subsequent_mask$/;"	i
subsequent_mask	test/test_e2e_tts_transformer.py	/^from espnet.nets.pytorch_backend.e2e_tts_transformer import subsequent_mask$/;"	i
subsequent_mask	test/test_transformer_decode.py	/^from espnet.nets.pytorch_backend.transformer.mask import subsequent_mask$/;"	i
subset	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^                    subset = 'test'$/;"	v
subset	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^                subset = 'train'$/;"	v
subsets	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^subsets = {'train': {}, 'dev': {}, 'test': {}}$/;"	v
sum_sqnorm	espnet/nets/chainer_backend/rnn/training.py	/^def sum_sqnorm(arr):$/;"	f
sum_sqnorm	espnet/nets/chainer_backend/transformer/training.py	/^def sum_sqnorm(arr):$/;"	f
sym_blank	test/test_beam_search.py	/^    sym_blank="<blank>",$/;"	v
sym_blank	test/test_initialization.py	/^    sym_blank="<blank>",$/;"	v
sym_space	test/test_beam_search.py	/^    sym_space="<space>",$/;"	v
sym_space	test/test_initialization.py	/^    sym_space="<space>",$/;"	v
symbols	egs/arctic/tts1/local/text/__init__.py	/^from text.symbols import symbols$/;"	i
symbols	egs/arctic/tts1/local/text/symbols.py	/^symbols = [_pad, _eos] + list(_characters) + _arpabet$/;"	v
symbols	egs/ljspeech/tts1/local/text/__init__.py	/^from text.symbols import symbols$/;"	i
symbols	egs/ljspeech/tts1/local/text/symbols.py	/^symbols = [_pad, _eos] + list(_characters) + _arpabet$/;"	v
symbols	egs/ljspeech/tts2/local/text/__init__.py	/^from text.symbols import symbols$/;"	i
symbols	egs/ljspeech/tts2/local/text/symbols.py	/^symbols = [_pad, _eos] + list(_characters) + _arpabet$/;"	v
symbols	egs/tweb/tts1/local/text/__init__.py	/^from text.symbols import symbols$/;"	i
symbols	egs/tweb/tts1/local/text/symbols.py	/^symbols = [_pad, _eos] + list(_characters) + _arpabet$/;"	v
symmetric_window	egs/reverb/asr1/local/run_wpe.py	/^    symmetric_window=False$/;"	v
symmetric_window	egs/reverb/asr1_multich/local/run_wpe.py	/^    symmetric_window=False$/;"	v
sys	doc/conf.py	/^import sys$/;"	i
sys	egs/an4/asr1/local/data_prep.py	/^import sys$/;"	i
sys	egs/an4/tts1/local/data_prep.py	/^import sys$/;"	i
sys	egs/blizzard17/tts1/local/make_lab_w_punc.py	/^import sys$/;"	i
sys	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^import sys$/;"	i
sys	egs/chime5/asr1/local/json2text.py	/^import sys$/;"	i
sys	egs/commonvoice/asr1/local/filter_text.py	/^import sys$/;"	i
sys	egs/csj/asr1/local/csj_rm_tag.py	/^import sys$/;"	i
sys	egs/fisher_callhome_spanish/asr1/local/callhome_make_spk2gender.py	/^import sys$/;"	i
sys	egs/fisher_callhome_spanish/asr1/local/fsp_make_spk2gender.py	/^import sys$/;"	i
sys	egs/hkust/asr1/local/hkust_segment.py	/^import sys$/;"	i
sys	egs/iwslt18/asr1/local/join_suffix.py	/^import sys$/;"	i
sys	egs/iwslt18/mt1/local/join_suffix.py	/^import sys$/;"	i
sys	egs/iwslt18/st1/local/join_suffix.py	/^import sys$/;"	i
sys	egs/iwslt19/asr1/local/join_suffix.py	/^import sys$/;"	i
sys	egs/iwslt19/st1/local/join_suffix.py	/^import sys$/;"	i
sys	egs/jnas/asr1/local/filter_text.py	/^import sys$/;"	i
sys	egs/jnas/asr1/local/make_eval_trans.py	/^import sys$/;"	i
sys	egs/jnas/asr1/local/make_train_trans.py	/^import sys$/;"	i
sys	egs/jnas/tts1/local/filter_text.py	/^import sys$/;"	i
sys	egs/jnas/tts1/local/make_eval_trans.py	/^import sys$/;"	i
sys	egs/jnas/tts1/local/make_train_trans.py	/^import sys$/;"	i
sys	egs/jsut/tts1/local/prep_segments.py	/^import sys$/;"	i
sys	egs/libri_trans/asr1/local/concat_json_multiref.py	/^import sys$/;"	i
sys	egs/libri_trans/mt1/local/concat_json_multiref.py	/^import sys$/;"	i
sys	egs/libri_trans/st1/local/concat_json_multiref.py	/^import sys$/;"	i
sys	egs/mini_an4/asr1/local/data_prep.py	/^import sys$/;"	i
sys	egs/mini_an4/asr_mix1/local/data_prep.py	/^import sys$/;"	i
sys	egs/mini_an4/tts1/local/data_prep.py	/^import sys$/;"	i
sys	egs/reverb/asr1_multich/local/filterjson.py	/^import sys$/;"	i
sys	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^import sys$/;"	i
sys	egs/tedlium2/asr1/local/join_suffix.py	/^import sys$/;"	i
sys	egs/tedlium3/asr1/local/join_suffix.py	/^import sys$/;"	i
sys	egs/vais1000/tts1/local/text/regex_tokenize.py	/^import sys$/;"	i
sys	egs/vais1000/tts1/local/text/vietnameseNormUniStd.py	/^import sys$/;"	i
sys	egs/voxforge/asr1/local/filter_text.py	/^import sys$/;"	i
sys	egs/voxforge/asr1/local/make_trans.py	/^import sys$/;"	i
sys	egs/wsj_mix/asr1/local/merge_scp2json.py	/^import sys$/;"	i
sys	egs/wsj_mix/asr1/local/mergejson.py	/^import sys$/;"	i
sys	espnet/asr/pytorch_backend/asr.py	/^import sys$/;"	i
sys	espnet/bin/asr_enhance.py	/^import sys$/;"	i
sys	espnet/bin/asr_recog.py	/^import sys$/;"	i
sys	espnet/bin/asr_train.py	/^import sys$/;"	i
sys	espnet/bin/lm_train.py	/^import sys$/;"	i
sys	espnet/bin/mt_train.py	/^import sys$/;"	i
sys	espnet/bin/mt_trans.py	/^import sys$/;"	i
sys	espnet/bin/st_train.py	/^import sys$/;"	i
sys	espnet/bin/st_trans.py	/^import sys$/;"	i
sys	espnet/bin/tts_decode.py	/^import sys$/;"	i
sys	espnet/bin/tts_train.py	/^import sys$/;"	i
sys	espnet/mt/pytorch_backend/mt.py	/^import sys$/;"	i
sys	espnet/nets/e2e_asr_common.py	/^import sys$/;"	i
sys	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^import sys$/;"	i
sys	espnet/nets/pytorch_backend/wavenet.py	/^import sys$/;"	i
sys	espnet/st/pytorch_backend/st.py	/^import sys$/;"	i
sys	espnet/transform/transformation.py	/^import sys$/;"	i
sys	espnet/utils/cli_readers.py	/^import sys$/;"	i
sys	espnet/utils/cli_utils.py	/^import sys$/;"	i
sys	setup.py	/^import sys$/;"	i
sys	tools/check_install.py	/^import sys$/;"	i
sys	utils/addjson.py	/^import sys$/;"	i
sys	utils/concatjson.py	/^import sys$/;"	i
sys	utils/eval-source-separation.py	/^import sys$/;"	i
sys	utils/eval_perm_free_error.py	/^import sys$/;"	i
sys	utils/feat-to-shape.py	/^import sys$/;"	i
sys	utils/feats2npy.py	/^import sys$/;"	i
sys	utils/filt.py	/^import sys$/;"	i
sys	utils/json2sctm.py	/^import sys$/;"	i
sys	utils/json2trn.py	/^import sys$/;"	i
sys	utils/json2trn_mt.py	/^import sys$/;"	i
sys	utils/json2trn_wo_dict.py	/^import sys$/;"	i
sys	utils/merge_scp2json.py	/^import sys$/;"	i
sys	utils/mergejson.py	/^import sys$/;"	i
sys	utils/mix-mono-wav-scp.py	/^import sys$/;"	i
sys	utils/result2json.py	/^import sys$/;"	i
sys	utils/scp2json.py	/^import sys$/;"	i
sys	utils/splitjson.py	/^import sys$/;"	i
sys	utils/spm_decode	/^import sys$/;"	i
sys	utils/spm_encode	/^import sys$/;"	i
sys	utils/text2token.py	/^import sys$/;"	i
sys	utils/text2vocabulary.py	/^import sys$/;"	i
sys	utils/trn2ctm.py	/^import sys$/;"	i
sys	utils/trn2stm.py	/^import sys$/;"	i
talk_id	egs/iwslt18/asr1/local/reorder_text.py	/^        talk_id = utt_id.split('_')[0].replace('.en', '').replace('.de', '')$/;"	v
talk_id	egs/iwslt18/mt1/local/reorder_text.py	/^        talk_id = utt_id.split('_')[0].replace('.en', '').replace('.de', '')$/;"	v
talk_id	egs/iwslt18/st1/local/reorder_text.py	/^        talk_id = utt_id.split('_')[0].replace('.en', '').replace('.de', '')$/;"	v
talkid	egs/iwslt18/asr1/local/json2trn_reorder.py	/^        talkid = x.split('_')[0]$/;"	v
talkid	egs/iwslt18/mt1/local/json2trn_reorder.py	/^        talkid = x.split('_')[0]$/;"	v
talkid	egs/iwslt18/st1/local/json2trn_reorder.py	/^        talkid = x.split('_')[0]$/;"	v
taps	egs/reverb/asr1/local/run_wpe.py	/^taps = 10$/;"	v
taps	egs/reverb/asr1_multich/local/run_wpe.py	/^taps = 10$/;"	v
target_language_biasing	espnet/nets/pytorch_backend/e2e_mt.py	/^    def target_language_biasing(self, xs_pad, ilens, ys_pad):$/;"	m	class:E2E
target_mask	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.transformer.mask import target_mask$/;"	i
target_mask	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.transformer.mask import target_mask$/;"	i
target_mask	espnet/nets/pytorch_backend/transformer/mask.py	/^def target_mask(ys_in_pad, ignore_id):$/;"	f
target_mask	test/test_e2e_asr_transformer.py	/^    from espnet.nets.pytorch_backend.transformer.mask import target_mask$/;"	i
target_mask	test/test_e2e_st_transformer.py	/^    from espnet.nets.pytorch_backend.transformer.mask import target_mask$/;"	i
tempfile	espnet/asr/asr_utils.py	/^import tempfile$/;"	i
tempfile	test/test_asr_init.py	/^import tempfile$/;"	i
tempfile	test/test_e2e_asr.py	/^import tempfile$/;"	i
tempfile	test/test_e2e_asr_mulenc.py	/^import tempfile$/;"	i
tempfile	test/test_e2e_compatibility.py	/^import tempfile$/;"	i
tempfile	test/test_e2e_mt.py	/^import tempfile$/;"	i
tempfile	test/test_e2e_st.py	/^import tempfile$/;"	i
tempfile	test/test_e2e_tts_fastspeech.py	/^import tempfile$/;"	i
templates_path	doc/conf.py	/^templates_path = ['_templates']$/;"	v
test_KaldiReader	test/test_cli.py	/^def test_KaldiReader(tmpdir, filetype):$/;"	f
test_asr_build	test/test_asr_interface.py	/^def test_asr_build(name, backend):$/;"	f
test_attention_masking	test/test_e2e_tts_transformer.py	/^def test_attention_masking(model_dict):$/;"	f
test_attn_loss	test/test_loss.py	/^def test_attn_loss():$/;"	f
test_batch_beam_search	test/test_recog.py	/^def test_batch_beam_search(etype, dtype, m_str):$/;"	f
test_beam_search_equal	test/test_beam_search.py	/^def test_beam_search_equal(model_class, args, ctc_weight, lm_weight, bonus, device, dtype):$/;"	f
test_bmm_attention	test/test_torch.py	/^def test_bmm_attention():$/;"	f
test_calculate_all_attentions	test/test_e2e_asr.py	/^def test_calculate_all_attentions(module, atype):$/;"	f
test_calculate_all_attentions	test/test_e2e_asr_mulenc.py	/^def test_calculate_all_attentions(module, num_encs, atype):$/;"	f
test_calculate_all_attentions	test/test_e2e_mt.py	/^def test_calculate_all_attentions(module, atype):$/;"	f
test_calculate_all_attentions	test/test_e2e_st.py	/^def test_calculate_all_attentions(module, atype):$/;"	f
test_chainer_ctc_type	test/test_e2e_asr.py	/^def test_chainer_ctc_type():$/;"	f
test_chainer_save_and_load	test/test_e2e_asr.py	/^def test_chainer_save_and_load():$/;"	f
test_compatibility	test/test_positional_encoding.py	/^def test_compatibility():$/;"	f
test_ctc_loss	test/test_loss.py	/^def test_ctc_loss(in_length, out_length, use_warpctc):$/;"	f
test_decoder_cache	test/test_transformer_decode.py	/^def test_decoder_cache(normalize_before):$/;"	f
test_dnn_beamformer	test/test_multi_spkrs.py	/^def test_dnn_beamformer(use_frontend, use_beamformer, bnmask, num_spkrs, m_str):$/;"	f
test_downloaded_asr_model_decodable	test/test_e2e_compatibility.py	/^def test_downloaded_asr_model_decodable(module, download_info):$/;"	f
test_duration_calculator	test/test_e2e_tts_fastspeech.py	/^def test_duration_calculator():$/;"	f
test_error_calculator	test/test_utils.py	/^def test_error_calculator(tmpdir, typ):$/;"	f
test_error_calculator_nospace	test/test_utils.py	/^def test_error_calculator_nospace(tmpdir):$/;"	f
test_fastspeech_gpu_trainable_and_decodable	test/test_e2e_tts_fastspeech.py	/^def test_fastspeech_gpu_trainable_and_decodable(model_dict):$/;"	f
test_fastspeech_multi_gpu_trainable	test/test_e2e_tts_fastspeech.py	/^def test_fastspeech_multi_gpu_trainable(model_dict):$/;"	f
test_fastspeech_trainable_and_decodable	test/test_e2e_tts_fastspeech.py	/^def test_fastspeech_trainable_and_decodable(model_dict):$/;"	f
test_forward_and_inference_are_equal	test/test_e2e_tts_transformer.py	/^def test_forward_and_inference_are_equal(model_dict):$/;"	f
test_func_trans	test/test_transform.py	/^def test_func_trans():$/;"	f
test_gpu_trainable	test/test_e2e_asr.py	/^def test_gpu_trainable(module):$/;"	f
test_gpu_trainable	test/test_e2e_asr_mulenc.py	/^def test_gpu_trainable(module, num_encs):$/;"	f
test_gpu_trainable	test/test_e2e_mt.py	/^def test_gpu_trainable(module):$/;"	f
test_gpu_trainable	test/test_e2e_st.py	/^def test_gpu_trainable(module):$/;"	f
test_gradient_noise_injection	test/test_e2e_asr.py	/^def test_gradient_noise_injection(module):$/;"	f
test_gradient_noise_injection	test/test_e2e_asr_mulenc.py	/^def test_gradient_noise_injection(module, num_encs):$/;"	f
test_gradient_noise_injection	test/test_e2e_st.py	/^def test_gradient_noise_injection(module):$/;"	f
test_initialization	test/test_e2e_tts_fastspeech.py	/^def test_initialization(model_dict):$/;"	f
test_lecun_init_chainer	test/test_initialization.py	/^def test_lecun_init_chainer():$/;"	f
test_lecun_init_torch	test/test_initialization.py	/^def test_lecun_init_torch():$/;"	f
test_length_regulator	test/test_e2e_tts_fastspeech.py	/^def test_length_regulator():$/;"	f
test_lm	test/test_lm.py	/^def test_lm():$/;"	f
test_lm_trainable_and_decodable	test/test_lm.py	/^def test_lm_trainable_and_decodable(lm_name, lm_args, device, dtype):$/;"	f
test_load_inputs_and_targets_legacy_format	test/test_utils.py	/^def test_load_inputs_and_targets_legacy_format(tmpdir):$/;"	f
test_load_inputs_and_targets_legacy_format_multi_inputs	test/test_utils.py	/^def test_load_inputs_and_targets_legacy_format_multi_inputs(tmpdir):$/;"	f
test_load_inputs_and_targets_new_format	test/test_utils.py	/^def test_load_inputs_and_targets_new_format(tmpdir):$/;"	f
test_loss	test/test_e2e_mt.py	/^def test_loss(etype):$/;"	f
test_loss_and_ctc_grad	test/test_e2e_asr.py	/^def test_loss_and_ctc_grad(etype):$/;"	f
test_make_batchset	test/test_utils.py	/^def test_make_batchset(swap_io):$/;"	f
test_mask	test/test_e2e_asr_transformer.py	/^def test_mask(module):$/;"	f
test_mask	test/test_e2e_st_transformer.py	/^def test_mask(module):$/;"	f
test_model_trainable_and_decodable	test/test_e2e_asr.py	/^def test_model_trainable_and_decodable(module, model_dict):$/;"	f
test_model_trainable_and_decodable	test/test_e2e_asr_mulenc.py	/^def test_model_trainable_and_decodable(module, num_encs, model_dict):$/;"	f
test_model_trainable_and_decodable	test/test_e2e_mt.py	/^def test_model_trainable_and_decodable(module, model_dict):$/;"	f
test_model_trainable_and_decodable	test/test_e2e_st.py	/^def test_model_trainable_and_decodable(module, model_dict):$/;"	f
test_mtl_loss	test/test_e2e_asr.py	/^def test_mtl_loss(etype):$/;"	f
test_mtl_loss	test/test_e2e_st.py	/^def test_mtl_loss(etype):$/;"	f
test_multi_gpu_trainable	test/test_e2e_asr.py	/^def test_multi_gpu_trainable(module):$/;"	f
test_multi_gpu_trainable	test/test_e2e_asr_mulenc.py	/^def test_multi_gpu_trainable(module, num_encs):$/;"	f
test_multi_gpu_trainable	test/test_e2e_mt.py	/^def test_multi_gpu_trainable(module):$/;"	f
test_multi_gpu_trainable	test/test_e2e_st.py	/^def test_multi_gpu_trainable(module):$/;"	f
test_optimizer	test/test_optimizer.py	/^def test_optimizer(ch_opt_t, th_opt_t):$/;"	f
test_optional_args	test/test_transform.py	/^def test_optional_args():$/;"	f
test_pad_list	test/test_torch.py	/^def test_pad_list():$/;"	f
test_pe_extendable	test/test_positional_encoding.py	/^def test_pe_extendable(dtype, device):$/;"	f
test_pit_process	test/test_multi_spkrs.py	/^def test_pit_process(etype, dtype, num_spkrs, m_str, data_idx):$/;"	f
test_preprocessing	test/test_transform.py	/^def test_preprocessing(tmpdir):$/;"	f
test_pytorch_calculate_all_attentions	test/test_e2e_asr_transducer.py	/^def test_pytorch_calculate_all_attentions(atype, backend='pytorch'):$/;"	f
test_pytorch_multi_gpu_trainable	test/test_e2e_asr_transducer.py	/^def test_pytorch_multi_gpu_trainable(backend):$/;"	f
test_pytorch_trainable_transferable_and_decodable	test/test_asr_init.py	/^def test_pytorch_trainable_transferable_and_decodable(enc_init, enc_mods, dec_init, dec_mods, mtlalpha):$/;"	f
test_pytorch_transducer_gpu_trainable	test/test_e2e_asr_transducer.py	/^def test_pytorch_transducer_gpu_trainable(backend):$/;"	f
test_pytorch_transducer_trainable_and_decodable	test/test_e2e_asr_transducer.py	/^def test_pytorch_transducer_trainable_and_decodable(train_dic, recog_dic, backend='pytorch'):$/;"	f
test_recognition_results	test/test_recog.py	/^def test_recognition_results(etype, dtype, m_str, text_idx1):$/;"	f
test_recognition_results_multi_outputs	test/test_multi_spkrs.py	/^def test_recognition_results_multi_outputs(etype, dtype, num_spkrs, spa, m_str, text_idx1):$/;"	f
test_recognition_results_with_lm	test/test_recog.py	/^def test_recognition_results_with_lm(etype, dtype, m_str, text_idx1):$/;"	f
test_scaled_pe_extendable	test/test_positional_encoding.py	/^def test_scaled_pe_extendable(dtype, device):$/;"	f
test_segment_streaming_e2e	test/test_e2e_asr.py	/^def test_segment_streaming_e2e():$/;"	f
test_sequential	test/test_e2e_asr_transformer.py	/^def test_sequential():$/;"	f
test_sortagrad	test/test_utils.py	/^def test_sortagrad(swap_io):$/;"	f
test_sortagrad_trainable	test/test_e2e_asr.py	/^def test_sortagrad_trainable(module):$/;"	f
test_sortagrad_trainable	test/test_e2e_asr_mulenc.py	/^def test_sortagrad_trainable(module, num_encs):$/;"	f
test_sortagrad_trainable	test/test_e2e_mt.py	/^def test_sortagrad_trainable(module):$/;"	f
test_sortagrad_trainable	test/test_e2e_st.py	/^def test_sortagrad_trainable(module):$/;"	f
test_sortagrad_trainable_with_batch_bins	test/test_e2e_asr.py	/^def test_sortagrad_trainable_with_batch_bins(module):$/;"	f
test_sortagrad_trainable_with_batch_bins	test/test_e2e_asr_mulenc.py	/^def test_sortagrad_trainable_with_batch_bins(module, num_encs):$/;"	f
test_sortagrad_trainable_with_batch_bins	test/test_e2e_mt.py	/^def test_sortagrad_trainable_with_batch_bins(module):$/;"	f
test_sortagrad_trainable_with_batch_bins	test/test_e2e_st.py	/^def test_sortagrad_trainable_with_batch_bins(module):$/;"	f
test_sortagrad_trainable_with_batch_frames	test/test_e2e_asr.py	/^def test_sortagrad_trainable_with_batch_frames(module):$/;"	f
test_sortagrad_trainable_with_batch_frames	test/test_e2e_asr_mulenc.py	/^def test_sortagrad_trainable_with_batch_frames(module, num_encs):$/;"	f
test_sortagrad_trainable_with_batch_frames	test/test_e2e_mt.py	/^def test_sortagrad_trainable_with_batch_frames(module):$/;"	f
test_sortagrad_trainable_with_batch_frames	test/test_e2e_st.py	/^def test_sortagrad_trainable_with_batch_frames(module):$/;"	f
test_sound_hdf5_file	test/test_utils.py	/^def test_sound_hdf5_file(tmpdir, fmt):$/;"	f
test_spm_compatibility	test/test_sentencepiece.py	/^def test_spm_compatibility():$/;"	f
test_tacotron2_gpu_trainable_and_decodable	test/test_e2e_tts_tacotron2.py	/^def test_tacotron2_gpu_trainable_and_decodable(model_dict):$/;"	f
test_tacotron2_multi_gpu_trainable	test/test_e2e_tts_tacotron2.py	/^def test_tacotron2_multi_gpu_trainable(model_dict):$/;"	f
test_tacotron2_trainable_and_decodable	test/test_e2e_tts_tacotron2.py	/^def test_tacotron2_trainable_and_decodable(model_dict):$/;"	f
test_tensorboard_evaluator	test/test_tensorboard.py	/^def test_tensorboard_evaluator():$/;"	f
test_torch_save_and_load	test/test_e2e_asr.py	/^def test_torch_save_and_load():$/;"	f
test_torch_save_and_load	test/test_e2e_asr_mulenc.py	/^def test_torch_save_and_load(num_encs):$/;"	f
test_torch_save_and_load	test/test_e2e_mt.py	/^def test_torch_save_and_load():$/;"	f
test_torch_save_and_load	test/test_e2e_st.py	/^def test_torch_save_and_load():$/;"	f
test_train_acc	test/test_loss.py	/^def test_train_acc():$/;"	f
test_train_pytorch_dtype	test/test_train_dtype.py	/^def test_train_pytorch_dtype(dtype, device, model, conf):$/;"	f
test_transformer_gpu_trainable_and_decodable	test/test_e2e_tts_transformer.py	/^def test_transformer_gpu_trainable_and_decodable(model_dict):$/;"	f
test_transformer_mask	test/test_e2e_asr_transformer.py	/^def test_transformer_mask(module):$/;"	f
test_transformer_mask	test/test_e2e_st_transformer.py	/^def test_transformer_mask(module):$/;"	f
test_transformer_multi_gpu_trainable	test/test_e2e_tts_transformer.py	/^def test_transformer_multi_gpu_trainable(model_dict):$/;"	f
test_transformer_parallel	test/test_e2e_asr_transformer.py	/^def test_transformer_parallel():$/;"	f
test_transformer_trainable_and_decodable	test/test_e2e_asr_transformer.py	/^def test_transformer_trainable_and_decodable(module, model_dict):$/;"	f
test_transformer_trainable_and_decodable	test/test_e2e_st_transformer.py	/^def test_transformer_trainable_and_decodable(module, model_dict):$/;"	f
test_transformer_trainable_and_decodable	test/test_e2e_tts_transformer.py	/^def test_transformer_trainable_and_decodable(model_dict):$/;"	f
test_voxforge_feats	test/test_io_voxforge.py	/^def test_voxforge_feats():$/;"	f
test_window_streaming_e2e_encoder_and_ctc_with_offline_attention	test/test_e2e_asr.py	/^def test_window_streaming_e2e_encoder_and_ctc_with_offline_attention():$/;"	f
test_zero_length_target	test/test_e2e_asr.py	/^def test_zero_length_target(etype):$/;"	f
test_zero_length_target	test/test_e2e_mt.py	/^def test_zero_length_target(etype):$/;"	f
test_zero_length_target	test/test_e2e_st.py	/^def test_zero_length_target(etype):$/;"	f
testing	docker/build.sh	/^testing(){$/;"	f
tests_require	setup.py	/^      tests_require=tests_require,$/;"	v
tests_require	setup.py	/^tests_require = requirements['test']$/;"	v
texinfo_documents	doc/conf.py	/^texinfo_documents = [$/;"	v
text	egs/commonvoice/asr1/local/filter_text.py	/^        text = ' '.join(x.rstrip().split()[1:])$/;"	v
text	egs/jnas/asr1/local/filter_text.py	/^        text = ' '.join(x.rstrip().split()[1:])$/;"	v
text	egs/jnas/tts1/local/filter_text.py	/^        text = ' '.join(x.rstrip().split()[1:])$/;"	v
text	egs/ljspeech/tts1/local/clean_text.py	/^                text = clean_content.lower()$/;"	v
text	egs/ljspeech/tts2/local/clean_text.py	/^                text = clean_content.lower()$/;"	v
text	egs/voxforge/asr1/local/filter_text.py	/^        text = ' '.join(x.rstrip().split()[1:])$/;"	v
text_to_sequence	egs/arctic/tts1/local/text/__init__.py	/^def text_to_sequence(text, cleaner_names):$/;"	f
text_to_sequence	egs/ljspeech/tts1/local/text/__init__.py	/^def text_to_sequence(text, cleaner_names):$/;"	f
text_to_sequence	egs/ljspeech/tts2/local/text/__init__.py	/^def text_to_sequence(text, cleaner_names):$/;"	f
text_to_sequence	egs/tweb/tts1/local/text/__init__.py	/^def text_to_sequence(text, cleaner_names):$/;"	f
tgt_lang	test/test_beam_search.py	/^    tgt_lang=False$/;"	v
tgt_lang	test/test_initialization.py	/^    tgt_lang=False$/;"	v
th_accuracy	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^from espnet.nets.pytorch_backend.nets_utils import th_accuracy$/;"	i
th_accuracy	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^from espnet.nets.pytorch_backend.nets_utils import th_accuracy$/;"	i
th_accuracy	espnet/nets/pytorch_backend/nets_utils.py	/^def th_accuracy(pad_outputs, pad_targets, ignore_label):$/;"	f
th_accuracy	espnet/nets/pytorch_backend/rnn/decoders.py	/^from espnet.nets.pytorch_backend.nets_utils import th_accuracy$/;"	i
th_accuracy	test/test_loss.py	/^from espnet.nets.pytorch_backend.nets_utils import th_accuracy$/;"	i
time	egs/reverb/asr1/local/run_wpe.py	/^import time$/;"	i
time	egs/reverb/asr1_multich/local/run_wpe.py	/^import time$/;"	i
time	espnet/nets/pytorch_backend/wavenet.py	/^import time$/;"	i
time	espnet/tts/pytorch_backend/tts.py	/^import time$/;"	i
time	test/test_transformer_decode.py	/^    from time import time$/;"	i
time	utils/generate_wav_from_fbank.py	/^import time$/;"	i
time_mask	espnet/transform/spec_augment.py	/^def time_mask(spec, T=40, n_mask=2, replace_with_zero=True, inplace=False):$/;"	f
time_mask	espnet/transform/transformation.py	/^    time_mask='espnet.transform.spec_augment:TimeMask',$/;"	v
time_mask	espnet/utils/spec_augment.py	/^def time_mask(spec, T=40, num_masks=1, replace_with_zero=False):$/;"	f
time_warp	espnet/transform/spec_augment.py	/^def time_warp(x, max_time_warp=80, inplace=False, mode="PIL"):$/;"	f
time_warp	espnet/transform/transformation.py	/^    time_warp='espnet.transform.spec_augment:TimeWarp',$/;"	v
time_warp	espnet/utils/spec_augment.py	/^def time_warp(spec, W=5):$/;"	f
tmpFile	egs/fisher_callhome_spanish/asr1/local/callhome_make_spk2gender.py	/^    tmpFile = open(tmpFileLocation)$/;"	v
tmpFile	egs/fisher_callhome_spanish/asr1/local/callhome_make_spk2gender.py	/^tmpFile = None$/;"	v
tmpFile	egs/fisher_callhome_spanish/asr1/local/fsp_make_spk2gender.py	/^    tmpFile = open(tmpFileLocation)$/;"	v
tmpFile	egs/fisher_callhome_spanish/asr1/local/fsp_make_spk2gender.py	/^tmpFile = None$/;"	v
tmpFile	egs/fisher_callhome_spanish/mt1/local/callhome_make_spk2gender.py	/^    tmpFile = open(tmpFileLocation)$/;"	v
tmpFile	egs/fisher_callhome_spanish/mt1/local/callhome_make_spk2gender.py	/^tmpFile = None$/;"	v
tmpFile	egs/fisher_callhome_spanish/mt1/local/fsp_make_spk2gender.py	/^    tmpFile = open(tmpFileLocation)$/;"	v
tmpFile	egs/fisher_callhome_spanish/mt1/local/fsp_make_spk2gender.py	/^tmpFile = None$/;"	v
tmpFile	egs/fisher_callhome_spanish/st1/local/callhome_make_spk2gender.py	/^    tmpFile = open(tmpFileLocation)$/;"	v
tmpFile	egs/fisher_callhome_spanish/st1/local/callhome_make_spk2gender.py	/^tmpFile = None$/;"	v
tmpFile	egs/fisher_callhome_spanish/st1/local/fsp_make_spk2gender.py	/^    tmpFile = open(tmpFileLocation)$/;"	v
tmpFile	egs/fisher_callhome_spanish/st1/local/fsp_make_spk2gender.py	/^tmpFile = None$/;"	v
tmpFileLocation	egs/fisher_callhome_spanish/asr1/local/callhome_make_spk2gender.py	/^tmpFileLocation = 'data\/local\/tmp\/callhome_spk2gendertmp'$/;"	v
tmpFileLocation	egs/fisher_callhome_spanish/asr1/local/fsp_make_spk2gender.py	/^tmpFileLocation = 'data\/local\/tmp\/spk2gendertmp'$/;"	v
tmpFileLocation	egs/fisher_callhome_spanish/mt1/local/callhome_make_spk2gender.py	/^tmpFileLocation = 'data\/local\/tmp\/callhome_spk2gendertmp'$/;"	v
tmpFileLocation	egs/fisher_callhome_spanish/mt1/local/fsp_make_spk2gender.py	/^tmpFileLocation = 'data\/local\/tmp\/spk2gendertmp'$/;"	v
tmpFileLocation	egs/fisher_callhome_spanish/st1/local/callhome_make_spk2gender.py	/^tmpFileLocation = 'data\/local\/tmp\/callhome_spk2gendertmp'$/;"	v
tmpFileLocation	egs/fisher_callhome_spanish/st1/local/fsp_make_spk2gender.py	/^tmpFileLocation = 'data\/local\/tmp\/spk2gendertmp'$/;"	v
tmp_id	utils/result2json.py	/^            tmp_id = x_split[1]$/;"	v
tmp_id	utils/result2json.py	/^    tmp_id = None$/;"	v
tmp_ret	utils/result2json.py	/^                tmp_ret = {}$/;"	v
tmp_ret	utils/result2json.py	/^    tmp_ret = {}$/;"	v
to_device	espnet/lm/pytorch_backend/extlm.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/ctc.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/e2e_mt.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/lm/default.py	/^from espnet.nets.pytorch_backend.e2e_asr import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/nets_utils.py	/^def to_device(m, x):$/;"	f
to_device	espnet/nets/pytorch_backend/rnn/attentions.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/rnn/decoders.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_device	espnet/nets/pytorch_backend/rnn/encoders.py	/^from espnet.nets.pytorch_backend.nets_utils import to_device$/;"	i
to_module	doc/module2rst.py	/^def to_module(path_name):$/;"	f
to_torch_tensor	espnet/nets/pytorch_backend/e2e_asr.py	/^from espnet.nets.pytorch_backend.nets_utils import to_torch_tensor$/;"	i
to_torch_tensor	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^from espnet.nets.pytorch_backend.nets_utils import to_torch_tensor$/;"	i
to_torch_tensor	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^from espnet.nets.pytorch_backend.nets_utils import to_torch_tensor$/;"	i
to_torch_tensor	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^from espnet.nets.pytorch_backend.nets_utils import to_torch_tensor$/;"	i
to_torch_tensor	espnet/nets/pytorch_backend/e2e_st.py	/^from espnet.nets.pytorch_backend.nets_utils import to_torch_tensor$/;"	i
to_torch_tensor	espnet/nets/pytorch_backend/nets_utils.py	/^def to_torch_tensor(x):$/;"	f
todo_include_todos	doc/conf.py	/^todo_include_todos = False$/;"	v
tok2int	utils/spm_decode	/^    def tok2int(tok):$/;"	f	function:main
tokenize	egs/vais1000/tts1/local/text/regex_tokenize.py	/^def tokenize(text, format=None):$/;"	f
tokenize	egs/vais1000/tts1/local/text/vietnamese_cleaners.py	/^from regex_tokenize import tokenize$/;"	i
top_beam_hyps	espnet/nets/beam_search.py	/^    def top_beam_hyps(self, hyps: List[Hypothesis]) -> List[Hypothesis]:$/;"	m	class:BeamSearch
torch	espnet/asr/asr_utils.py	/^import torch$/;"	i
torch	espnet/asr/pytorch_backend/asr.py	/^import torch$/;"	i
torch	espnet/asr/pytorch_backend/asr_init.py	/^import torch$/;"	i
torch	espnet/asr/pytorch_backend/asr_mix.py	/^import torch$/;"	i
torch	espnet/asr/pytorch_backend/recog.py	/^import torch$/;"	i
torch	espnet/bin/asr_train.py	/^import torch$/;"	i
torch	espnet/lm/pytorch_backend/extlm.py	/^import torch$/;"	i
torch	espnet/lm/pytorch_backend/extlm.py	/^import torch.nn as nn$/;"	i
torch	espnet/lm/pytorch_backend/extlm.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/lm/pytorch_backend/lm.py	/^import torch$/;"	i
torch	espnet/lm/pytorch_backend/lm.py	/^import torch.nn as nn$/;"	i
torch	espnet/mt/pytorch_backend/mt.py	/^import torch$/;"	i
torch	espnet/nets/beam_search.py	/^import torch$/;"	i
torch	espnet/nets/ctc_prefix_score.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/ctc.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/ctc.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/e2e_asr.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_asr_mix.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_asr_mulenc.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_asr_transducer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_asr_transformer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_mt.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_st.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_tts_tacotron2.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/e2e_tts_transformer.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/fastspeech/duration_calculator.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/fastspeech/duration_predictor.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/fastspeech/length_regulator.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/frontends/beamformer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/frontends/dnn_beamformer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/frontends/dnn_wpe.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/frontends/frontend.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/frontends/frontend.py	/^import torch.nn as nn$/;"	i
torch	espnet/nets/pytorch_backend/frontends/mask_estimator.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/lm/default.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/lm/default.py	/^import torch.nn as nn$/;"	i
torch	espnet/nets/pytorch_backend/lm/default.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^import torch.nn as nn$/;"	i
torch	espnet/nets/pytorch_backend/lm/seq_rnn.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/lm/transformer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/lm/transformer.py	/^import torch.nn as nn$/;"	i
torch	espnet/nets/pytorch_backend/lm/transformer.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/nets_utils.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/rnn/attentions.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/rnn/attentions.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/rnn/decoders.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/rnn/decoders.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/rnn/encoders.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/rnn/encoders.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/streaming/segment.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/streaming/window.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/tacotron2/cbhg.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/tacotron2/decoder.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/pytorch_backend/tacotron2/encoder.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/add_sos_eos.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/attention.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/decoder.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/decoder_layer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/embedding.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/encoder.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/encoder_layer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/initializer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/label_smoothing_loss.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/layer_norm.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/mask.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/multi_layer_conv.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/optimizer.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/positionwise_feed_forward.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/repeat.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/transformer/subsampling.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/wavenet.py	/^import torch$/;"	i
torch	espnet/nets/pytorch_backend/wavenet.py	/^import torch.nn.functional as F$/;"	i
torch	espnet/nets/scorer_interface.py	/^import torch$/;"	i
torch	espnet/nets/scorers/ctc.py	/^import torch$/;"	i
torch	espnet/nets/scorers/length_bonus.py	/^import torch$/;"	i
torch	espnet/st/pytorch_backend/st.py	/^import torch$/;"	i
torch	espnet/transform/spec_augment.py	/^        import torch$/;"	i
torch	espnet/tts/pytorch_backend/tts.py	/^import torch$/;"	i
torch	espnet/utils/dataset.py	/^import torch$/;"	i
torch	espnet/utils/dataset.py	/^import torch.utils.data$/;"	i
torch	espnet/utils/deterministic_utils.py	/^import torch$/;"	i
torch	espnet/utils/spec_augment.py	/^import torch$/;"	i
torch	test/test_asr_init.py	/^import torch$/;"	i
torch	test/test_beam_search.py	/^import torch$/;"	i
torch	test/test_e2e_asr.py	/^import torch$/;"	i
torch	test/test_e2e_asr_mulenc.py	/^import torch$/;"	i
torch	test/test_e2e_asr_transducer.py	/^import torch$/;"	i
torch	test/test_e2e_asr_transformer.py	/^import torch$/;"	i
torch	test/test_e2e_compatibility.py	/^import torch$/;"	i
torch	test/test_e2e_mt.py	/^import torch$/;"	i
torch	test/test_e2e_st.py	/^import torch$/;"	i
torch	test/test_e2e_st_transformer.py	/^import torch$/;"	i
torch	test/test_e2e_tts_fastspeech.py	/^import torch$/;"	i
torch	test/test_e2e_tts_tacotron2.py	/^import torch$/;"	i
torch	test/test_e2e_tts_transformer.py	/^import torch$/;"	i
torch	test/test_lm.py	/^import torch$/;"	i
torch	test/test_loss.py	/^import torch$/;"	i
torch	test/test_multi_spkrs.py	/^import torch$/;"	i
torch	test/test_optimizer.py	/^import torch  # NOQA$/;"	i
torch	test/test_positional_encoding.py	/^import torch$/;"	i
torch	test/test_recog.py	/^import torch$/;"	i
torch	test/test_torch.py	/^import torch  # NOQA$/;"	i
torch	test/test_train_dtype.py	/^import torch$/;"	i
torch	test/test_transformer_decode.py	/^import torch$/;"	i
torch	tools/check_install.py	/^    import torch$/;"	i
torch	utils/average_checkpoints.py	/^        import torch$/;"	i
torch	utils/generate_wav_from_fbank.py	/^import torch$/;"	i
torch_ctcloss	test/test_loss.py	/^        def torch_ctcloss(th_pred, th_target, th_ilen, th_olen):$/;"	f	function:test_ctc_loss
torch_load	espnet/asr/asr_utils.py	/^def torch_load(path, model):$/;"	f
torch_load	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_load	espnet/asr/pytorch_backend/asr_init.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_load	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_load	espnet/asr/pytorch_backend/recog.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_load	espnet/lm/pytorch_backend/lm.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_load	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_load	espnet/nets/pytorch_backend/e2e_tts_fastspeech.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_load	espnet/nets/tts_interface.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_load	espnet/st/pytorch_backend/st.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_load	espnet/tts/pytorch_backend/tts.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_load	test/test_e2e_compatibility.py	/^from espnet.asr.asr_utils import torch_load$/;"	i
torch_resume	espnet/asr/asr_utils.py	/^def torch_resume(snapshot_path, trainer):$/;"	f
torch_resume	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import torch_resume$/;"	i
torch_resume	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.asr_utils import torch_resume$/;"	i
torch_resume	espnet/lm/pytorch_backend/lm.py	/^from espnet.asr.asr_utils import torch_resume$/;"	i
torch_resume	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.asr_utils import torch_resume$/;"	i
torch_resume	espnet/st/pytorch_backend/st.py	/^from espnet.asr.asr_utils import torch_resume$/;"	i
torch_resume	espnet/tts/pytorch_backend/tts.py	/^from espnet.asr.asr_utils import torch_resume$/;"	i
torch_save	espnet/asr/asr_utils.py	/^def torch_save(path, model):$/;"	f
torch_snapshot	espnet/asr/asr_utils.py	/^    def torch_snapshot(trainer):$/;"	f	function:torch_snapshot
torch_snapshot	espnet/asr/asr_utils.py	/^def torch_snapshot(savefun=torch.save,$/;"	f
torch_snapshot	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import torch_snapshot, torch_snapshot_cleanup$/;"	i
torch_snapshot	espnet/asr/pytorch_backend/asr_mix.py	/^from espnet.asr.asr_utils import torch_snapshot$/;"	i
torch_snapshot	espnet/lm/pytorch_backend/lm.py	/^from espnet.asr.asr_utils import torch_snapshot$/;"	i
torch_snapshot	espnet/mt/pytorch_backend/mt.py	/^from espnet.asr.asr_utils import torch_snapshot$/;"	i
torch_snapshot	espnet/st/pytorch_backend/st.py	/^from espnet.asr.asr_utils import torch_snapshot$/;"	i
torch_snapshot	espnet/tts/pytorch_backend/tts.py	/^from espnet.asr.asr_utils import torch_snapshot$/;"	i
torch_snapshot_cleanup	espnet/asr/asr_utils.py	/^    def torch_snapshot_cleanup(trainer):$/;"	f	function:torch_snapshot_cleanup
torch_snapshot_cleanup	espnet/asr/asr_utils.py	/^def torch_snapshot_cleanup(snapshots_num_keeps=10):$/;"	f
torch_snapshot_cleanup	espnet/asr/pytorch_backend/asr.py	/^from espnet.asr.asr_utils import torch_snapshot, torch_snapshot_cleanup$/;"	i
total_count	utils/text2vocabulary.py	/^    total_count = sum(counts.values())$/;"	v
tqdm	egs/reverb/asr1/local/run_wpe.py	/^from tqdm import tqdm$/;"	i
tqdm	egs/reverb/asr1_multich/local/run_wpe.py	/^from tqdm import tqdm$/;"	i
tqdm	espnet/lm/lm_utils.py	/^from tqdm import tqdm$/;"	i
train	espnet/asr/chainer_backend/asr.py	/^def train(args):$/;"	f
train	espnet/asr/pytorch_backend/asr.py	/^def train(args):$/;"	f
train	espnet/asr/pytorch_backend/asr_mix.py	/^def train(args):$/;"	f
train	espnet/bin/asr_train.py	/^            from espnet.asr.chainer_backend.asr import train$/;"	i
train	espnet/bin/asr_train.py	/^            from espnet.asr.pytorch_backend.asr import train$/;"	i
train	espnet/bin/asr_train.py	/^            from espnet.asr.pytorch_backend.asr_mix import train$/;"	i
train	espnet/bin/lm_train.py	/^        from espnet.lm.chainer_backend.lm import train$/;"	i
train	espnet/bin/lm_train.py	/^        from espnet.lm.pytorch_backend.lm import train$/;"	i
train	espnet/bin/mt_train.py	/^        from espnet.mt.pytorch_backend.mt import train$/;"	i
train	espnet/bin/st_train.py	/^        from espnet.st.pytorch_backend.st import train$/;"	i
train	espnet/bin/tts_train.py	/^        from espnet.tts.pytorch_backend.tts import train$/;"	i
train	espnet/lm/chainer_backend/lm.py	/^def train(args):$/;"	f
train	espnet/lm/pytorch_backend/lm.py	/^def train(args):$/;"	f
train	espnet/mt/pytorch_backend/mt.py	/^def train(args):$/;"	f
train	espnet/st/pytorch_backend/st.py	/^def train(args):$/;"	f
train	espnet/tts/pytorch_backend/tts.py	/^def train(args):$/;"	f
training	espnet/asr/asr_utils.py	/^from chainer import training$/;"	i
training	espnet/asr/chainer_backend/asr.py	/^from chainer import training$/;"	i
training	espnet/asr/pytorch_backend/asr.py	/^from chainer import training$/;"	i
training	espnet/asr/pytorch_backend/asr_mix.py	/^from chainer import training$/;"	i
training	espnet/lm/chainer_backend/lm.py	/^from chainer import training$/;"	i
training	espnet/lm/pytorch_backend/lm.py	/^from chainer import training$/;"	i
training	espnet/mt/pytorch_backend/mt.py	/^from chainer import training$/;"	i
training	espnet/nets/chainer_backend/rnn/training.py	/^from chainer import training$/;"	i
training	espnet/nets/chainer_backend/transformer/training.py	/^from chainer import training$/;"	i
training	espnet/st/pytorch_backend/st.py	/^from chainer import training$/;"	i
training	espnet/tts/pytorch_backend/tts.py	/^from chainer import training$/;"	i
training_run	egs/voxforge/asr1/run_rnnt.sh	/^    training_run() {$/;"	f
trans	espnet/bin/mt_trans.py	/^        from espnet.mt.pytorch_backend.mt import trans$/;"	i
trans	espnet/bin/st_trans.py	/^        from espnet.st.pytorch_backend.st import trans$/;"	i
trans	espnet/mt/pytorch_backend/mt.py	/^def trans(args):$/;"	f
trans	espnet/st/pytorch_backend/st.py	/^def trans(args):$/;"	f
transfer_lm	test/test_lm.py	/^def transfer_lm(ch_rnnlm, th_rnnlm):$/;"	f
transfer_lstm	test/test_lm.py	/^def transfer_lstm(ch_lstm, th_lstm):$/;"	f
transfer_verification	espnet/asr/pytorch_backend/asr_init.py	/^def transfer_verification(model_state_dict, partial_state_dict, modules):$/;"	f
transformer_args	test/test_beam_search.py	/^transformer_args = Namespace($/;"	v
transformer_attn_dropout_rate	test/test_beam_search.py	/^    transformer_attn_dropout_rate=None,$/;"	v
transformer_init	test/test_beam_search.py	/^    transformer_init="pytorch",$/;"	v
transformer_input_layer	test/test_beam_search.py	/^    transformer_input_layer="conv2d",$/;"	v
transformer_length_normalized_loss	test/test_beam_search.py	/^    transformer_length_normalized_loss=True,$/;"	v
translate	espnet/nets/mt_interface.py	/^    def translate(self, x, trans_args, char_list=None, rnnlm=None):$/;"	m	class:MTInterface
translate	espnet/nets/pytorch_backend/e2e_mt.py	/^    def translate(self, x, trans_args, char_list, rnnlm=None):$/;"	m	class:E2E
translate	espnet/nets/pytorch_backend/e2e_st.py	/^    def translate(self, x, trans_args, char_list, rnnlm=None):$/;"	m	class:E2E
translate	espnet/nets/pytorch_backend/e2e_st_transformer.py	/^    def translate(self, x, trans_args, char_list=None, rnnlm=None, use_jit=False):$/;"	m	class:E2E
translate	espnet/nets/st_interface.py	/^    def translate(self, x, trans_args, char_list=None, rnnlm=None, ensemble_models=[]):$/;"	m	class:STInterface
translate_batch	espnet/nets/mt_interface.py	/^    def translate_batch(self, x, trans_args, char_list=None, rnnlm=None):$/;"	m	class:MTInterface
translate_batch	espnet/nets/pytorch_backend/e2e_mt.py	/^    def translate_batch(self, xs, trans_args, char_list, rnnlm=None):$/;"	m	class:E2E
translate_batch	espnet/nets/pytorch_backend/e2e_st.py	/^    def translate_batch(self, xs, trans_args, char_list, rnnlm=None):$/;"	m	class:E2E
translate_batch	espnet/nets/st_interface.py	/^    def translate_batch(self, x, trans_args, char_list=None, rnnlm=None):$/;"	m	class:STInterface
transliteration_cleaners	egs/arctic/tts1/local/text/cleaners.py	/^def transliteration_cleaners(text):$/;"	f
transliteration_cleaners	egs/ljspeech/tts1/local/text/cleaners.py	/^def transliteration_cleaners(text):$/;"	f
transliteration_cleaners	egs/ljspeech/tts2/local/text/cleaners.py	/^def transliteration_cleaners(text):$/;"	f
transliteration_cleaners	egs/tweb/tts1/local/text/cleaners.py	/^def transliteration_cleaners(text):$/;"	f
trim	egs/hub4_spanish/asr1/local/parse_sgm.pl	/^sub  trim { my $s = shift; $s =~ s\/^\\s+|\\s+$\/\/g; return $s };$/;"	s
trim	egs/hub4_spanish/asr1/local/prepare_test_text.pl	/^sub  trim { my $s = shift; $s =~ s\/^\\s+|\\s+$\/\/g; return $s };$/;"	s
trim	egs/swbd/asr1/local/swbd1_fix_speakerid.pl	/^sub trim {$/;"	s
trn2ctm	utils/json2sctm.py	/^    from utils import trn2ctm$/;"	i
trn2stm	utils/json2sctm.py	/^    from utils import trn2stm$/;"	i
type_check	espnet/nets/chainer_backend/deterministic_embed_id.py	/^from chainer.utils import type_check$/;"	i
type_func	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                        type_func = eval(type_func_str)$/;"	v
type_func	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                    type_func = info[2]$/;"	v
type_func	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                    type_func = str$/;"	v
type_func	utils/merge_scp2json.py	/^                        type_func = eval(type_func_str)$/;"	v
type_func	utils/merge_scp2json.py	/^                    type_func = None$/;"	v
type_func	utils/merge_scp2json.py	/^                    type_func = info[2]$/;"	v
type_func_str	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                    type_func_str = 'str'$/;"	v
type_func_str	utils/merge_scp2json.py	/^                    type_func_str = 'none'$/;"	v
unicode_literals	egs/csj/asr1/local/csj_rm_tag.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	egs/jnas/asr1/local/filter_text.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	egs/jnas/tts1/local/filter_text.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	egs/libri_trans/asr1/local/concat_json_multiref.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	egs/libri_trans/mt1/local/concat_json_multiref.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	egs/libri_trans/st1/local/concat_json_multiref.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	egs/reverb/asr1/local/filterjson.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	egs/reverb/asr1_multich/local/filterjson.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	egs/voxforge/asr1/local/filter_text.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	egs/wsj_mix/asr1/local/merge_scp2json.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	utils/addjson.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	utils/concatjson.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	utils/filt.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	utils/json2text.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	utils/merge_scp2json.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	utils/mergejson.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	utils/result2json.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	utils/scp2json.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	utils/splitjson.py	/^from __future__ import unicode_literals$/;"	i
unicode_literals	utils/spm_decode	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
unicode_literals	utils/spm_encode	/^from __future__ import absolute_import, division, print_function, unicode_literals$/;"	i
unicode_literals	utils/text2token.py	/^from __future__ import unicode_literals$/;"	i
unidecode	egs/arctic/tts1/local/text/cleaners.py	/^from unidecode import unidecode$/;"	i
unidecode	egs/ljspeech/tts1/local/text/cleaners.py	/^from unidecode import unidecode$/;"	i
unidecode	egs/ljspeech/tts2/local/text/cleaners.py	/^from unidecode import unidecode$/;"	i
unidecode	egs/tweb/tts1/local/text/cleaners.py	/^from unidecode import unidecode$/;"	i
uniform_init_parameters	espnet/nets/pytorch_backend/e2e_mt.py	/^from espnet.nets.pytorch_backend.initialization import uniform_init_parameters$/;"	i
uniform_init_parameters	espnet/nets/pytorch_backend/initialization.py	/^def uniform_init_parameters(module):$/;"	f
unnorm_utt	egs/voxforge/asr1/local/make_trans.py	/^unnorm_utt = set() $/;"	v
update	espnet/asr/pytorch_backend/asr.py	/^    def update(self):$/;"	m	class:CustomUpdater
update	espnet/nets/chainer_backend/rnn/training.py	/^    def update(self):$/;"	m	class:CustomParallelUpdater
update	espnet/nets/chainer_backend/rnn/training.py	/^    def update(self):$/;"	m	class:CustomUpdater
update	espnet/nets/chainer_backend/transformer/training.py	/^    def update(self):$/;"	m	class:CustomParallelUpdater
update	espnet/nets/chainer_backend/transformer/training.py	/^    def update(self):$/;"	m	class:CustomUpdater
update	espnet/tts/pytorch_backend/tts.py	/^    def update(self):$/;"	m	class:CustomUpdater
update_core	espnet/asr/pytorch_backend/asr.py	/^    def update_core(self):$/;"	m	class:CustomUpdater
update_core	espnet/lm/chainer_backend/lm.py	/^    def update_core(self):$/;"	m	class:BPTTUpdater
update_core	espnet/lm/pytorch_backend/lm.py	/^    def update_core(self):$/;"	m	class:BPTTUpdater
update_core	espnet/nets/chainer_backend/rnn/training.py	/^    def update_core(self):$/;"	m	class:CustomParallelUpdater
update_core	espnet/nets/chainer_backend/rnn/training.py	/^    def update_core(self):$/;"	m	class:CustomUpdater
update_core	espnet/nets/chainer_backend/transformer/training.py	/^    def update_core(self):$/;"	m	class:CustomParallelUpdater
update_core	espnet/nets/chainer_backend/transformer/training.py	/^    def update_core(self):$/;"	m	class:CustomUpdater
update_core	espnet/tts/pytorch_backend/tts.py	/^    def update_core(self):$/;"	m	class:CustomUpdater
uppercase	egs/arctic/tts1/local/text/cleaners.py	/^def uppercase(text):$/;"	f
uppercase	egs/ljspeech/tts1/local/text/cleaners.py	/^def uppercase(text):$/;"	f
uppercase	egs/ljspeech/tts2/local/text/cleaners.py	/^def uppercase(text):$/;"	f
uppercase	egs/tweb/tts1/local/text/cleaners.py	/^def uppercase(text):$/;"	f
url	setup.py	/^      url='http:\/\/github.com\/espnet\/espnet',$/;"	v
usage	egs/csj/asr1/local/csj_make_trans/vocab2dic.pl	/^sub usage() {$/;"	s
use_frontend	test/test_beam_search.py	/^    use_frontend=False,$/;"	v
use_frontend	test/test_initialization.py	/^    use_frontend=False,$/;"	v
utils	espnet/utils/dataset.py	/^import torch.utils.data$/;"	i
utt2spk	utils/compute-cmvn-stats.py	/^            def utt2spk(x):$/;"	f	function:main
utt2spk	utils/compute-cmvn-stats.py	/^        def utt2spk(x):$/;"	f	function:main
utt2trans	egs/jnas/asr1/local/make_eval_trans.py	/^utt2trans = dict()$/;"	v
utt2trans	egs/jnas/asr1/local/make_train_trans.py	/^utt2trans = dict()$/;"	v
utt2trans	egs/jnas/tts1/local/make_eval_trans.py	/^utt2trans = dict()$/;"	v
utt2trans	egs/jnas/tts1/local/make_train_trans.py	/^utt2trans = dict()$/;"	v
utt2trans	egs/voxforge/asr1/local/make_trans.py	/^utt2trans = dict()$/;"	v
utt_id	egs/an4/asr1/local/data_prep.py	/^            utt_id = '-'.join([mid, pre, last])$/;"	v
utt_id	egs/an4/tts1/local/data_prep.py	/^            utt_id = '-'.join([mid, pre, last])$/;"	v
utt_id	egs/iwslt18/asr1/local/reorder_text.py	/^        utt_id = line.split()[0]$/;"	v
utt_id	egs/iwslt18/mt1/local/reorder_text.py	/^        utt_id = line.split()[0]$/;"	v
utt_id	egs/iwslt18/st1/local/reorder_text.py	/^        utt_id = line.split()[0]$/;"	v
utt_id	egs/jsut/tts1/local/prep_segments.py	/^            utt_id = recording_id$/;"	v
utt_id	egs/mini_an4/asr1/local/data_prep.py	/^            utt_id = '-'.join([mid, pre, last])$/;"	v
utt_id	egs/mini_an4/asr_mix1/local/data_prep.py	/^            utt_id = '-'.join([mid, pre, last])$/;"	v
utt_id	egs/mini_an4/tts1/local/data_prep.py	/^            utt_id = '-'.join([mid, pre, last])$/;"	v
utt_id_lists	utils/splitjson.py	/^    utt_id_lists = [utt_id_list.tolist() for utt_id_list in utt_id_lists]$/;"	v
utt_id_lists	utils/splitjson.py	/^    utt_id_lists = np.array_split(utt_ids, args.parts)$/;"	v
utt_ids	egs/jnas/asr1/local/make_train_trans.py	/^utt_ids = sys.argv[3:]$/;"	v
utt_ids	egs/jnas/tts1/local/make_train_trans.py	/^utt_ids = sys.argv[3:]$/;"	v
utt_ids	egs/voxforge/asr1/local/make_trans.py	/^utt_ids = sys.argv[3:]$/;"	v
utt_ids	utils/splitjson.py	/^    utt_ids = sorted(list(j['utts'].keys()))$/;"	v
utterance_cmvn	espnet/transform/transformation.py	/^    utterance_cmvn='espnet.transform.cmvn:UtteranceCMVN',$/;"	v
utterance_mvn	espnet/nets/pytorch_backend/frontends/feature_transform.py	/^def utterance_mvn($/;"	f
uttid	egs/chime5/asr1/local/json2text.py	/^            uttid = speaker_id + '_' + session_id$/;"	v
uttid	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^            uttid = get_uttid(wav)$/;"	v
uttid	egs/wsj_mix/asr1/local/merge_scp2json.py	/^        uttid = first.split()[0]$/;"	v
uttid	utils/merge_scp2json.py	/^                        uttid = sps[0]$/;"	v
uttid	utils/merge_scp2json.py	/^        uttid = first.split()[0]$/;"	v
v	egs/wsj_mix/asr1/local/mergejson.py	/^        v = js[0]['utts'][k]$/;"	v
v	utils/addjson.py	/^        v = js[0]['utts'][k]$/;"	v
v	utils/addjson.py	/^        v = js[1]['utts'][k]$/;"	v
v	utils/scp2json.py	/^        v = {args.key: ' '.join(x[1:])}$/;"	v
val_words	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^val_words = set()$/;"	v
valid	utils/spm_encode	/^        def valid(line):$/;"	f	function:main
valid	utils/spm_encode	/^        def valid(lines):$/;"	f	function:main
valid_symbols	egs/arctic/tts1/local/text/cmudict.py	/^valid_symbols = [$/;"	v
valid_symbols	egs/ljspeech/tts1/local/text/cmudict.py	/^valid_symbols = [$/;"	v
valid_symbols	egs/ljspeech/tts2/local/text/cmudict.py	/^valid_symbols = [$/;"	v
valid_symbols	egs/tweb/tts1/local/text/cmudict.py	/^valid_symbols = [$/;"	v
value	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                        value = type_func(value)$/;"	v
value	egs/wsj_mix/asr1/local/merge_scp2json.py	/^                    value = value.rstrip()$/;"	v
value	utils/merge_scp2json.py	/^                            value = type_func(value)$/;"	v
value	utils/merge_scp2json.py	/^                        value = ''$/;"	v
value	utils/merge_scp2json.py	/^                    value = value.rstrip()$/;"	v
values	espnet/utils/io_utils.py	/^    def values(self):$/;"	m	class:SoundHDF5File
variable	espnet/nets/chainer_backend/deterministic_embed_id.py	/^from chainer import variable$/;"	i
verbose	test/test_beam_search.py	/^    verbose=2,$/;"	v
verbose	test/test_initialization.py	/^    verbose=True,$/;"	v
version	doc/conf.py	/^version = espnet.__version__$/;"	v
version	setup.py	/^      version='0.6.0',$/;"	v
vietnamese_cleaner	egs/vais1000/tts1/local/clean_text.py	/^from vietnamese_cleaners import vietnamese_cleaner$/;"	i
vietnamese_cleaner	egs/vais1000/tts1/local/text/vietnamese_cleaners.py	/^def vietnamese_cleaner(text):$/;"	f
vocabulary	utils/text2vocabulary.py	/^    vocabulary = []$/;"	v
volume_perturbation	espnet/transform/transformation.py	/^    volume_perturbation='espnet.transform.perturb:VolumePerturbation',$/;"	v
warnings	utils/eval-source-separation.py	/^import warnings$/;"	i
warp_ctc	espnet/nets/chainer_backend/ctc.py	/^        from chainer_ctc.warpctc import ctc as warp_ctc$/;"	i
warp_ctc	espnet/nets/chainer_backend/transformer/ctc.py	/^        from chainer_ctc.warpctc import ctc as warp_ctc$/;"	i
warp_ctc	espnet/nets/pytorch_backend/ctc.py	/^            import warpctc_pytorch as warp_ctc$/;"	i
warpctc_pytorch	test/test_loss.py	/^        import warpctc_pytorch$/;"	i
wav	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^            wav = idir + row[1][19:][:-3] + 'mp3'$/;"	v
window_length	egs/reverb/asr1/local/run_wpe.py	/^    window_length=None,$/;"	v
window_length	egs/reverb/asr1_multich/local/run_wpe.py	/^    window_length=None,$/;"	v
word	egs/fisher_swbd/asr1/local/format_acronyms_dict.py	/^    word = items[0]$/;"	v
word	egs/swbd/asr1/local/format_acronyms_dict.py	/^    word = items[0]$/;"	v
word	egs/vais1000/tts1/local/text/regex_tokenize.py	/^word = r"\\w+"$/;"	v
words	egs/an4/asr1/local/data_prep.py	/^                words = words[4:]$/;"	v
words	egs/an4/asr1/local/data_prep.py	/^                words = words[:-5]$/;"	v
words	egs/an4/asr1/local/data_prep.py	/^            words = re.search(r'^(.*) \\(', line).group(1)$/;"	v
words	egs/an4/tts1/local/data_prep.py	/^                words = words[4:]$/;"	v
words	egs/an4/tts1/local/data_prep.py	/^                words = words[:-5]$/;"	v
words	egs/an4/tts1/local/data_prep.py	/^            words = re.search(r'^(.*) \\(', line).group(1)$/;"	v
words	egs/chime5/asr1/local/json2text.py	/^                              .replace('!', '').lower()$/;"	v
words	egs/chime5/asr1/local/json2text.py	/^            words = " ".join(words.split())$/;"	v
words	egs/mini_an4/asr1/local/data_prep.py	/^                words = words[4:]$/;"	v
words	egs/mini_an4/asr1/local/data_prep.py	/^                words = words[:-5]$/;"	v
words	egs/mini_an4/asr1/local/data_prep.py	/^            words = re.search(r'^(.*) \\(', line).group(1)$/;"	v
words	egs/mini_an4/asr_mix1/local/data_prep.py	/^                words = words[4:]$/;"	v
words	egs/mini_an4/asr_mix1/local/data_prep.py	/^                words = words[:-5]$/;"	v
words	egs/mini_an4/asr_mix1/local/data_prep.py	/^            words = re.search(r'^(.*) \\(', line).group(1)$/;"	v
words	egs/mini_an4/tts1/local/data_prep.py	/^                words = words[4:]$/;"	v
words	egs/mini_an4/tts1/local/data_prep.py	/^                words = words[:-5]$/;"	v
words	egs/mini_an4/tts1/local/data_prep.py	/^            words = re.search(r'^(.*) \\(', line).group(1)$/;"	v
words	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^                words = text_file.read().strip().lower()$/;"	v
words	egs/ru_open_stt/asr1/local/ru_open_stt_prepare_data.py	/^words = ''$/;"	v
wpe	egs/reverb/asr1/local/run_wpe.py	/^from nara_wpe.wpe import wpe$/;"	i
wpe	egs/reverb/asr1_multich/local/run_wpe.py	/^from nara_wpe.wpe import wpe$/;"	i
wpe	espnet/transform/transformation.py	/^    wpe='espnet.transform.wpe:WPE',$/;"	v
wpe	espnet/transform/wpe.py	/^from nara_wpe.wpe import wpe$/;"	i
wpe_one_iteration	espnet/nets/pytorch_backend/frontends/dnn_wpe.py	/^from pytorch_wpe import wpe_one_iteration$/;"	i
wrap	espnet/nets/asr_interface.py	/^        def wrap(parser):$/;"	f	function:ASRInterface.build
wrap	espnet/nets/mt_interface.py	/^        def wrap(parser):$/;"	f	function:MTInterface.build
wrd_name	utils/json2sctm.py	/^def wrd_name(trn):$/;"	f
write	utils/convert_fbank_to_wav.py	/^from scipy.io.wavfile import write$/;"	i
write	utils/generate_wav_from_fbank.py	/^from scipy.io.wavfile import write$/;"	i
write_lab	egs/blizzard17/tts1/local/make_lab_w_punc.py	/^def write_lab(out_dir, rfile, data):$/;"	f
write_new_lab	egs/blizzard17/tts1/local/make_lab_wo_sil.py	/^def write_new_lab(out_lab_file, dur, voice_part_new, utt_array):$/;"	f
x	egs/csj/asr1/local/csj_rm_tag.py	/^        x = line.split()$/;"	v
x	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^            x = 0$/;"	v
x	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^            x = 0$/;"	v
x	test/test_transformer_decode.py	/^            x = xs[:, :i + 1]$/;"	v
x	utils/result2json.py	/^        x = line.rstrip()$/;"	v
x	utils/scp2json.py	/^        x = line.rstrip().split()$/;"	v
x_split	utils/result2json.py	/^        x_split = x.split()$/;"	v
xlen	test/test_transformer_decode.py	/^    xlen = 100$/;"	v
xml	egs/iwslt18/asr1/local/parse_xml.py	/^import xml.etree.ElementTree as etree$/;"	i
xml	egs/iwslt18/mt1/local/parse_xml.py	/^import xml.etree.ElementTree as etree$/;"	i
xml	egs/iwslt18/st1/local/parse_xml.py	/^import xml.etree.ElementTree as etree$/;"	i
xs	test/test_transformer_decode.py	/^    xs = torch.randint(0, odim, (1, xlen))$/;"	v
y	egs/fisher_swbd/asr1/local/map_acronyms_transcripts.py	/^            y = 0$/;"	v
y	egs/reverb/asr1/local/run_wpe.py	/^y = np.stack(signal_list, axis=0)$/;"	v
y	egs/reverb/asr1_multich/local/run_wpe.py	/^y = np.stack(signal_list, axis=0)$/;"	v
y	egs/swbd/asr1/local/map_acronyms_transcripts.py	/^            y = 0$/;"	v
yaml	espnet/transform/transformation.py	/^import yaml$/;"	i
yaml	utils/change_yaml.py	/^import yaml$/;"	i
yaml	utils/get_yaml.py	/^import yaml$/;"	i
z	egs/reverb/asr1/local/run_wpe.py	/^z = istft(Z, size=stft_options['size'], shift=stft_options['shift'])$/;"	v
z	egs/reverb/asr1_multich/local/run_wpe.py	/^z = istft(Z, size=stft_options['size'], shift=stft_options['shift'])$/;"	v
zero	espnet/lm/chainer_backend/extlm.py	/^    zero = 1.0e-10$/;"	v	class:LookAheadWordLM
zero	espnet/lm/chainer_backend/extlm.py	/^    zero = 1.0e-10$/;"	v	class:MultiLevelLM
zero	espnet/lm/pytorch_backend/extlm.py	/^    zero = 1.0e-10$/;"	v	class:LookAheadWordLM
zero	espnet/lm/pytorch_backend/extlm.py	/^    zero = 1.0e-10$/;"	v	class:MultiLevelLM
zero_grad	espnet/nets/pytorch_backend/transformer/optimizer.py	/^    def zero_grad(self):$/;"	m	class:NoamOpt
zero_state	espnet/nets/pytorch_backend/lm/default.py	/^    def zero_state(self, batchsize):$/;"	m	class:RNNLM
zero_state	espnet/nets/pytorch_backend/rnn/decoders.py	/^    def zero_state(self, hs_pad):$/;"	m	class:Decoder
zero_state	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def zero_state(self, ey):$/;"	m	class:DecoderRNNT
zero_state	espnet/nets/pytorch_backend/rnn/decoders_transducer.py	/^    def zero_state(self, ey):$/;"	m	class:DecoderRNNTAtt
zip_longest	espnet/asr/pytorch_backend/asr.py	/^    from itertools import izip_longest as zip_longest$/;"	i
zip_longest	espnet/asr/pytorch_backend/asr.py	/^    from itertools import zip_longest as zip_longest$/;"	i
zip_longest	espnet/asr/pytorch_backend/asr_mix.py	/^from itertools import zip_longest as zip_longest$/;"	i
zip_longest	espnet/mt/pytorch_backend/mt.py	/^    from itertools import izip_longest as zip_longest$/;"	i
zip_longest	espnet/mt/pytorch_backend/mt.py	/^    from itertools import zip_longest as zip_longest$/;"	i
zip_longest	espnet/st/pytorch_backend/st.py	/^    from itertools import izip_longest as zip_longest$/;"	i
zip_longest	espnet/st/pytorch_backend/st.py	/^    from itertools import zip_longest as zip_longest$/;"	i
zip_longest	utils/mix-mono-wav-scp.py	/^    from itertools import izip_longest as zip_longest$/;"	i
zip_longest	utils/mix-mono-wav-scp.py	/^    from itertools import zip_longest$/;"	i
